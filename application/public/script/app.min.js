!function(global, factory) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = global.document ? factory(global, !0) : function(w) {
        if (!w.document) throw new Error("jQuery requires a window with a document");
        return factory(w);
    } : factory(global);
}("undefined" != typeof window ? window : this, function(window, noGlobal) {
    function isArraylike(obj) {
        var length = "length" in obj && obj.length, type = jQuery.type(obj);
        return "function" !== type && !jQuery.isWindow(obj) && (!(1 !== obj.nodeType || !length) || ("array" === type || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj));
    }
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
        });
        if (qualifier.nodeType) return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
        });
        if ("string" == typeof qualifier) {
            if (risSimple.test(qualifier)) return jQuery.filter(qualifier, elements, not);
            qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
            return jQuery.inArray(elem, qualifier) >= 0 !== not;
        });
    }
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && 1 !== cur.nodeType);
        return cur;
    }
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = !0;
        });
        return object;
    }
    function detach() {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, !1);
            window.removeEventListener("load", completed, !1);
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed);
        }
    }
    function completed() {
        if (document.addEventListener || "load" === event.type || "complete" === document.readyState) {
            detach();
            jQuery.ready();
        }
    }
    function dataAttr(elem, key, data) {
        if (void 0 === data && 1 === elem.nodeType) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if ("string" == typeof data) {
                try {
                    data = "true" === data || "false" !== data && ("null" === data ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data);
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else data = void 0;
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) if (("data" !== name || !jQuery.isEmptyObject(obj[name])) && "toJSON" !== name) return !1;
        return !0;
    }
    function internalData(elem, name, data, pvt) {
        if (jQuery.acceptData(elem)) {
            var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
            if (id && cache[id] && (pvt || cache[id].data) || void 0 !== data || "string" != typeof name) {
                id || (id = isNode ? elem[internalKey] = deletedIds.pop() || jQuery.guid++ : internalKey);
                cache[id] || (cache[id] = isNode ? {} : {
                    toJSON: jQuery.noop
                });
                "object" != typeof name && "function" != typeof name || (pvt ? cache[id] = jQuery.extend(cache[id], name) : cache[id].data = jQuery.extend(cache[id].data, name));
                thisCache = cache[id];
                if (!pvt) {
                    thisCache.data || (thisCache.data = {});
                    thisCache = thisCache.data;
                }
                void 0 !== data && (thisCache[jQuery.camelCase(name)] = data);
                if ("string" == typeof name) {
                    ret = thisCache[name];
                    null == ret && (ret = thisCache[jQuery.camelCase(name)]);
                } else ret = thisCache;
                return ret;
            }
        }
    }
    function internalRemoveData(elem, name, pvt) {
        if (jQuery.acceptData(elem)) {
            var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
            if (cache[id]) {
                if (name) {
                    thisCache = pvt ? cache[id] : cache[id].data;
                    if (thisCache) {
                        if (jQuery.isArray(name)) name = name.concat(jQuery.map(name, jQuery.camelCase)); else if (name in thisCache) name = [ name ]; else {
                            name = jQuery.camelCase(name);
                            name = name in thisCache ? [ name ] : name.split(" ");
                        }
                        i = name.length;
                        for (;i--; ) delete thisCache[name[i]];
                        if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) return;
                    }
                }
                if (!pvt) {
                    delete cache[id].data;
                    if (!isEmptyDataObject(cache[id])) return;
                }
                isNode ? jQuery.cleanData([ elem ], !0) : support.deleteExpando || cache != cache.window ? delete cache[id] : cache[id] = null;
            }
        }
    }
    function returnTrue() {
        return !0;
    }
    function returnFalse() {
        return !1;
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }
    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) for (;list.length; ) safeFrag.createElement(list.pop());
        return safeFrag;
    }
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : void 0;
        if (!found) for (found = [], elems = context.childNodes || context; null != (elem = elems[i]); i++) !tag || jQuery.nodeName(elem, tag) ? found.push(elem) : jQuery.merge(found, getAll(elem, tag));
        return void 0 === tag || tag && jQuery.nodeName(context, tag) ? jQuery.merge([ context ], found) : found;
    }
    function fixDefaultChecked(elem) {
        rcheckableType.test(elem.type) && (elem.defaultChecked = elem.checked);
    }
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(11 !== content.nodeType ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function disableScript(elem) {
        elem.type = (null !== jQuery.find.attr(elem, "type")) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        match ? elem.type = match[1] : elem.removeAttribute("type");
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        for (var elem, i = 0; null != (elem = elems[i]); i++) jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
    }
    function cloneCopyEvent(src, dest) {
        if (1 === dest.nodeType && jQuery.hasData(src)) {
            var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (type in events) for (i = 0, l = events[type].length; i < l; i++) jQuery.event.add(dest, type, events[type][i]);
            }
            curData.data && (curData.data = jQuery.extend({}, curData.data));
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (1 === dest.nodeType) {
            nodeName = dest.nodeName.toLowerCase();
            if (!support.noCloneEvent && dest[jQuery.expando]) {
                data = jQuery._data(dest);
                for (e in data.events) jQuery.removeEvent(dest, e, data.handle);
                dest.removeAttribute(jQuery.expando);
            }
            if ("script" === nodeName && dest.text !== src.text) {
                disableScript(dest).text = src.text;
                restoreScript(dest);
            } else if ("object" === nodeName) {
                dest.parentNode && (dest.outerHTML = src.outerHTML);
                support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML) && (dest.innerHTML = src.innerHTML);
            } else if ("input" === nodeName && rcheckableType.test(src.type)) {
                dest.defaultChecked = dest.checked = src.checked;
                dest.value !== src.value && (dest.value = src.value);
            } else "option" === nodeName ? dest.defaultSelected = dest.selected = src.defaultSelected : "input" !== nodeName && "textarea" !== nodeName || (dest.defaultValue = src.defaultValue);
        }
    }
    function actualDisplay(name, doc) {
        var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
    }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if ("none" === display || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write();
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function() {
                var condition = conditionFn();
                if (null != condition) {
                    if (!condition) return (this.get = hookFn).apply(this, arguments);
                    delete this.get;
                }
            }
        };
    }
    function vendorPropName(style, name) {
        if (name in style) return name;
        for (var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length; i--; ) {
            name = cssPrefixes[i] + capName;
            if (name in style) return name;
        }
        return origName;
    }
    function showHide(elements, show) {
        for (var display, elem, hidden, values = [], index = 0, length = elements.length; index < length; index++) {
            elem = elements[index];
            if (elem.style) {
                values[index] = jQuery._data(elem, "olddisplay");
                display = elem.style.display;
                if (show) {
                    values[index] || "none" !== display || (elem.style.display = "");
                    "" === elem.style.display && isHidden(elem) && (values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName)));
                } else {
                    hidden = isHidden(elem);
                    (display && "none" !== display || !hidden) && jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            elem.style && (show && "none" !== elem.style.display && "" !== elem.style.display || (elem.style.display = show ? values[index] || "" : "none"));
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        for (var i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0, val = 0; i < 4; i += 2) {
            "margin" === extra && (val += jQuery.css(elem, extra + cssExpand[i], !0, styles));
            if (isBorderBox) {
                "content" === extra && (val -= jQuery.css(elem, "padding" + cssExpand[i], !0, styles));
                "margin" !== extra && (val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], !0, styles);
                "padding" !== extra && (val += jQuery.css(elem, "border" + cssExpand[i] + "Width", !0, styles));
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = !0, val = "width" === name ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles);
        if (val <= 0 || null == val) {
            val = curCSS(elem, name, styles);
            (val < 0 || null == val) && (val = elem.style[name]);
            if (rnumnonpx.test(val)) return val;
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    function createFxNow() {
        setTimeout(function() {
            fxNow = void 0;
        });
        return fxNow = jQuery.now();
    }
    function genFx(type, includeWidth) {
        var which, attrs = {
            height: type
        }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (;i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }
        includeWidth && (attrs.opacity = attrs.width = type);
        return attrs;
    }
    function createTween(value, prop, animation) {
        for (var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length; index < length; index++) if (tween = collection[index].call(animation, prop, value)) return tween;
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (null == hooks.unqueued) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    hooks.unqueued || oldfire();
                };
            }
            hooks.unqueued++;
            anim.always(function() {
                anim.always(function() {
                    hooks.unqueued--;
                    jQuery.queue(elem, "fx").length || hooks.empty.fire();
                });
            });
        }
        if (1 === elem.nodeType && ("height" in props || "width" in props)) {
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
            display = jQuery.css(elem, "display");
            checkDisplay = "none" === display ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
            "inline" === checkDisplay && "none" === jQuery.css(elem, "float") && (support.inlineBlockNeedsLayout && "inline" !== defaultDisplay(elem.nodeName) ? style.zoom = 1 : style.display = "inline-block");
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            support.shrinkWrapBlocks() || anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || "toggle" === value;
                if (value === (hidden ? "hide" : "show")) {
                    if ("show" !== value || !dataShow || void 0 === dataShow[prop]) continue;
                    hidden = !0;
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else display = void 0;
        }
        if (jQuery.isEmptyObject(orig)) "inline" === ("none" === display ? defaultDisplay(elem.nodeName) : display) && (style.display = display); else {
            dataShow ? "hidden" in dataShow && (hidden = dataShow.hidden) : dataShow = jQuery._data(elem, "fxshow", {});
            toggle && (dataShow.hidden = !hidden);
            hidden ? jQuery(elem).show() : anim.done(function() {
                jQuery(elem).hide();
            });
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) jQuery.style(elem, prop, orig[prop]);
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = "width" === prop || "height" === prop ? 1 : 0;
                    }
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) if (!(index in props)) {
                    props[index] = value[index];
                    specialEasing[index] = easing;
                }
            } else specialEasing[name] = easing;
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function() {
            delete tick.elem;
        }), tick = function() {
            if (stopped) return !1;
            for (var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length; index < length; index++) animation.tweens[index].run(percent);
            deferred.notifyWith(elem, [ animation, percent, remaining ]);
            if (percent < 1 && length) return remaining;
            deferred.resolveWith(elem, [ animation ]);
            return !1;
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(!0, {
                specialEasing: {}
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
            },
            stop: function(gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) return this;
                stopped = !0;
                for (;index < length; index++) animation.tweens[index].run(1);
                gotoEnd ? deferred.resolveWith(elem, [ animation, gotoEnd ]) : deferred.rejectWith(elem, [ animation, gotoEnd ]);
                return this;
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (;index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) return result;
        }
        jQuery.map(props, createTween, animation);
        jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if ("string" != typeof dataTypeExpression) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
            if (jQuery.isFunction(func)) for (;dataType = dataTypes[i++]; ) if ("+" === dataType.charAt(0)) {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
            } else (structure[dataType] = structure[dataType] || []).push(func);
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        function inspect(dataType) {
            var selected;
            inspected[dataType] = !0;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if ("string" == typeof dataTypeOrTransport && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return !1;
                }
                if (seekingTransport) return !(selected = dataTypeOrTransport);
            });
            return selected;
        }
        var inspected = {}, seekingTransport = structure === transports;
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) void 0 !== src[key] && ((flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]);
        deep && jQuery.extend(!0, target, deep);
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        for (var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes; "*" === dataTypes[0]; ) {
            dataTypes.shift();
            void 0 === ct && (ct = s.mimeType || jqXHR.getResponseHeader("Content-Type"));
        }
        if (ct) for (type in contents) if (contents[type] && contents[type].test(ct)) {
            dataTypes.unshift(type);
            break;
        }
        if (dataTypes[0] in responses) finalDataType = dataTypes[0]; else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                firstDataType || (firstDataType = type);
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType);
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) for (conv in s.converters) converters[conv.toLowerCase()] = s.converters[conv];
        current = dataTypes.shift();
        for (;current; ) {
            s.responseFields[current] && (jqXHR[s.responseFields[current]] = response);
            !prev && isSuccess && s.dataFilter && (response = s.dataFilter(response, s.dataType));
            prev = current;
            current = dataTypes.shift();
            if (current) if ("*" === current) current = prev; else if ("*" !== prev && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                        if (conv) {
                            if (!0 === conv) conv = converters[conv2]; else if (!0 !== converters[conv2]) {
                                current = tmp[0];
                                dataTypes.unshift(tmp[1]);
                            }
                            break;
                        }
                    }
                }
                if (!0 !== conv) if (conv && s.throws) response = conv(response); else try {
                    response = conv(response);
                } catch (e) {
                    return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                }
            }
        }
        return {
            state: "success",
            data: response
        };
    }
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) jQuery.each(obj, function(i, v) {
            traditional || rbracket.test(prefix) ? add(prefix, v) : buildParams(prefix + "[" + ("object" == typeof v ? i : "") + "]", v, traditional, add);
        }); else if (traditional || "object" !== jQuery.type(obj)) add(prefix, obj); else for (name in obj) buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
    }
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : 9 === elem.nodeType && (elem.defaultView || elem.parentWindow);
    }
    var deletedIds = [], slice = deletedIds.slice, concat = deletedIds.concat, push = deletedIds.push, indexOf = deletedIds.indexOf, class2type = {}, toString = class2type.toString, hasOwn = class2type.hasOwnProperty, support = {}, jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
    }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn = jQuery.prototype = {
        jquery: "1.11.3",
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
            return slice.call(this);
        },
        get: function(num) {
            return null != num ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
        },
        pushStack: function(elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },
        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [ this[j] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: deletedIds.sort,
        splice: deletedIds.splice
    };
    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = !1;
        if ("boolean" == typeof target) {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        "object" == typeof target || jQuery.isFunction(target) || (target = {});
        if (i === length) {
            target = this;
            i--;
        }
        for (;i < length; i++) if (null != (options = arguments[i])) for (name in options) {
            src = target[name];
            copy = options[name];
            if (target !== copy) if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                    copyIsArray = !1;
                    clone = src && jQuery.isArray(src) ? src : [];
                } else clone = src && jQuery.isPlainObject(src) ? src : {};
                target[name] = jQuery.extend(deep, clone, copy);
            } else void 0 !== copy && (target[name] = copy);
        }
        return target;
    };
    jQuery.extend({
        expando: "jQuery" + ("1.11.3" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(msg) {
            throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
            return "function" === jQuery.type(obj);
        },
        isArray: Array.isArray || function(obj) {
            return "array" === jQuery.type(obj);
        },
        isWindow: function(obj) {
            return null != obj && obj == obj.window;
        },
        isNumeric: function(obj) {
            return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
        },
        isEmptyObject: function(obj) {
            var name;
            for (name in obj) return !1;
            return !0;
        },
        isPlainObject: function(obj) {
            var key;
            if (!obj || "object" !== jQuery.type(obj) || obj.nodeType || jQuery.isWindow(obj)) return !1;
            try {
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (e) {
                return !1;
            }
            if (support.ownLast) for (key in obj) return hasOwn.call(obj, key);
            for (key in obj) ;
            return void 0 === key || hasOwn.call(obj, key);
        },
        type: function(obj) {
            return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(data) {
            data && jQuery.trim(data) && (window.execScript || function(data) {
                window.eval.call(window, data);
            })(data);
        },
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) if (isArray) for (;i < length; i++) {
                value = callback.apply(obj[i], args);
                if (!1 === value) break;
            } else for (i in obj) {
                value = callback.apply(obj[i], args);
                if (!1 === value) break;
            } else if (isArray) for (;i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (!1 === value) break;
            } else for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (!1 === value) break;
            }
            return obj;
        },
        trim: function(text) {
            return null == text ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
            var ret = results || [];
            null != arr && (isArraylike(Object(arr)) ? jQuery.merge(ret, "string" == typeof arr ? [ arr ] : arr) : push.call(ret, arr));
            return ret;
        },
        inArray: function(elem, arr, i) {
            var len;
            if (arr) {
                if (indexOf) return indexOf.call(arr, elem, i);
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (;i < len; i++) if (i in arr && arr[i] === elem) return i;
            }
            return -1;
        },
        merge: function(first, second) {
            for (var len = +second.length, j = 0, i = first.length; j < len; ) first[i++] = second[j++];
            if (len !== len) for (;void 0 !== second[j]; ) first[i++] = second[j++];
            first.length = i;
            return first;
        },
        grep: function(elems, callback, invert) {
            for (var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                callbackInverse !== callbackExpect && matches.push(elems[i]);
            }
            return matches;
        },
        map: function(elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) for (;i < length; i++) {
                value = callback(elems[i], i, arg);
                null != value && ret.push(value);
            } else for (i in elems) {
                value = callback(elems[i], i, arg);
                null != value && ret.push(value);
            }
            return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
            var args, proxy, tmp;
            if ("string" == typeof context) {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (jQuery.isFunction(fn)) {
                args = slice.call(arguments, 2);
                proxy = function() {
                    return fn.apply(context || this, args.concat(slice.call(arguments)));
                };
                proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                return proxy;
            }
        },
        now: function() {
            return +new Date();
        },
        support: support
    });
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });
    var Sizzle = function(window) {
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            (context ? context.ownerDocument || context : preferredDoc) !== document && setDocument(context);
            context = context || document;
            results = results || [];
            nodeType = context.nodeType;
            if ("string" != typeof selector || !selector || 1 !== nodeType && 9 !== nodeType && 11 !== nodeType) return results;
            if (!seed && documentIsHTML) {
                if (11 !== nodeType && (match = rquickExpr.exec(selector))) if (m = match[1]) {
                    if (9 === nodeType) {
                        elem = context.getElementById(m);
                        if (!elem || !elem.parentNode) return results;
                        if (elem.id === m) {
                            results.push(elem);
                            return results;
                        }
                    } else if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                        results.push(elem);
                        return results;
                    }
                } else {
                    if (match[2]) {
                        push.apply(results, context.getElementsByTagName(selector));
                        return results;
                    }
                    if ((m = match[3]) && support.getElementsByClassName) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = 1 !== nodeType && selector;
                    if (1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                        groups = tokenize(selector);
                        (old = context.getAttribute("id")) ? nid = old.replace(rescape, "\\$&") : context.setAttribute("id", nid);
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        for (;i--; ) groups[i] = nid + toSelector(groups[i]);
                        newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        newSelector = groups.join(",");
                    }
                    if (newSelector) try {
                        push.apply(results, newContext.querySelectorAll(newSelector));
                        return results;
                    } catch (qsaError) {} finally {
                        old || context.removeAttribute("id");
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
            function cache(key, value) {
                keys.push(key + " ") > Expr.cacheLength && delete cache[keys.shift()];
                return cache[key + " "] = value;
            }
            var keys = [];
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = !0;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div);
            } catch (e) {
                return !1;
            } finally {
                div.parentNode && div.parentNode.removeChild(div);
                div = null;
            }
        }
        function addHandle(attrs, handler) {
            for (var arr = attrs.split("|"), i = attrs.length; i--; ) Expr.attrHandle[arr[i]] = handler;
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) return diff;
            if (cur) for (;cur = cur.nextSibling; ) if (cur === b) return -1;
            return a ? 1 : -1;
        }
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    for (var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length; i--; ) seed[j = matchIndexes[i]] && (seed[j] = !(matches[j] = seed[j]));
                });
            });
        }
        function testContext(context) {
            return context && void 0 !== context.getElementsByTagName && context;
        }
        function setFilters() {}
        function toSelector(tokens) {
            for (var i = 0, len = tokens.length, selector = ""; i < len; i++) selector += tokens[i].value;
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && "parentNode" === dir, doneName = done++;
            return combinator.first ? function(elem, context, xml) {
                for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) return matcher(elem, context, xml);
            } : function(elem, context, xml) {
                var oldCache, outerCache, newCache = [ dirruns, doneName ];
                if (xml) {
                    for (;elem = elem[dir]; ) if ((1 === elem.nodeType || checkNonElements) && matcher(elem, context, xml)) return !0;
                } else for (;elem = elem[dir]; ) if (1 === elem.nodeType || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});
                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) return newCache[2] = oldCache[2];
                    outerCache[dir] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) return !0;
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function(elem, context, xml) {
                for (var i = matchers.length; i--; ) if (!matchers[i](elem, context, xml)) return !1;
                return !0;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            for (var i = 0, len = contexts.length; i < len; i++) Sizzle(selector, contexts[i], results);
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            for (var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = null != map; i < len; i++) if ((elem = unmatched[i]) && (!filter || filter(elem, context, xml))) {
                newUnmatched.push(elem);
                mapped && map.push(i);
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            postFilter && !postFilter[expando] && (postFilter = setMatcher(postFilter));
            postFinder && !postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector));
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [ context ] : context, []), matcherIn = !preFilter || !seed && selector ? elems : condense(elems, preMap, preFilter, context, xml), matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                matcher && matcher(matcherIn, matcherOut, context, xml);
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    for (;i--; ) (elem = temp[i]) && (matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem));
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            for (;i--; ) (elem = matcherOut[i]) && temp.push(matcherIn[i] = elem);
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        for (;i--; ) (elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1 && (seed[temp] = !(results[temp] = elem));
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    postFinder ? postFinder(null, results, matcherOut, xml) : push.apply(results, matcherOut);
                }
            });
        }
        function matcherFromTokens(tokens) {
            for (var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
            }, implicitRelative, !0), matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
            }, implicitRelative, !0), matchers = [ function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
            } ]; i < len; i++) if (matcher = Expr.relative[tokens[i].type]) matchers = [ addCombinator(elementMatcher(matchers), matcher) ]; else {
                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                if (matcher[expando]) {
                    j = ++i;
                    for (;j < len && !Expr.relative[tokens[j].type]; j++) ;
                    return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                        value: " " === tokens[i - 2].type ? "*" : ""
                    })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                }
                matchers.push(matcher);
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += null == contextBackup ? 1 : Math.random() || .1, len = elems.length;
                outermost && (outermostContext = context !== document && context);
                for (;i !== len && null != (elem = elems[i]); i++) {
                    if (byElement && elem) {
                        j = 0;
                        for (;matcher = elementMatchers[j++]; ) if (matcher(elem, context, xml)) {
                            results.push(elem);
                            break;
                        }
                        outermost && (dirruns = dirrunsUnique);
                    }
                    if (bySet) {
                        (elem = !matcher && elem) && matchedCount--;
                        seed && unmatched.push(elem);
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    for (;matcher = setMatchers[j++]; ) matcher(unmatched, setMatched, context, xml);
                    if (seed) {
                        if (matchedCount > 0) for (;i--; ) unmatched[i] || setMatched[i] || (setMatched[i] = pop.call(results));
                        setMatched = condense(setMatched);
                    }
                    push.apply(results, setMatched);
                    outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1 && Sizzle.uniqueSort(results);
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
                return unmatched;
            };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function(a, b) {
            a === b && (hasDuplicate = !0);
            return 0;
        }, MAX_NEGATIVE = 1 << 31, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function(list, elem) {
            for (var i = 0, len = list.length; i < len; i++) if (list[i] === elem) return i;
            return -1;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function(_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        }, unloadHandler = function() {
            setDocument();
        };
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function(target, els) {
                    push_native.apply(target, slice.call(els));
                } : function(target, els) {
                    for (var j = target.length, i = 0; target[j++] = els[i++]; ) ;
                    target.length = j - 1;
                }
            };
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return !!documentElement && "HTML" !== documentElement.nodeName;
        };
        setDocument = Sizzle.setDocument = function(node) {
            var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || 9 !== doc.nodeType || !doc.documentElement) return document;
            document = doc;
            docElem = doc.documentElement;
            parent = doc.defaultView;
            parent && parent !== parent.top && (parent.addEventListener ? parent.addEventListener("unload", unloadHandler, !1) : parent.attachEvent && parent.attachEvent("onunload", unloadHandler));
            documentIsHTML = !isXML(doc);
            support.attributes = assert(function(div) {
                div.className = "i";
                return !div.getAttribute("className");
            });
            support.getElementsByTagName = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });
            support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
            support.getById = assert(function(div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.find.ID = function(id, context) {
                    if (void 0 !== context.getElementById && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [ m ] : [];
                    }
                };
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                delete Expr.find.ID;
                Expr.filter.ID = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = void 0 !== elem.getAttributeNode && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find.TAG = support.getElementsByTagName ? function(tag, context) {
                return void 0 !== context.getElementsByTagName ? context.getElementsByTagName(tag) : support.qsa ? context.querySelectorAll(tag) : void 0;
            } : function(tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if ("*" === tag) {
                    for (;elem = results[i++]; ) 1 === elem.nodeType && tmp.push(elem);
                    return tmp;
                }
                return results;
            };
            Expr.find.CLASS = support.getElementsByClassName && function(className, context) {
                if (documentIsHTML) return context.getElementsByClassName(className);
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(doc.querySelectorAll)) {
                assert(function(div) {
                    docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\f]' msallowcapture=''><option selected=''></option></select>";
                    div.querySelectorAll("[msallowcapture^='']").length && rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                    div.querySelectorAll("[selected]").length || rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                    div.querySelectorAll("[id~=" + expando + "-]").length || rbuggyQSA.push("~=");
                    div.querySelectorAll(":checked").length || rbuggyQSA.push(":checked");
                    div.querySelectorAll("a#" + expando + "+*").length || rbuggyQSA.push(".#.+[+~]");
                });
                assert(function(div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("name", "D");
                    div.querySelectorAll("[name=d]").length && rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                    div.querySelectorAll(":enabled").length || rbuggyQSA.push(":enabled", ":disabled");
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }
            (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) && assert(function(div) {
                support.disconnectedMatch = matches.call(div, "div");
                matches.call(div, "[s!='']:x");
                rbuggyMatches.push("!=", pseudos);
            });
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = 9 === a.nodeType ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
            } : function(a, b) {
                if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                return !1;
            };
            sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) return compare;
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                return 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0 : 4 & compare ? -1 : 1;
            } : function(a, b) {
                if (a === b) {
                    hasDuplicate = !0;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [ a ], bp = [ b ];
                if (!aup || !bup) return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                if (aup === bup) return siblingCheck(a, b);
                cur = a;
                for (;cur = cur.parentNode; ) ap.unshift(cur);
                cur = b;
                for (;cur = cur.parentNode; ) bp.unshift(cur);
                for (;ap[i] === bp[i]; ) i++;
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return doc;
        };
        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) try {
                var ret = matches.call(elem, expr);
                if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) return ret;
            } catch (e) {}
            return Sizzle(expr, document, null, [ elem ]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
            (context.ownerDocument || context) !== document && setDocument(context);
            return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
            (elem.ownerDocument || elem) !== document && setDocument(elem);
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
            return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                for (;elem = results[i++]; ) elem === results[i] && (j = duplicates.push(i));
                for (;j--; ) results.splice(duplicates[j], 1);
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function(elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (nodeType) {
                if (1 === nodeType || 9 === nodeType || 11 === nodeType) {
                    if ("string" == typeof elem.textContent) return elem.textContent;
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) ret += getText(elem);
                } else if (3 === nodeType || 4 === nodeType) return elem.nodeValue;
            } else for (;node = elem[i++]; ) ret += getText(node);
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                    "~=" === match[2] && (match[3] = " " + match[3] + " ");
                    return match.slice(0, 4);
                },
                CHILD: function(match) {
                    match[1] = match[1].toLowerCase();
                    if ("nth" === match[1].slice(0, 3)) {
                        match[3] || Sizzle.error(match[0]);
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3]));
                        match[5] = +(match[7] + match[8] || "odd" === match[3]);
                    } else match[3] && Sizzle.error(match[0]);
                    return match;
                },
                PSEUDO: function(match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr.CHILD.test(match[0])) return null;
                    if (match[3]) match[2] = match[4] || match[5] || ""; else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, !0)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function(nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return "*" === nodeNameSelector ? function() {
                        return !0;
                    } : function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function(className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                        return pattern.test("string" == typeof elem.className && elem.className || void 0 !== elem.getAttribute && elem.getAttribute("class") || "");
                    });
                },
                ATTR: function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);
                        if (null == result) return "!=" === operator;
                        if (!operator) return !0;
                        result += "";
                        return "=" === operator ? result === check : "!=" === operator ? result !== check : "^=" === operator ? check && 0 === result.indexOf(check) : "*=" === operator ? check && result.indexOf(check) > -1 : "$=" === operator ? check && result.slice(-check.length) === check : "~=" === operator ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : "|=" === operator && (result === check || result.slice(0, check.length + 1) === check + "-");
                    };
                },
                CHILD: function(type, what, argument, first, last) {
                    var simple = "nth" !== type.slice(0, 3), forward = "last" !== type.slice(-4), ofType = "of-type" === what;
                    return 1 === first && 0 === last ? function(elem) {
                        return !!elem.parentNode;
                    } : function(elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                for (;dir; ) {
                                    node = elem;
                                    for (;node = node[dir]; ) if (ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) return !1;
                                    start = dir = "only" === type && !start && "nextSibling";
                                }
                                return !0;
                            }
                            start = [ forward ? parent.firstChild : parent.lastChild ];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if (1 === node.nodeType && ++diff && node === elem) {
                                    outerCache[type] = [ dirruns, nodeIndex, diff ];
                                    break;
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) diff = cache[1]; else for (;node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop(); ) if ((ofType ? node.nodeName.toLowerCase() === name : 1 === node.nodeType) && ++diff) {
                                useCache && ((node[expando] || (node[expando] = {}))[type] = [ dirruns, diff ]);
                                if (node === elem) break;
                            }
                            diff -= last;
                            return diff === first || diff % first == 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function(pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) return fn(argument);
                    if (fn.length > 1) {
                        args = [ pseudo, pseudo, "", argument ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                            for (var idx, matched = fn(seed, argument), i = matched.length; i--; ) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function(elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function(selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                        for (var elem, unmatched = matcher(seed, null, xml, []), i = seed.length; i--; ) (elem = unmatched[i]) && (seed[i] = !(matches[i] = elem));
                    }) : function(elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                has: markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function(text) {
                    text = text.replace(runescape, funescape);
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function(lang) {
                    ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang);
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || 0 === elemLang.indexOf(lang + "-");
                            }
                        } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                        return !1;
                    };
                }),
                target: function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function(elem) {
                    return elem === docElem;
                },
                focus: function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function(elem) {
                    return !1 === elem.disabled;
                },
                disabled: function(elem) {
                    return !0 === elem.disabled;
                },
                checked: function(elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return "input" === nodeName && !!elem.checked || "option" === nodeName && !!elem.selected;
                },
                selected: function(elem) {
                    elem.parentNode && elem.parentNode.selectedIndex;
                    return !0 === elem.selected;
                },
                empty: function(elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) if (elem.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(elem) {
                    return !Expr.pseudos.empty(elem);
                },
                header: function(elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function(elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return "input" === name && "button" === elem.type || "button" === name;
                },
                text: function(elem) {
                    var attr;
                    return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (attr = elem.getAttribute("type")) || "text" === attr.toLowerCase());
                },
                first: createPositionalPseudo(function() {
                    return [ 0 ];
                }),
                last: createPositionalPseudo(function(matchIndexes, length) {
                    return [ length - 1 ];
                }),
                eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [ argument < 0 ? argument + length : argument ];
                }),
                even: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 0; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function(matchIndexes, length) {
                    for (var i = 1; i < length; i += 2) matchIndexes.push(i);
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = argument < 0 ? argument + length : argument; --i >= 0; ) matchIndexes.push(i);
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                    for (var i = argument < 0 ? argument + length : argument; ++i < length; ) matchIndexes.push(i);
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) Expr.pseudos[i] = function(type) {
            return function(elem) {
                return "input" === elem.nodeName.toLowerCase() && elem.type === type;
            };
        }(i);
        for (i in {
            submit: !0,
            reset: !0
        }) Expr.pseudos[i] = function(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return ("input" === name || "button" === name) && elem.type === type;
            };
        }(i);
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) return parseOnly ? 0 : cached.slice(0);
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            for (;soFar; ) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    match && (soFar = soFar.slice(match[0].length) || soFar);
                    groups.push(tokens = []);
                }
                matched = !1;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice(matched.length);
                }
                if (!matched) break;
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        compile = Sizzle.compile = function(selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                match || (match = tokenize(selector));
                i = match.length;
                for (;i--; ) {
                    cached = matcherFromTokens(match[i]);
                    cached[expando] ? setMatchers.push(cached) : elementMatchers.push(cached);
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = "function" == typeof selector && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (1 === match.length) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && "ID" === (token = tokens[0]).type && support.getById && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) return results;
                    compiled && (context = context.parentNode);
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                for (;i--; ) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) break;
                    if ((find = Expr.find[type]) && (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                            push.apply(results, seed);
                            return results;
                        }
                        break;
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
            return 1 & div1.compareDocumentPosition(document.createElement("div"));
        });
        assert(function(div) {
            div.innerHTML = "<a href='#'></a>";
            return "#" === div.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) return elem.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2);
        });
        support.attributes && assert(function(div) {
            div.innerHTML = "<input/>";
            div.firstChild.setAttribute("value", "");
            return "" === div.firstChild.getAttribute("value");
        }) || addHandle("value", function(elem, name, isXML) {
            if (!isXML && "input" === elem.nodeName.toLowerCase()) return elem.defaultValue;
        });
        assert(function(div) {
            return null == div.getAttribute("disabled");
        }) || addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) return !0 === elem[name] ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        });
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    var rneedsContext = jQuery.expr.match.needsContext, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, risSimple = /^.[^:#\[\.,]*$/;
    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        not && (expr = ":not(" + expr + ")");
        return 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [ elem ] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
            return 1 === elem.nodeType;
        }));
    };
    jQuery.fn.extend({
        find: function(selector) {
            var i, ret = [], self = this, len = self.length;
            if ("string" != typeof selector) return this.pushStack(jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(self[i], this)) return !0;
            }));
            for (i = 0; i < len; i++) jQuery.find(selector, self[i], ret);
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], !1));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], !0));
        },
        is: function(selector) {
            return !!winnow(this, "string" == typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], !1).length;
        }
    });
    var rootjQuery, document = window.document, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    (jQuery.fn.init = function(selector, context) {
        var match, elem;
        if (!selector) return this;
        if ("string" == typeof selector) {
            match = "<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3 ? [ null, selector, null ] : rquickExpr.exec(selector);
            if (!match || !match[1] && context) return !context || context.jquery ? (context || rootjQuery).find(selector) : this.constructor(context).find(selector);
            if (match[1]) {
                context = context instanceof jQuery ? context[0] : context;
                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, !0));
                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) for (match in context) jQuery.isFunction(this[match]) ? this[match](context[match]) : this.attr(match, context[match]);
                return this;
            }
            elem = document.getElementById(match[2]);
            if (elem && elem.parentNode) {
                if (elem.id !== match[2]) return rootjQuery.find(selector);
                this.length = 1;
                this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
        }
        if (selector.nodeType) {
            this.context = this[0] = selector;
            this.length = 1;
            return this;
        }
        if (jQuery.isFunction(selector)) return void 0 !== rootjQuery.ready ? rootjQuery.ready(selector) : selector(jQuery);
        if (void 0 !== selector.selector) {
            this.selector = selector.selector;
            this.context = selector.context;
        }
        return jQuery.makeArray(selector, this);
    }).prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    jQuery.extend({
        dir: function(elem, dir, until) {
            for (var matched = [], cur = elem[dir]; cur && 9 !== cur.nodeType && (void 0 === until || 1 !== cur.nodeType || !jQuery(cur).is(until)); ) {
                1 === cur.nodeType && matched.push(cur);
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function(n, elem) {
            for (var r = []; n; n = n.nextSibling) 1 === n.nodeType && n !== elem && r.push(n);
            return r;
        }
    });
    jQuery.fn.extend({
        has: function(target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function() {
                for (i = 0; i < len; i++) if (jQuery.contains(this, targets[i])) return !0;
            });
        },
        closest: function(selectors, context) {
            for (var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || "string" != typeof selectors ? jQuery(selectors, context || this.context) : 0; i < l; i++) for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : 1 === cur.nodeType && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
            }
            return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
            return elem ? "string" == typeof elem ? jQuery.inArray(this[0], jQuery(elem)) : jQuery.inArray(elem.jquery ? elem[0] : elem, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(selector, context) {
            return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);
            "Until" !== name.slice(-5) && (selector = until);
            selector && "string" == typeof selector && (ret = jQuery.filter(selector, ret));
            if (this.length > 1) {
                guaranteedUnique[name] || (ret = jQuery.unique(ret));
                rparentsprev.test(name) && (ret = ret.reverse());
            }
            return this.pushStack(ret);
        };
    });
    var rnotwhite = /\S+/g, optionsCache = {};
    jQuery.Callbacks = function(options) {
        options = "string" == typeof options ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function(data) {
            memory = options.memory && data;
            fired = !0;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = !0;
            for (;list && firingIndex < firingLength; firingIndex++) if (!1 === list[firingIndex].apply(data[0], data[1]) && options.stopOnFalse) {
                memory = !1;
                break;
            }
            firing = !1;
            list && (stack ? stack.length && fire(stack.shift()) : memory ? list = [] : self.disable());
        }, self = {
            add: function() {
                if (list) {
                    var start = list.length;
                    !function add(args) {
                        jQuery.each(args, function(_, arg) {
                            var type = jQuery.type(arg);
                            "function" === type ? options.unique && self.has(arg) || list.push(arg) : arg && arg.length && "string" !== type && add(arg);
                        });
                    }(arguments);
                    if (firing) firingLength = list.length; else if (memory) {
                        firingStart = start;
                        fire(memory);
                    }
                }
                return this;
            },
            remove: function() {
                list && jQuery.each(arguments, function(_, arg) {
                    for (var index; (index = jQuery.inArray(arg, list, index)) > -1; ) {
                        list.splice(index, 1);
                        if (firing) {
                            index <= firingLength && firingLength--;
                            index <= firingIndex && firingIndex--;
                        }
                    }
                });
                return this;
            },
            has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !(!list || !list.length);
            },
            empty: function() {
                list = [];
                firingLength = 0;
                return this;
            },
            disable: function() {
                list = stack = memory = void 0;
                return this;
            },
            disabled: function() {
                return !list;
            },
            lock: function() {
                stack = void 0;
                memory || self.disable();
                return this;
            },
            locked: function() {
                return !stack;
            },
            fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [ context, args.slice ? args.slice() : args ];
                    firing ? stack.push(args) : fire(args);
                }
                return this;
            },
            fire: function() {
                self.fireWith(this, arguments);
                return this;
            },
            fired: function() {
                return !!fired;
            }
        };
        return self;
    };
    jQuery.extend({
        Deferred: function(func) {
            var tuples = [ [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ], [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ], [ "notify", "progress", jQuery.Callbacks("memory") ] ], state = "pending", promise = {
                state: function() {
                    return state;
                },
                always: function() {
                    deferred.done(arguments).fail(arguments);
                    return this;
                },
                then: function() {
                    var fns = arguments;
                    return jQuery.Deferred(function(newDefer) {
                        jQuery.each(tuples, function(i, tuple) {
                            var fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function() {
                                var returned = fn && fn.apply(this, arguments);
                                returned && jQuery.isFunction(returned.promise) ? returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify) : newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments);
                            });
                        });
                        fns = null;
                    }).promise();
                },
                promise: function(obj) {
                    return null != obj ? jQuery.extend(obj, promise) : promise;
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                stateString && list.add(function() {
                    state = stateString;
                }, tuples[1 ^ i][2].disable, tuples[2][2].lock);
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            func && func.call(deferred, deferred);
            return deferred;
        },
        when: function(subordinate) {
            var progressValues, progressContexts, resolveContexts, i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = 1 !== length || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = 1 === remaining ? subordinate : jQuery.Deferred(), updateFunc = function(i, contexts, values) {
                return function(value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    values === progressValues ? deferred.notifyWith(contexts, values) : --remaining || deferred.resolveWith(contexts, values);
                };
            };
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (;i < length; i++) resolveValues[i] && jQuery.isFunction(resolveValues[i].promise) ? resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues)) : --remaining;
            }
            remaining || deferred.resolveWith(resolveContexts, resolveValues);
            return deferred.promise();
        }
    });
    var readyList;
    jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
    };
    jQuery.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(hold) {
            hold ? jQuery.readyWait++ : jQuery.ready(!0);
        },
        ready: function(wait) {
            if (!0 === wait ? !--jQuery.readyWait : !jQuery.isReady) {
                if (!document.body) return setTimeout(jQuery.ready);
                jQuery.isReady = !0;
                if (!(!0 !== wait && --jQuery.readyWait > 0)) {
                    readyList.resolveWith(document, [ jQuery ]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready");
                    }
                }
            }
        }
    });
    jQuery.ready.promise = function(obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if ("complete" === document.readyState) setTimeout(jQuery.ready); else if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", completed, !1);
                window.addEventListener("load", completed, !1);
            } else {
                document.attachEvent("onreadystatechange", completed);
                window.attachEvent("onload", completed);
                var top = !1;
                try {
                    top = null == window.frameElement && document.documentElement;
                } catch (e) {}
                top && top.doScroll && function doScrollCheck() {
                    if (!jQuery.isReady) {
                        try {
                            top.doScroll("left");
                        } catch (e) {
                            return setTimeout(doScrollCheck, 50);
                        }
                        detach();
                        jQuery.ready();
                    }
                }();
            }
        }
        return readyList.promise(obj);
    };
    var i, strundefined = "undefined";
    for (i in jQuery(support)) break;
    support.ownLast = "0" !== i;
    support.inlineBlockNeedsLayout = !1;
    jQuery(function() {
        var val, div, body, container;
        body = document.getElementsByTagName("body")[0];
        if (body && body.style) {
            div = document.createElement("div");
            container = document.createElement("div");
            container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
            body.appendChild(container).appendChild(div);
            if (typeof div.style.zoom !== strundefined) {
                div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";
                support.inlineBlockNeedsLayout = val = 3 === div.offsetWidth;
                val && (body.style.zoom = 1);
            }
            body.removeChild(container);
        }
    });
    !function() {
        var div = document.createElement("div");
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
        div = null;
    }();
    jQuery.acceptData = function(elem) {
        var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1;
        return (1 === nodeType || 9 === nodeType) && (!noData || !0 !== noData && elem.getAttribute("classid") === noData);
    };
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
    jQuery.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function(elem, name, data) {
            return internalData(elem, name, data, !0);
        },
        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, !0);
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (void 0 === key) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (1 === elem.nodeType && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length;
                        for (;i--; ) if (attrs[i]) {
                            name = attrs[i].name;
                            if (0 === name.indexOf("data-")) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", !0);
                    }
                }
                return data;
            }
            return "object" == typeof key ? this.each(function() {
                jQuery.data(this, key);
            }) : arguments.length > 1 ? this.each(function() {
                jQuery.data(this, key, value);
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : void 0;
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                data && (!queue || jQuery.isArray(data) ? queue = jQuery._data(elem, type, jQuery.makeArray(data)) : queue.push(data));
                return queue || [];
            }
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
                jQuery.dequeue(elem, type);
            };
            if ("inprogress" === fn) {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                "fx" === type && queue.unshift("inprogress");
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            !startLength && hooks && hooks.empty.fire();
        },
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;
            if ("string" != typeof type) {
                data = type;
                type = "fx";
                setter--;
            }
            return arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                "fx" === type && "inprogress" !== queue[0] && jQuery.dequeue(this, type);
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
                --count || defer.resolveWith(elements, [ elements ]);
            };
            if ("string" != typeof type) {
                obj = type;
                type = void 0;
            }
            type = type || "fx";
            for (;i--; ) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, cssExpand = [ "Top", "Right", "Bottom", "Left" ], isHidden = function(elem, el) {
        elem = el || elem;
        return "none" === jQuery.css(elem, "display") || !jQuery.contains(elem.ownerDocument, elem);
    }, access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = null == key;
        if ("object" === jQuery.type(key)) {
            chainable = !0;
            for (i in key) jQuery.access(elems, fn, i, key[i], !0, emptyGet, raw);
        } else if (void 0 !== value) {
            chainable = !0;
            jQuery.isFunction(value) || (raw = !0);
            if (bulk) if (raw) {
                fn.call(elems, value);
                fn = null;
            } else {
                bulk = fn;
                fn = function(elem, key, value) {
                    return bulk.call(jQuery(elem), value);
                };
            }
            if (fn) for (;i < length; i++) fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    }, rcheckableType = /^(?:checkbox|radio)$/i;
    !function() {
        var input = document.createElement("input"), div = document.createElement("div"), fragment = document.createDocumentFragment();
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        support.leadingWhitespace = 3 === div.firstChild.nodeType;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(!0).outerHTML;
        input.type = "checkbox";
        input.checked = !0;
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(!0).lastChild.defaultValue;
        fragment.appendChild(div);
        div.innerHTML = "<input type='radio' checked='checked' name='t'/>";
        support.checkClone = div.cloneNode(!0).cloneNode(!0).lastChild.checked;
        support.noCloneEvent = !0;
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = !1;
            });
            div.cloneNode(!0).click();
        }
        if (null == support.deleteExpando) {
            support.deleteExpando = !0;
            try {
                delete div.test;
            } catch (e) {
                support.deleteExpando = !1;
            }
        }
    }();
    !function() {
        var i, eventName, div = document.createElement("div");
        for (i in {
            submit: !0,
            change: !0,
            focusin: !0
        }) {
            eventName = "on" + i;
            if (!(support[i + "Bubbles"] = eventName in window)) {
                div.setAttribute(eventName, "t");
                support[i + "Bubbles"] = !1 === div.attributes[eventName].expando;
            }
        }
        div = null;
    }();
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (elemData) {
                if (handler.handler) {
                    handleObjIn = handler;
                    handler = handleObjIn.handler;
                    selector = handleObjIn.selector;
                }
                handler.guid || (handler.guid = jQuery.guid++);
                (events = elemData.events) || (events = elemData.events = {});
                if (!(eventHandle = elemData.handle)) {
                    eventHandle = elemData.handle = function(e) {
                        return typeof jQuery === strundefined || e && jQuery.event.triggered === e.type ? void 0 : jQuery.event.dispatch.apply(eventHandle.elem, arguments);
                    };
                    eventHandle.elem = elem;
                }
                types = (types || "").match(rnotwhite) || [ "" ];
                t = types.length;
                for (;t--; ) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            handlers = events[type] = [];
                            handlers.delegateCount = 0;
                            special.setup && !1 !== special.setup.call(elem, data, namespaces, eventHandle) || (elem.addEventListener ? elem.addEventListener(type, eventHandle, !1) : elem.attachEvent && elem.attachEvent("on" + type, eventHandle));
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            handleObj.handler.guid || (handleObj.handler.guid = handler.guid);
                        }
                        selector ? handlers.splice(handlers.delegateCount++, 0, handleObj) : handlers.push(handleObj);
                        jQuery.event.global[type] = !0;
                    }
                }
                elem = null;
            }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (elemData && (events = elemData.events)) {
                types = (types || "").match(rnotwhite) || [ "" ];
                t = types.length;
                for (;t--; ) {
                    tmp = rtypenamespace.exec(types[t]) || [];
                    type = origType = tmp[1];
                    namespaces = (tmp[2] || "").split(".").sort();
                    if (type) {
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        for (;j--; ) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || "**" === selector && handleObj.selector)) {
                                handlers.splice(j, 1);
                                handleObj.selector && handlers.delegateCount--;
                                special.remove && special.remove.call(elem, handleObj);
                            }
                        }
                        if (origCount && !handlers.length) {
                            special.teardown && !1 !== special.teardown.call(elem, namespaces, elemData.handle) || jQuery.removeEvent(elem, type, elemData.handle);
                            delete events[type];
                        }
                    } else for (type in events) jQuery.event.remove(elem, type + types[t], handler, selector, !0);
                }
                if (jQuery.isEmptyObject(events)) {
                    delete elemData.handle;
                    jQuery._removeData(elem, "events");
                }
            }
        },
        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [ elem || document ], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (3 !== elem.nodeType && 8 !== elem.nodeType && !rfocusMorph.test(type + jQuery.event.triggered)) {
                if (type.indexOf(".") >= 0) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespaces.sort();
                }
                ontype = type.indexOf(":") < 0 && "on" + type;
                event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event);
                event.isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join(".");
                event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                event.result = void 0;
                event.target || (event.target = elem);
                data = null == data ? [ event ] : jQuery.makeArray(data, [ event ]);
                special = jQuery.event.special[type] || {};
                if (onlyHandlers || !special.trigger || !1 !== special.trigger.apply(elem, data)) {
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        rfocusMorph.test(bubbleType + type) || (cur = cur.parentNode);
                        for (;cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur;
                        }
                        tmp === (elem.ownerDocument || document) && eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                    }
                    i = 0;
                    for (;(cur = eventPath[i++]) && !event.isPropagationStopped(); ) {
                        event.type = i > 1 ? bubbleType : special.bindType || type;
                        handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                        handle && handle.apply(cur, data);
                        handle = ontype && cur[ontype];
                        if (handle && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            !1 === event.result && event.preventDefault();
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented() && (!special._default || !1 === special._default.apply(eventPath.pop(), data)) && jQuery.acceptData(elem) && ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        tmp && (elem[ontype] = null);
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {}
                        jQuery.event.triggered = void 0;
                        tmp && (elem[ontype] = tmp);
                    }
                    return event.result;
                }
            }
        },
        dispatch: function(event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (!special.preDispatch || !1 !== special.preDispatch.call(this, event)) {
                handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                i = 0;
                for (;(matched = handlerQueue[i++]) && !event.isPropagationStopped(); ) {
                    event.currentTarget = matched.elem;
                    j = 0;
                    for (;(handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped(); ) if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (void 0 !== ret && !1 === (event.result = ret)) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    }
                }
                special.postDispatch && special.postDispatch.call(this, event);
                return event.result;
            }
        },
        handlers: function(event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || "click" !== event.type)) for (;cur != this; cur = cur.parentNode || this) if (1 === cur.nodeType && (!0 !== cur.disabled || "click" !== event.type)) {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    void 0 === matches[sel] && (matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [ cur ]).length);
                    matches[sel] && matches.push(handleObj);
                }
                matches.length && handlerQueue.push({
                    elem: cur,
                    handlers: matches
                });
            }
            delegateCount < handlers.length && handlerQueue.push({
                elem: this,
                handlers: handlers.slice(delegateCount)
            });
            return handlerQueue;
        },
        fix: function(event) {
            if (event[jQuery.expando]) return event;
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            fixHook || (this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {});
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            for (;i--; ) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            event.target || (event.target = originalEvent.srcElement || document);
            3 === event.target.nodeType && (event.target = event.target.parentNode);
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {
                null == event.which && (event.which = null != original.charCode ? original.charCode : original.keyCode);
                return event;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (null == event.pageX && null != original.clientX) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                !event.relatedTarget && fromElement && (event.relatedTarget = fromElement === event.target ? original.toElement : fromElement);
                event.which || void 0 === button || (event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0);
                return event;
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        this.focus();
                        return !1;
                    } catch (e) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return !1;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && "checkbox" === this.type && this.click) {
                        this.click();
                        return !1;
                    }
                },
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    void 0 !== event.result && event.originalEvent && (event.originalEvent.returnValue = event.result);
                }
            }
        },
        simulate: function(type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: !0,
                originalEvent: {}
            });
            bubble ? jQuery.event.trigger(e, null, elem) : jQuery.event.dispatch.call(elem, e);
            e.isDefaultPrevented() && event.preventDefault();
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        elem.removeEventListener && elem.removeEventListener(type, handle, !1);
    } : function(elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            typeof elem[name] === strundefined && (elem[name] = null);
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) return new jQuery.Event(src, props);
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && !1 === src.returnValue ? returnTrue : returnFalse;
        } else this.type = src;
        props && jQuery.extend(this, props);
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = !0;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1);
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e) {
                e.stopPropagation && e.stopPropagation();
                e.cancelBubble = !0;
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    support.submitBubbles || (jQuery.event.special.submit = {
        setup: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : void 0;
                if (form && !jQuery._data(form, "submitBubbles")) {
                    jQuery.event.add(form, "submit._submit", function(event) {
                        event._submit_bubble = !0;
                    });
                    jQuery._data(form, "submitBubbles", !0);
                }
            });
        },
        postDispatch: function(event) {
            if (event._submit_bubble) {
                delete event._submit_bubble;
                this.parentNode && !event.isTrigger && jQuery.event.simulate("submit", this.parentNode, event, !0);
            }
        },
        teardown: function() {
            if (jQuery.nodeName(this, "form")) return !1;
            jQuery.event.remove(this, "._submit");
        }
    });
    support.changeBubbles || (jQuery.event.special.change = {
        setup: function() {
            if (rformElems.test(this.nodeName)) {
                if ("checkbox" === this.type || "radio" === this.type) {
                    jQuery.event.add(this, "propertychange._change", function(event) {
                        "checked" === event.originalEvent.propertyName && (this._just_changed = !0);
                    });
                    jQuery.event.add(this, "click._change", function(event) {
                        this._just_changed && !event.isTrigger && (this._just_changed = !1);
                        jQuery.event.simulate("change", this, event, !0);
                    });
                }
                return !1;
            }
            jQuery.event.add(this, "beforeactivate._change", function(e) {
                var elem = e.target;
                if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                    jQuery.event.add(elem, "change._change", function(event) {
                        !this.parentNode || event.isSimulated || event.isTrigger || jQuery.event.simulate("change", this.parentNode, event, !0);
                    });
                    jQuery._data(elem, "changeBubbles", !0);
                }
            });
        },
        handle: function(event) {
            var elem = event.target;
            if (this !== elem || event.isSimulated || event.isTrigger || "radio" !== elem.type && "checkbox" !== elem.type) return event.handleObj.handler.apply(this, arguments);
        },
        teardown: function() {
            jQuery.event.remove(this, "._change");
            return !rformElems.test(this.nodeName);
        }
    });
    support.focusinBubbles || jQuery.each({
        focus: "focusin",
        blur: "focusout"
    }, function(orig, fix) {
        var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), !0);
        };
        jQuery.event.special[fix] = {
            setup: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix);
                attaches || doc.addEventListener(orig, handler, !0);
                jQuery._data(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
                var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1;
                if (attaches) jQuery._data(doc, fix, attaches); else {
                    doc.removeEventListener(orig, handler, !0);
                    jQuery._removeData(doc, fix);
                }
            }
        };
    });
    jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
            var type, origFn;
            if ("object" == typeof types) {
                if ("string" != typeof selector) {
                    data = data || selector;
                    selector = void 0;
                }
                for (type in types) this.on(type, selector, data, types[type], one);
                return this;
            }
            if (null == data && null == fn) {
                fn = selector;
                data = selector = void 0;
            } else if (null == fn) if ("string" == typeof selector) {
                fn = data;
                data = void 0;
            } else {
                fn = data;
                data = selector;
                selector = void 0;
            }
            if (!1 === fn) fn = returnFalse; else if (!fn) return this;
            if (1 === one) {
                origFn = fn;
                fn = function(event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if ("object" == typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this;
            }
            if (!1 === selector || "function" == typeof selector) {
                fn = selector;
                selector = void 0;
            }
            !1 === fn && (fn = returnFalse);
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) return jQuery.event.trigger(type, data, elem, !0);
        }
    });
    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) clone = elem.cloneNode(!0); else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if (!(support.noCloneEvent && support.noCloneChecked || 1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem))) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; null != (node = srcElements[i]); ++i) destElements[i] && fixCloneNodeIssues(node, destElements[i]);
            }
            if (dataAndEvents) if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0; null != (node = srcElements[i]); i++) cloneCopyEvent(node, destElements[i]);
            } else cloneCopyEvent(elem, clone);
            destElements = getAll(clone, "script");
            destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
            for (var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0; i < l; i++) {
                elem = elems[i];
                if (elem || 0 === elem) if ("object" === jQuery.type(elem)) jQuery.merge(nodes, elem.nodeType ? [ elem ] : elem); else if (rhtml.test(elem)) {
                    tmp = tmp || safe.appendChild(context.createElement("div"));
                    tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                    j = wrap[0];
                    for (;j--; ) tmp = tmp.lastChild;
                    !support.leadingWhitespace && rleadingWhitespace.test(elem) && nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                    if (!support.tbody) {
                        elem = "table" !== tag || rtbody.test(elem) ? "<table>" !== wrap[1] || rtbody.test(elem) ? 0 : tmp : tmp.firstChild;
                        j = elem && elem.childNodes.length;
                        for (;j--; ) jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length && elem.removeChild(tbody);
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp.textContent = "";
                    for (;tmp.firstChild; ) tmp.removeChild(tmp.firstChild);
                    tmp = safe.lastChild;
                } else nodes.push(context.createTextNode(elem));
            }
            tmp && safe.removeChild(tmp);
            support.appendChecked || jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            i = 0;
            for (;elem = nodes[i++]; ) if (!selection || -1 === jQuery.inArray(elem, selection)) {
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                contains && setGlobalEval(tmp);
                if (scripts) {
                    j = 0;
                    for (;elem = tmp[j++]; ) rscriptType.test(elem.type || "") && scripts.push(elem);
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function(elems, acceptData) {
            for (var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = support.deleteExpando, special = jQuery.event.special; null != (elem = elems[i]); i++) if (acceptData || jQuery.acceptData(elem)) {
                id = elem[internalKey];
                data = id && cache[id];
                if (data) {
                    if (data.events) for (type in data.events) special[type] ? jQuery.event.remove(elem, type) : jQuery.removeEvent(elem, type, data.handle);
                    if (cache[id]) {
                        delete cache[id];
                        deleteExpando ? delete elem[internalKey] : typeof elem.removeAttribute !== strundefined ? elem.removeAttribute(internalKey) : elem[internalKey] = null;
                        deletedIds.push(id);
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        text: function(value) {
            return access(this, function(value) {
                return void 0 === value ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    manipulationTarget(this, elem).appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(elem) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(elem) {
                this.parentNode && this.parentNode.insertBefore(elem, this.nextSibling);
            });
        },
        remove: function(selector, keepData) {
            for (var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0; null != (elem = elems[i]); i++) {
                keepData || 1 !== elem.nodeType || jQuery.cleanData(getAll(elem));
                if (elem.parentNode) {
                    keepData && jQuery.contains(elem.ownerDocument, elem) && setGlobalEval(getAll(elem, "script"));
                    elem.parentNode.removeChild(elem);
                }
            }
            return this;
        },
        empty: function() {
            for (var elem, i = 0; null != (elem = this[i]); i++) {
                1 === elem.nodeType && jQuery.cleanData(getAll(elem, !1));
                for (;elem.firstChild; ) elem.removeChild(elem.firstChild);
                elem.options && jQuery.nodeName(elem, "select") && (elem.options.length = 0);
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = null != dataAndEvents && dataAndEvents;
            deepDataAndEvents = null == deepDataAndEvents ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (void 0 === value) return 1 === elem.nodeType ? elem.innerHTML.replace(rinlinejQuery, "") : void 0;
                if ("string" == typeof value && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (;i < l; i++) {
                            elem = this[i] || {};
                            if (1 === elem.nodeType) {
                                jQuery.cleanData(getAll(elem, !1));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {}
                }
                elem && this.empty().append(value);
            }, null, value, arguments.length);
        },
        replaceWith: function() {
            var arg = arguments[0];
            this.domManip(arguments, function(elem) {
                arg = this.parentNode;
                jQuery.cleanData(getAll(this));
                arg && arg.replaceChild(elem, this);
            });
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
            return this.remove(selector, !0);
        },
        domManip: function(args, callback) {
            args = concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || l > 1 && "string" == typeof value && !support.checkClone && rchecked.test(value)) return this.each(function(index) {
                var self = set.eq(index);
                isFunction && (args[0] = value.call(this, index, self.html()));
                self.domManip(args, callback);
            });
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, !1, this);
                first = fragment.firstChild;
                1 === fragment.childNodes.length && (fragment = first);
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (;i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, !0, !0);
                            hasScripts && jQuery.merge(scripts, getAll(node, "script"));
                        }
                        callback.call(this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node) && (node.src ? jQuery._evalUrl && jQuery._evalUrl(node.src) : jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, "")));
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            for (var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1; i <= last; i++) {
                elems = i === last ? this : this.clone(!0);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var iframe, elemdisplay = {};
    !function() {
        var shrinkWrapBlocksVal;
        support.shrinkWrapBlocks = function() {
            if (null != shrinkWrapBlocksVal) return shrinkWrapBlocksVal;
            shrinkWrapBlocksVal = !1;
            var div, body, container;
            body = document.getElementsByTagName("body")[0];
            if (body && body.style) {
                div = document.createElement("div");
                container = document.createElement("div");
                container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
                body.appendChild(container).appendChild(div);
                if (typeof div.style.zoom !== strundefined) {
                    div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1";
                    div.appendChild(document.createElement("div")).style.width = "5px";
                    shrinkWrapBlocksVal = 3 !== div.offsetWidth;
                }
                body.removeChild(container);
                return shrinkWrapBlocksVal;
            }
        };
    }();
    var getStyles, curCSS, rmargin = /^margin/, rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i"), rposition = /^(top|right|bottom|left)$/;
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return elem.ownerDocument.defaultView.opener ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : window.getComputedStyle(elem, null);
        };
        curCSS = function(elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed.getPropertyValue(name) || computed[name] : void 0;
            if (computed) {
                "" !== ret || jQuery.contains(elem.ownerDocument, elem) || (ret = jQuery.style(elem, name));
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return void 0 === ret ? ret : ret + "";
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };
        curCSS = function(elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style;
            computed = computed || getStyles(elem);
            ret = computed ? computed[name] : void 0;
            null == ret && style && style[name] && (ret = style[name]);
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                rsLeft && (rs.left = elem.currentStyle.left);
                style.left = "fontSize" === name ? "1em" : ret;
                ret = style.pixelLeft + "px";
                style.left = left;
                rsLeft && (rs.left = rsLeft);
            }
            return void 0 === ret ? ret : ret + "" || "auto";
        };
    }
    !function() {
        function computeStyleTests() {
            var div, body, container, contents;
            body = document.getElementsByTagName("body")[0];
            if (body && body.style) {
                div = document.createElement("div");
                container = document.createElement("div");
                container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
                body.appendChild(container).appendChild(div);
                div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute";
                pixelPositionVal = boxSizingReliableVal = !1;
                reliableMarginRightVal = !0;
                if (window.getComputedStyle) {
                    pixelPositionVal = "1%" !== (window.getComputedStyle(div, null) || {}).top;
                    boxSizingReliableVal = "4px" === (window.getComputedStyle(div, null) || {
                        width: "4px"
                    }).width;
                    contents = div.appendChild(document.createElement("div"));
                    contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    contents.style.marginRight = contents.style.width = "0";
                    div.style.width = "1px";
                    reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);
                    div.removeChild(contents);
                }
                div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
                contents = div.getElementsByTagName("td");
                contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
                reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight;
                if (reliableHiddenOffsetsVal) {
                    contents[0].style.display = "";
                    contents[1].style.display = "none";
                    reliableHiddenOffsetsVal = 0 === contents[0].offsetHeight;
                }
                body.removeChild(container);
            }
        }
        var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;
        div = document.createElement("div");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        style = a && a.style;
        if (style) {
            style.cssText = "float:left;opacity:.5";
            support.opacity = "0.5" === style.opacity;
            support.cssFloat = !!style.cssFloat;
            div.style.backgroundClip = "content-box";
            div.cloneNode(!0).style.backgroundClip = "";
            support.clearCloneStyle = "content-box" === div.style.backgroundClip;
            support.boxSizing = "" === style.boxSizing || "" === style.MozBoxSizing || "" === style.WebkitBoxSizing;
            jQuery.extend(support, {
                reliableHiddenOffsets: function() {
                    null == reliableHiddenOffsetsVal && computeStyleTests();
                    return reliableHiddenOffsetsVal;
                },
                boxSizingReliable: function() {
                    null == boxSizingReliableVal && computeStyleTests();
                    return boxSizingReliableVal;
                },
                pixelPosition: function() {
                    null == pixelPositionVal && computeStyleTests();
                    return pixelPositionVal;
                },
                reliableMarginRight: function() {
                    null == reliableMarginRightVal && computeStyleTests();
                    return reliableMarginRightVal;
                }
            });
        }
    }();
    jQuery.swap = function(elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) elem.style[name] = old[name];
        return ret;
    };
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"), cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
    }, cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return "" === ret ? "1" : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (elem && 3 !== elem.nodeType && 8 !== elem.nodeType && elem.style) {
                var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
                name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                if (void 0 === value) return hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, !1, extra)) ? ret : style[name];
                type = typeof value;
                if ("string" === type && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number";
                }
                if (null != value && value === value) {
                    "number" !== type || jQuery.cssNumber[origName] || (value += "px");
                    support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background") || (style[name] = "inherit");
                    if (!(hooks && "set" in hooks && void 0 === (value = hooks.set(elem, value, extra)))) try {
                        style[name] = value;
                    } catch (e) {}
                }
            }
        },
        css: function(elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            hooks && "get" in hooks && (val = hooks.get(elem, !0, extra));
            void 0 === val && (val = curCSS(elem, name, styles));
            "normal" === val && name in cssNormalTransform && (val = cssNormalTransform[name]);
            if ("" === extra || extra) {
                num = parseFloat(val);
                return !0 === extra || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) return rdisplayswap.test(jQuery.css(elem, "display")) && 0 === elem.offsetWidth ? jQuery.swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra);
                }) : getWidthOrHeight(elem, name, extra);
            },
            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && "border-box" === jQuery.css(elem, "boxSizing", !1, styles), styles) : 0);
            }
        };
    });
    support.opacity || (jQuery.cssHooks.opacity = {
        get: function(elem, computed) {
            return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
        },
        set: function(elem, value) {
            var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
            style.zoom = 1;
            if ((value >= 1 || "" === value) && "" === jQuery.trim(filter.replace(ralpha, "")) && style.removeAttribute) {
                style.removeAttribute("filter");
                if ("" === value || currentStyle && !currentStyle.filter) return;
            }
            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
        }
    });
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) return jQuery.swap(elem, {
            display: "inline-block"
        }, curCSS, [ elem, "marginRight" ]);
    });
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                for (var i = 0, expanded = {}, parts = "string" == typeof value ? value.split(" ") : [ value ]; i < 4; i++) expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                return expanded;
            }
        };
        rmargin.test(prefix) || (jQuery.cssHooks[prefix + suffix].set = setPositiveNumber);
    });
    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (;i < len; i++) map[name[i]] = jQuery.css(elem, name[i], !1, styles);
                    return map;
                }
                return void 0 !== value ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, !0);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
                isHidden(this) ? jQuery(this).show() : jQuery(this).hide();
            });
        }
    });
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            this.options.duration ? this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : this.pos = eased = percent;
            this.now = (this.end - this.start) * eased + this.start;
            this.options.step && this.options.step.call(this.elem, this.now, this);
            hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this);
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;
                if (null != tween.elem[tween.prop] && (!tween.elem.style || null == tween.elem.style[tween.prop])) return tween.elem[tween.prop];
                result = jQuery.css(tween.elem, tween.prop, "");
                return result && "auto" !== result ? result : 0;
            },
            set: function(tween) {
                jQuery.fx.step[tween.prop] ? jQuery.fx.step[tween.prop](tween) : tween.elem.style && (null != tween.elem.style[jQuery.cssProps[tween.prop]] || jQuery.cssHooks[tween.prop]) ? jQuery.style(tween.elem, tween.prop, tween.now + tween.unit) : tween.elem[tween.prop] = tween.now;
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            tween.elem.nodeType && tween.elem.parentNode && (tween.elem[tween.prop] = tween.now);
        }
    };
    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return .5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [ defaultPrefilter ], tweeners = {
        "*": [ function(prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || "px" !== unit && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start /= scale;
                    jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && 1 !== scale && --maxIterations);
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
            }
            return tween;
        } ]
    };
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = [ "*" ];
            } else props = props.split(" ");
            for (var prop, index = 0, length = props.length; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function(callback, prepend) {
            prepend ? animationPrefilters.unshift(callback) : animationPrefilters.push(callback);
        }
    });
    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" == typeof speed ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : "number" == typeof opt.duration ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        null != opt.queue && !0 !== opt.queue || (opt.queue = "fx");
        opt.old = opt.complete;
        opt.complete = function() {
            jQuery.isFunction(opt.old) && opt.old.call(this);
            opt.queue && jQuery.dequeue(this, opt.queue);
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                (empty || jQuery._data(this, "finish")) && anim.stop(!0);
            };
            doAnimation.finish = doAnimation;
            return empty || !1 === optall.queue ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if ("string" != typeof type) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = void 0;
            }
            clearQueue && !1 !== type && this.queue(type || "fx", []);
            return this.each(function() {
                var dequeue = !0, index = null != type && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) data[index] && data[index].stop && stopQueue(data[index]); else for (index in data) data[index] && data[index].stop && rrun.test(index) && stopQueue(data[index]);
                for (index = timers.length; index--; ) if (timers[index].elem === this && (null == type || timers[index].queue === type)) {
                    timers[index].anim.stop(gotoEnd);
                    dequeue = !1;
                    timers.splice(index, 1);
                }
                !dequeue && gotoEnd || jQuery.dequeue(this, type);
            });
        },
        finish: function(type) {
            !1 !== type && (type = type || "fx");
            return this.each(function() {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = !0;
                jQuery.queue(this, type, []);
                hooks && hooks.stop && hooks.stop.call(this, !0);
                for (index = timers.length; index--; ) if (timers[index].elem === this && timers[index].queue === type) {
                    timers[index].anim.stop(!0);
                    timers.splice(index, 1);
                }
                for (index = 0; index < length; index++) queue[index] && queue[index].finish && queue[index].finish.call(this);
                delete data.finish;
            });
        }
    });
    jQuery.each([ "toggle", "show", "hide" ], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return null == speed || "boolean" == typeof speed ? cssFn.apply(this, arguments) : this.animate(genFx(name, !0), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (;i < timers.length; i++) {
            timer = timers[i];
            timer() || timers[i] !== timer || timers.splice(i--, 1);
        }
        timers.length || jQuery.fx.stop();
        fxNow = void 0;
    };
    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        timer() ? jQuery.fx.start() : jQuery.timers.pop();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        timerId || (timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval));
    };
    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
            var timeout = setTimeout(next, time);
            hooks.stop = function() {
                clearTimeout(timeout);
            };
        });
    };
    !function() {
        var input, div, select, a, opt;
        div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        a = div.getElementsByTagName("a")[0];
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px";
        support.getSetAttribute = "t" !== div.className;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = "/a" === a.getAttribute("href");
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        select.disabled = !0;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = "" === input.getAttribute("value");
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = "t" === input.value;
    }();
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction, elem = this[0];
            if (arguments.length) {
                isFunction = jQuery.isFunction(value);
                return this.each(function(i) {
                    var val;
                    if (1 === this.nodeType) {
                        val = isFunction ? value.call(this, i, jQuery(this).val()) : value;
                        null == val ? val = "" : "number" == typeof val ? val += "" : jQuery.isArray(val) && (val = jQuery.map(val, function(value) {
                            return null == value ? "" : value + "";
                        }));
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        hooks && "set" in hooks && void 0 !== hooks.set(this, val, "value") || (this.value = val);
                    }
                });
            }
            if (elem) {
                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, "value"))) return ret;
                ret = elem.value;
                return "string" == typeof ret ? ret.replace(rreturn, "") : null == ret ? "" : ret;
            }
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return null != val ? val : jQuery.trim(jQuery.text(elem));
                }
            },
            select: {
                get: function(elem) {
                    for (var value, option, options = elem.options, index = elem.selectedIndex, one = "select-one" === elem.type || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : null === option.getAttribute("disabled")) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) return value;
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function(elem, value) {
                    for (var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length; i--; ) {
                        option = options[i];
                        if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) try {
                            option.selected = optionSet = !0;
                        } catch (_) {
                            option.scrollHeight;
                        } else option.selected = !1;
                    }
                    optionSet || (elem.selectedIndex = -1);
                    return options;
                }
            }
        }
    });
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
            }
        };
        support.checkOn || (jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
        });
    });
    var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input;
    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function(elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                if (typeof elem.getAttribute === strundefined) return jQuery.prop(elem, name, value);
                if (1 !== nType || !jQuery.isXMLDoc(elem)) {
                    name = name.toLowerCase();
                    hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
                }
                if (void 0 === value) {
                    if (hooks && "get" in hooks && null !== (ret = hooks.get(elem, name))) return ret;
                    ret = jQuery.find.attr(elem, name);
                    return null == ret ? void 0 : ret;
                }
                if (null !== value) {
                    if (hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name))) return ret;
                    elem.setAttribute(name, value + "");
                    return value;
                }
                jQuery.removeAttr(elem, name);
            }
        },
        removeAttr: function(elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
            if (attrNames && 1 === elem.nodeType) for (;name = attrNames[i++]; ) {
                propName = jQuery.propFix[name] || name;
                jQuery.expr.match.bool.test(name) ? getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem[propName] = !1 : elem[jQuery.camelCase("default-" + name)] = elem[propName] = !1 : jQuery.attr(elem, name, "");
                elem.removeAttribute(getSetAttribute ? name : propName);
            }
        },
        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && "radio" === value && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        val && (elem.value = val);
                        return value;
                    }
                }
            }
        }
    });
    boolHook = {
        set: function(elem, value, name) {
            !1 === value ? jQuery.removeAttr(elem, name) : getSetInput && getSetAttribute || !ruseDefault.test(name) ? elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name) : elem[jQuery.camelCase("default-" + name)] = elem[name] = !0;
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = null != getter(elem, name, isXML) ? name.toLowerCase() : null;
                attrHandle[name] = handle;
            }
            return ret;
        } : function(elem, name, isXML) {
            if (!isXML) return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
        };
    });
    getSetInput && getSetAttribute || (jQuery.attrHooks.value = {
        set: function(elem, value, name) {
            if (!jQuery.nodeName(elem, "input")) return nodeHook && nodeHook.set(elem, value, name);
            elem.defaultValue = value;
        }
    });
    if (!getSetAttribute) {
        nodeHook = {
            set: function(elem, value, name) {
                var ret = elem.getAttributeNode(name);
                ret || elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                ret.value = value += "";
                if ("value" === name || value === elem.getAttribute(name)) return value;
            }
        };
        attrHandle.id = attrHandle.name = attrHandle.coords = function(elem, name, isXML) {
            var ret;
            if (!isXML) return (ret = elem.getAttributeNode(name)) && "" !== ret.value ? ret.value : null;
        };
        jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                if (ret && ret.specified) return ret.value;
            },
            set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function(elem, value, name) {
                nodeHook.set(elem, "" !== value && value, name);
            }
        };
        jQuery.each([ "width", "height" ], function(i, name) {
            jQuery.attrHooks[name] = {
                set: function(elem, value) {
                    if ("" === value) {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            };
        });
    }
    support.style || (jQuery.attrHooks.style = {
        get: function(elem) {
            return elem.style.cssText || void 0;
        },
        set: function(elem, value) {
            return elem.style.cssText = value + "";
        }
    });
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                try {
                    this[name] = void 0;
                    delete this[name];
                } catch (e) {}
            });
        }
    });
    jQuery.extend({
        propFix: {
            for: "htmlFor",
            class: "className"
        },
        prop: function(elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (elem && 3 !== nType && 8 !== nType && 2 !== nType) {
                notxml = 1 !== nType || !jQuery.isXMLDoc(elem);
                if (notxml) {
                    name = jQuery.propFix[name] || name;
                    hooks = jQuery.propHooks[name];
                }
                return void 0 !== value ? hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name)) ? ret : elem[name] = value : hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
            }
        },
        propHooks: {
            tabIndex: {
                get: function(elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
                }
            }
        }
    });
    support.hrefNormalized || jQuery.each([ "href", "src" ], function(i, name) {
        jQuery.propHooks[name] = {
            get: function(elem) {
                return elem.getAttribute(name, 4);
            }
        };
    });
    support.optSelected || (jQuery.propHooks.selected = {
        get: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
                parent.selectedIndex;
                parent.parentNode && parent.parentNode.selectedIndex;
            }
            return null;
        }
    });
    jQuery.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    support.enctype || (jQuery.propFix.enctype = "encoding");
    var rclass = /[\t\r\n\f]/g;
    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).addClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        for (;clazz = classes[j++]; ) cur.indexOf(" " + clazz + " ") < 0 && (cur += clazz + " ");
                        finalValue = jQuery.trim(cur);
                        elem.className !== finalValue && (elem.className = finalValue);
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            var classes, elem, cur, clazz, j, finalValue, i = 0, len = this.length, proceed = 0 === arguments.length || "string" == typeof value && value;
            if (jQuery.isFunction(value)) return this.each(function(j) {
                jQuery(this).removeClass(value.call(this, j, this.className));
            });
            if (proceed) {
                classes = (value || "").match(rnotwhite) || [];
                for (;i < len; i++) {
                    elem = this[i];
                    cur = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        for (;clazz = classes[j++]; ) for (;cur.indexOf(" " + clazz + " ") >= 0; ) cur = cur.replace(" " + clazz + " ", " ");
                        finalValue = value ? jQuery.trim(cur) : "";
                        elem.className !== finalValue && (elem.className = finalValue);
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value;
            return "boolean" == typeof stateVal && "string" === type ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
                jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            }) : this.each(function() {
                if ("string" === type) for (var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || []; className = classNames[i++]; ) self.hasClass(className) ? self.removeClass(className) : self.addClass(className); else if (type === strundefined || "boolean" === type) {
                    this.className && jQuery._data(this, "__className__", this.className);
                    this.className = this.className || !1 === value ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            for (var className = " " + selector + " ", i = 0, l = this.length; i < l; i++) if (1 === this[i].nodeType && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) return !0;
            return !1;
        }
    });
    jQuery.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
    });
    var nonce = jQuery.now(), rquery = /\?/, rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    jQuery.parseJSON = function(data) {
        if (window.JSON && window.JSON.parse) return window.JSON.parse(data + "");
        var requireNonComma, depth = null, str = jQuery.trim(data + "");
        return str && !jQuery.trim(str.replace(rvalidtokens, function(token, comma, open, close) {
            requireNonComma && comma && (depth = 0);
            if (0 === depth) return token;
            requireNonComma = open || comma;
            depth += !close - !open;
            return "";
        })) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
    };
    jQuery.parseXML = function(data) {
        var xml, tmp;
        if (!data || "string" != typeof data) return null;
        try {
            if (window.DOMParser) {
                tmp = new DOMParser();
                xml = tmp.parseFromString(data, "text/xml");
            } else {
                xml = new ActiveXObject("Microsoft.XMLDOM");
                xml.async = "false";
                xml.loadXML(data);
            }
        } catch (e) {
            xml = void 0;
        }
        xml && xml.documentElement && !xml.getElementsByTagName("parsererror").length || jQuery.error("Invalid XML: " + data);
        return xml;
    };
    var ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (2 !== state) {
                    state = 2;
                    timeoutTimer && clearTimeout(timeoutTimer);
                    transport = void 0;
                    responseHeadersString = headers || "";
                    jqXHR.readyState = status > 0 ? 4 : 0;
                    isSuccess = status >= 200 && status < 300 || 304 === status;
                    responses && (response = ajaxHandleResponses(s, jqXHR, responses));
                    response = ajaxConvert(s, response, jqXHR, isSuccess);
                    if (isSuccess) {
                        if (s.ifModified) {
                            modified = jqXHR.getResponseHeader("Last-Modified");
                            modified && (jQuery.lastModified[cacheURL] = modified);
                            modified = jqXHR.getResponseHeader("etag");
                            modified && (jQuery.etag[cacheURL] = modified);
                        }
                        if (204 === status || "HEAD" === s.type) statusText = "nocontent"; else if (304 === status) statusText = "notmodified"; else {
                            statusText = response.state;
                            success = response.data;
                            error = response.error;
                            isSuccess = !error;
                        }
                    } else {
                        error = statusText;
                        if (status || !statusText) {
                            statusText = "error";
                            status < 0 && (status = 0);
                        }
                    }
                    jqXHR.status = status;
                    jqXHR.statusText = (nativeStatusText || statusText) + "";
                    isSuccess ? deferred.resolveWith(callbackContext, [ success, statusText, jqXHR ]) : deferred.rejectWith(callbackContext, [ jqXHR, statusText, error ]);
                    jqXHR.statusCode(statusCode);
                    statusCode = void 0;
                    fireGlobals && globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [ jqXHR, s, isSuccess ? success : error ]);
                    completeDeferred.fireWith(callbackContext, [ jqXHR, statusText ]);
                    if (fireGlobals) {
                        globalEventContext.trigger("ajaxComplete", [ jqXHR, s ]);
                        --jQuery.active || jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            if ("object" == typeof url) {
                options = url;
                url = void 0;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                    var match;
                    if (2 === state) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            for (;match = rheaders.exec(responseHeadersString); ) responseHeaders[match[1].toLowerCase()] = match[2];
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return null == match ? null : match;
                },
                getAllResponseHeaders: function() {
                    return 2 === state ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value;
                    }
                    return this;
                },
                overrideMimeType: function(type) {
                    state || (s.mimeType = type);
                    return this;
                },
                statusCode: function(map) {
                    var code;
                    if (map) if (state < 2) for (code in map) statusCode[code] = [ statusCode[code], map[code] ]; else jqXHR.always(map[jqXHR.status]);
                    return this;
                },
                abort: function(statusText) {
                    var finalText = statusText || strAbort;
                    transport && transport.abort(finalText);
                    done(0, finalText);
                    return this;
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [ "" ];
            if (null == s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !(!parts || parts[1] === ajaxLocParts[1] && parts[2] === ajaxLocParts[2] && (parts[3] || ("http:" === parts[1] ? "80" : "443")) === (ajaxLocParts[3] || ("http:" === ajaxLocParts[1] ? "80" : "443")));
            }
            s.data && s.processData && "string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional));
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (2 === state) return jqXHR;
            fireGlobals = jQuery.event && s.global;
            fireGlobals && 0 == jQuery.active++ && jQuery.event.trigger("ajaxStart");
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                    delete s.data;
                }
                !1 === s.cache && (s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++);
            }
            if (s.ifModified) {
                jQuery.lastModified[cacheURL] && jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                jQuery.etag[cacheURL] && jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
            (s.data && s.hasContent && !1 !== s.contentType || options.contentType) && jqXHR.setRequestHeader("Content-Type", s.contentType);
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) jqXHR.setRequestHeader(i, s.headers[i]);
            if (s.beforeSend && (!1 === s.beforeSend.call(callbackContext, jqXHR, s) || 2 === state)) return jqXHR.abort();
            strAbort = "abort";
            for (i in {
                success: 1,
                error: 1,
                complete: 1
            }) jqXHR[i](s[i]);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (transport) {
                jqXHR.readyState = 1;
                fireGlobals && globalEventContext.trigger("ajaxSend", [ jqXHR, s ]);
                s.async && s.timeout > 0 && (timeoutTimer = setTimeout(function() {
                    jqXHR.abort("timeout");
                }, s.timeout));
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (!(state < 2)) throw e;
                    done(-1, e);
                }
            } else done(-1, "No Transport");
            return jqXHR;
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
            return jQuery.get(url, void 0, callback, "script");
        }
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = void 0;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            throws: !0
        });
    };
    jQuery.fn.extend({
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) return this.each(function(i) {
                jQuery(this).wrapAll(html.call(this, i));
            });
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && wrap.insertBefore(this[0]);
                wrap.map(function() {
                    for (var elem = this; elem.firstChild && 1 === elem.firstChild.nodeType; ) elem = elem.firstChild;
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            return jQuery.isFunction(html) ? this.each(function(i) {
                jQuery(this).wrapInner(html.call(this, i));
            }) : this.each(function() {
                var self = jQuery(this), contents = self.contents();
                contents.length ? contents.wrapAll(html) : self.append(html);
            });
        },
        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                jQuery.nodeName(this, "body") || jQuery(this).replaceWith(this.childNodes);
            }).end();
        }
    });
    jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && "none" === (elem.style && elem.style.display || jQuery.css(elem, "display"));
    };
    jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
    };
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, value) {
            value = jQuery.isFunction(value) ? value() : null == value ? "" : value;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
        };
        void 0 === traditional && (traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional);
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) jQuery.each(a, function() {
            add(this.name, this.value);
        }); else for (prefix in a) buildParams(prefix, a[prefix], traditional, add);
        return s.join("&").replace(r20, "+");
    };
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function() {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return null == val ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.ajaxSettings.xhr = void 0 !== window.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr();
    window.attachEvent && window.attachEvent("onunload", function() {
        for (var key in xhrCallbacks) xhrCallbacks[key](void 0, !0);
    });
    support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
    xhrSupported = support.ajax = !!xhrSupported;
    xhrSupported && jQuery.ajaxTransport(function(options) {
        if (!options.crossDomain || support.cors) {
            var callback;
            return {
                send: function(headers, complete) {
                    var i, xhr = options.xhr(), id = ++xhrId;
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) for (i in options.xhrFields) xhr[i] = options.xhrFields[i];
                    options.mimeType && xhr.overrideMimeType && xhr.overrideMimeType(options.mimeType);
                    options.crossDomain || headers["X-Requested-With"] || (headers["X-Requested-With"] = "XMLHttpRequest");
                    for (i in headers) void 0 !== headers[i] && xhr.setRequestHeader(i, headers[i] + "");
                    xhr.send(options.hasContent && options.data || null);
                    callback = function(_, isAbort) {
                        var status, statusText, responses;
                        if (callback && (isAbort || 4 === xhr.readyState)) {
                            delete xhrCallbacks[id];
                            callback = void 0;
                            xhr.onreadystatechange = jQuery.noop;
                            if (isAbort) 4 !== xhr.readyState && xhr.abort(); else {
                                responses = {};
                                status = xhr.status;
                                "string" == typeof xhr.responseText && (responses.text = xhr.responseText);
                                try {
                                    statusText = xhr.statusText;
                                } catch (e) {
                                    statusText = "";
                                }
                                status || !options.isLocal || options.crossDomain ? 1223 === status && (status = 204) : status = responses.text ? 200 : 404;
                            }
                        }
                        responses && complete(status, statusText, responses, xhr.getAllResponseHeaders());
                    };
                    options.async ? 4 === xhr.readyState ? setTimeout(callback) : xhr.onreadystatechange = xhrCallbacks[id] = callback : callback();
                },
                abort: function() {
                    callback && callback(void 0, !0);
                }
            };
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        void 0 === s.cache && (s.cache = !1);
        if (s.crossDomain) {
            s.type = "GET";
            s.global = !1;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = !0;
                    s.scriptCharset && (script.charset = s.scriptCharset);
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            script.parentNode && script.parentNode.removeChild(script);
                            script = null;
                            isAbort || callback(200, "success");
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    script && script.onload(void 0, !0);
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
            this[callback] = !0;
            return callback;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = !1 !== s.jsonp && (rjsonp.test(s.url) ? "url" : "string" == typeof s.data && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            jsonProp ? s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName) : !1 !== s.jsonp && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName);
            s.converters["script json"] = function() {
                responseContainer || jQuery.error(callbackName + " was not called");
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };
            jqXHR.always(function() {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                responseContainer && jQuery.isFunction(overwritten) && overwritten(responseContainer[0]);
                responseContainer = overwritten = void 0;
            });
            return "script";
        }
    });
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || "string" != typeof data) return null;
        if ("boolean" == typeof context) {
            keepScripts = context;
            context = !1;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
        if (parsed) return [ context.createElement(parsed[1]) ];
        parsed = jQuery.buildFragment([ data ], context, scripts);
        scripts && scripts.length && jQuery(scripts).remove();
        return jQuery.merge([], parsed.childNodes);
    };
    var _load = jQuery.fn.load;
    jQuery.fn.load = function(url, params, callback) {
        if ("string" != typeof url && _load) return _load.apply(this, arguments);
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = jQuery.trim(url.slice(off, url.length));
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = void 0;
        } else params && "object" == typeof params && (type = "POST");
        self.length > 0 && jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
        }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [ jqXHR.responseText, status, jqXHR ]);
        });
        return this;
    };
    jQuery.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };
    var docElem = window.document.documentElement;
    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
            "static" === position && (elem.style.position = "relative");
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = ("absolute" === position || "fixed" === position) && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            jQuery.isFunction(options) && (options = options.call(elem, i, curOffset));
            null != options.top && (props.top = options.top - curOffset.top + curTop);
            null != options.left && (props.left = options.left - curOffset.left + curLeft);
            "using" in options ? options.using.call(elem, props) : curElem.css(props);
        }
    };
    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) return void 0 === options ? this : this.each(function(i) {
                jQuery.offset.setOffset(this, options, i);
            });
            var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
            if (doc) {
                docElem = doc.documentElement;
                if (!jQuery.contains(docElem, elem)) return box;
                typeof elem.getBoundingClientRect !== strundefined && (box = elem.getBoundingClientRect());
                win = getWindow(doc);
                return {
                    top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
                    left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
                };
            }
        },
        position: function() {
            if (this[0]) {
                var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                }, elem = this[0];
                if ("fixed" === jQuery.css(elem, "position")) offset = elem.getBoundingClientRect(); else {
                    offsetParent = this.offsetParent();
                    offset = this.offset();
                    jQuery.nodeName(offsetParent[0], "html") || (parentOffset = offsetParent.offset());
                    parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", !0);
                    parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", !0);
                }
                return {
                    top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", !0),
                    left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var offsetParent = this.offsetParent || docElem; offsetParent && !jQuery.nodeName(offsetParent, "html") && "static" === jQuery.css(offsetParent, "position"); ) offsetParent = offsetParent.offsetParent;
                return offsetParent || docElem;
            });
        }
    });
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);
                if (void 0 === val) return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                win ? win.scrollTo(top ? jQuery(win).scrollLeft() : val, top ? val : jQuery(win).scrollTop()) : elem[method] = val;
            }, method, val, arguments.length, null);
        };
    });
    jQuery.each([ "top", "left" ], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
        });
    });
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin), extra = defaultExtra || (!0 === margin || !0 === value ? "margin" : "border");
                return access(this, function(elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) return elem.document.documentElement["client" + name];
                    if (9 === elem.nodeType) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
                    }
                    return void 0 === value ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : void 0, chainable, null);
            };
        });
    });
    jQuery.fn.size = function() {
        return this.length;
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    "function" == typeof define && define.amd && define("jquery", [], function() {
        return jQuery;
    });
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function(deep) {
        window.$ === jQuery && (window.$ = _$);
        deep && window.jQuery === jQuery && (window.jQuery = _jQuery);
        return jQuery;
    };
    typeof noGlobal === strundefined && (window.jQuery = window.$ = jQuery);
    return jQuery;
});

!function(window, document, undefined) {
    "use strict";
    function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        return function() {
            var paramPrefix, i, templateArgs = arguments, code = templateArgs[0], message = "[" + (module ? module + ":" : "") + code + "] ", template = templateArgs[1];
            message += template.replace(/\{\d+\}/g, function(match) {
                var index = +match.slice(1, -1), shiftedIndex = index + 2;
                return shiftedIndex < templateArgs.length ? toDebugString(templateArgs[shiftedIndex]) : match;
            });
            message += "\nhttp://errors.angularjs.org/1.4.9/" + (module ? module + "/" : "") + code;
            for (i = 2, paramPrefix = "?"; i < templateArgs.length; i++, paramPrefix = "&") message += paramPrefix + "p" + (i - 2) + "=" + encodeURIComponent(toDebugString(templateArgs[i]));
            return new ErrorConstructor(message);
        };
    }
    function isArrayLike(obj) {
        if (null == obj || isWindow(obj)) return !1;
        if (isArray(obj) || isString(obj) || jqLite && obj instanceof jqLite) return !0;
        var length = "length" in Object(obj) && obj.length;
        return isNumber(length) && (length >= 0 && (length - 1 in obj || obj instanceof Array) || "function" == typeof obj.item);
    }
    function forEach(obj, iterator, context) {
        var key, length;
        if (obj) if (isFunction(obj)) for (key in obj) "prototype" == key || "length" == key || "name" == key || obj.hasOwnProperty && !obj.hasOwnProperty(key) || iterator.call(context, obj[key], key, obj); else if (isArray(obj) || isArrayLike(obj)) {
            var isPrimitive = "object" != typeof obj;
            for (key = 0, length = obj.length; key < length; key++) (isPrimitive || key in obj) && iterator.call(context, obj[key], key, obj);
        } else if (obj.forEach && obj.forEach !== forEach) obj.forEach(iterator, context, obj); else if (isBlankObject(obj)) for (key in obj) iterator.call(context, obj[key], key, obj); else if ("function" == typeof obj.hasOwnProperty) for (key in obj) obj.hasOwnProperty(key) && iterator.call(context, obj[key], key, obj); else for (key in obj) hasOwnProperty.call(obj, key) && iterator.call(context, obj[key], key, obj);
        return obj;
    }
    function forEachSorted(obj, iterator, context) {
        for (var keys = Object.keys(obj).sort(), i = 0; i < keys.length; i++) iterator.call(context, obj[keys[i]], keys[i]);
        return keys;
    }
    function reverseParams(iteratorFn) {
        return function(value, key) {
            iteratorFn(key, value);
        };
    }
    function nextUid() {
        return ++uid;
    }
    function setHashKey(obj, h) {
        h ? obj.$$hashKey = h : delete obj.$$hashKey;
    }
    function baseExtend(dst, objs, deep) {
        for (var h = dst.$$hashKey, i = 0, ii = objs.length; i < ii; ++i) {
            var obj = objs[i];
            if (isObject(obj) || isFunction(obj)) for (var keys = Object.keys(obj), j = 0, jj = keys.length; j < jj; j++) {
                var key = keys[j], src = obj[key];
                if (deep && isObject(src)) if (isDate(src)) dst[key] = new Date(src.valueOf()); else if (isRegExp(src)) dst[key] = new RegExp(src); else if (src.nodeName) dst[key] = src.cloneNode(!0); else if (isElement(src)) dst[key] = src.clone(); else {
                    isObject(dst[key]) || (dst[key] = isArray(src) ? [] : {});
                    baseExtend(dst[key], [ src ], !0);
                } else dst[key] = src;
            }
        }
        setHashKey(dst, h);
        return dst;
    }
    function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), !1);
    }
    function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), !0);
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
    }
    function noop() {}
    function identity($) {
        return $;
    }
    function valueFn(value) {
        return function() {
            return value;
        };
    }
    function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== toString;
    }
    function isUndefined(value) {
        return void 0 === value;
    }
    function isDefined(value) {
        return void 0 !== value;
    }
    function isObject(value) {
        return null !== value && "object" == typeof value;
    }
    function isBlankObject(value) {
        return null !== value && "object" == typeof value && !getPrototypeOf(value);
    }
    function isString(value) {
        return "string" == typeof value;
    }
    function isNumber(value) {
        return "number" == typeof value;
    }
    function isDate(value) {
        return "[object Date]" === toString.call(value);
    }
    function isFunction(value) {
        return "function" == typeof value;
    }
    function isRegExp(value) {
        return "[object RegExp]" === toString.call(value);
    }
    function isWindow(obj) {
        return obj && obj.window === obj;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isFile(obj) {
        return "[object File]" === toString.call(obj);
    }
    function isFormData(obj) {
        return "[object FormData]" === toString.call(obj);
    }
    function isBlob(obj) {
        return "[object Blob]" === toString.call(obj);
    }
    function isBoolean(value) {
        return "boolean" == typeof value;
    }
    function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
    }
    function isTypedArray(value) {
        return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
    }
    function isElement(node) {
        return !(!node || !(node.nodeName || node.prop && node.attr && node.find));
    }
    function makeMap(str) {
        var i, obj = {}, items = str.split(",");
        for (i = 0; i < items.length; i++) obj[items[i]] = !0;
        return obj;
    }
    function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
    }
    function arrayRemove(array, value) {
        var index = array.indexOf(value);
        index >= 0 && array.splice(index, 1);
        return index;
    }
    function copy(source, destination) {
        function copyRecurse(source, destination) {
            var key, h = destination.$$hashKey;
            if (isArray(source)) for (var i = 0, ii = source.length; i < ii; i++) destination.push(copyElement(source[i])); else if (isBlankObject(source)) for (key in source) destination[key] = copyElement(source[key]); else if (source && "function" == typeof source.hasOwnProperty) for (key in source) source.hasOwnProperty(key) && (destination[key] = copyElement(source[key])); else for (key in source) hasOwnProperty.call(source, key) && (destination[key] = copyElement(source[key]));
            setHashKey(destination, h);
            return destination;
        }
        function copyElement(source) {
            if (!isObject(source)) return source;
            var index = stackSource.indexOf(source);
            if (-1 !== index) return stackDest[index];
            if (isWindow(source) || isScope(source)) throw ngMinErr("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
            var destination, needsRecurse = !1;
            if (isArray(source)) {
                destination = [];
                needsRecurse = !0;
            } else if (isTypedArray(source)) destination = new source.constructor(source); else if (isDate(source)) destination = new Date(source.getTime()); else if (isRegExp(source)) {
                destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
                destination.lastIndex = source.lastIndex;
            } else if (isFunction(source.cloneNode)) destination = source.cloneNode(!0); else {
                destination = Object.create(getPrototypeOf(source));
                needsRecurse = !0;
            }
            stackSource.push(source);
            stackDest.push(destination);
            return needsRecurse ? copyRecurse(source, destination) : destination;
        }
        var stackSource = [], stackDest = [];
        if (destination) {
            if (isTypedArray(destination)) throw ngMinErr("cpta", "Can't copy! TypedArray destination cannot be mutated.");
            if (source === destination) throw ngMinErr("cpi", "Can't copy! Source and destination are identical.");
            isArray(destination) ? destination.length = 0 : forEach(destination, function(value, key) {
                "$$hashKey" !== key && delete destination[key];
            });
            stackSource.push(source);
            stackDest.push(destination);
            return copyRecurse(source, destination);
        }
        return copyElement(source);
    }
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) dst[i] = src[i];
        } else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        }
        return dst || src;
    }
    function equals(o1, o2) {
        if (o1 === o2) return !0;
        if (null === o1 || null === o2) return !1;
        if (o1 !== o1 && o2 !== o2) return !0;
        var length, key, keySet, t1 = typeof o1, t2 = typeof o2;
        if (t1 == t2 && "object" == t1) {
            if (!isArray(o1)) {
                if (isDate(o1)) return !!isDate(o2) && equals(o1.getTime(), o2.getTime());
                if (isRegExp(o1)) return !!isRegExp(o2) && o1.toString() == o2.toString();
                if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2)) return !1;
                keySet = createMap();
                for (key in o1) if ("$" !== key.charAt(0) && !isFunction(o1[key])) {
                    if (!equals(o1[key], o2[key])) return !1;
                    keySet[key] = !0;
                }
                for (key in o2) if (!(key in keySet) && "$" !== key.charAt(0) && isDefined(o2[key]) && !isFunction(o2[key])) return !1;
                return !0;
            }
            if (!isArray(o2)) return !1;
            if ((length = o1.length) == o2.length) {
                for (key = 0; key < length; key++) if (!equals(o1[key], o2[key])) return !1;
                return !0;
            }
        }
        return !1;
    }
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        return !isFunction(fn) || fn instanceof RegExp ? fn : curryArgs.length ? function() {
            return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
        } : function() {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self);
        };
    }
    function toJsonReplacer(key, value) {
        var val = value;
        "string" == typeof key && "$" === key.charAt(0) && "$" === key.charAt(1) ? val = undefined : isWindow(value) ? val = "$WINDOW" : value && document === value ? val = "$DOCUMENT" : isScope(value) && (val = "$SCOPE");
        return val;
    }
    function toJson(obj, pretty) {
        if (void 0 === obj) return undefined;
        isNumber(pretty) || (pretty = pretty ? 2 : null);
        return JSON.stringify(obj, toJsonReplacer, pretty);
    }
    function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
    }
    function timezoneToOffset(timezone, fallback) {
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        return addDateMinutes(date, reverse * (timezoneToOffset(timezone, date.getTimezoneOffset()) - date.getTimezoneOffset()));
    }
    function startingTag(element) {
        element = jqLite(element).clone();
        try {
            element.empty();
        } catch (e) {}
        var elemHtml = jqLite("<div>").append(element).html();
        try {
            return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(match, nodeName) {
                return "<" + lowercase(nodeName);
            });
        } catch (e) {
            return lowercase(elemHtml);
        }
    }
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        } catch (e) {}
    }
    function parseKeyValue(keyValue) {
        var obj = {};
        forEach((keyValue || "").split("&"), function(keyValue) {
            var splitPoint, key, val;
            if (keyValue) {
                key = keyValue = keyValue.replace(/\+/g, "%20");
                splitPoint = keyValue.indexOf("=");
                if (-1 !== splitPoint) {
                    key = keyValue.substring(0, splitPoint);
                    val = keyValue.substring(splitPoint + 1);
                }
                key = tryDecodeURIComponent(key);
                if (isDefined(key)) {
                    val = !isDefined(val) || tryDecodeURIComponent(val);
                    hasOwnProperty.call(obj, key) ? isArray(obj[key]) ? obj[key].push(val) : obj[key] = [ obj[key], val ] : obj[key] = val;
                }
            }
        });
        return obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function(value, key) {
            isArray(value) ? forEach(value, function(arrayValue) {
                parts.push(encodeUriQuery(key, !0) + (!0 === arrayValue ? "" : "=" + encodeUriQuery(arrayValue, !0)));
            }) : parts.push(encodeUriQuery(key, !0) + (!0 === value ? "" : "=" + encodeUriQuery(value, !0)));
        });
        return parts.length ? parts.join("&") : "";
    }
    function encodeUriSegment(val) {
        return encodeUriQuery(val, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
    }
    function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
            attr = ngAttrPrefixes[i] + ngAttr;
            if (isString(attr = element.getAttribute(attr))) return attr;
        }
        return null;
    }
    function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
                appElement = element;
                module = element.getAttribute(name);
            }
        });
        forEach(ngAttrPrefixes, function(prefix) {
            var candidate, name = prefix + "app";
            if (!appElement && (candidate = element.querySelector("[" + name.replace(":", "\\:") + "]"))) {
                appElement = candidate;
                module = candidate.getAttribute(name);
            }
        });
        if (appElement) {
            config.strictDi = null !== getNgAttribute(appElement, "strict-di");
            bootstrap(appElement, module ? [ module ] : [], config);
        }
    }
    function bootstrap(element, modules, config) {
        isObject(config) || (config = {});
        config = extend({
            strictDi: !1
        }, config);
        var doBootstrap = function() {
            element = jqLite(element);
            if (element.injector()) {
                var tag = element[0] === document ? "document" : startingTag(element);
                throw ngMinErr("btstrpd", "App Already Bootstrapped with this Element '{0}'", tag.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            modules = modules || [];
            modules.unshift([ "$provide", function($provide) {
                $provide.value("$rootElement", element);
            } ]);
            config.debugInfoEnabled && modules.push([ "$compileProvider", function($compileProvider) {
                $compileProvider.debugInfoEnabled(!0);
            } ]);
            modules.unshift("ng");
            var injector = createInjector(modules, config.strictDi);
            injector.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function(scope, element, compile, injector) {
                scope.$apply(function() {
                    element.data("$injector", injector);
                    compile(element)(scope);
                });
            } ]);
            return injector;
        }, NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/, NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
            config.debugInfoEnabled = !0;
            window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, "");
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) return doBootstrap();
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, "");
        angular.resumeBootstrap = function(extraModules) {
            forEach(extraModules, function(module) {
                modules.push(module);
            });
            return doBootstrap();
        };
        isFunction(angular.resumeDeferredBootstrap) && angular.resumeDeferredBootstrap();
    }
    function reloadWithDebugInfo() {
        window.name = "NG_ENABLE_DEBUG_INFO!" + window.name;
        window.location.reload();
    }
    function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) throw ngMinErr("test", "no injector found for element argument to getTestability");
        return injector.get("$$testability");
    }
    function snake_case(name, separator) {
        separator = separator || "_";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    function assertArg(arg, name, reason) {
        if (!arg) throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        acceptArrayAnnotation && isArray(arg) && (arg = arg[arg.length - 1]);
        assertArg(isFunction(arg), name, "not a function, got " + (arg && "object" == typeof arg ? arg.constructor.name || "Object" : typeof arg));
        return arg;
    }
    function assertNotHasOwnProperty(name, context) {
        if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
    }
    function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        for (var key, keys = path.split("."), lastInstance = obj, len = keys.length, i = 0; i < len; i++) {
            key = keys[i];
            obj && (obj = (lastInstance = obj)[key]);
        }
        return !bindFnToScope && isFunction(obj) ? bind(lastInstance, obj) : obj;
    }
    function getBlockNodes(nodes) {
        for (var blockNodes, node = nodes[0], endNode = nodes[nodes.length - 1], i = 1; node !== endNode && (node = node.nextSibling); i++) if (blockNodes || nodes[i] !== node) {
            blockNodes || (blockNodes = jqLite(slice.call(nodes, 0, i)));
            blockNodes.push(node);
        }
        return blockNodes || nodes;
    }
    function createMap() {
        return Object.create(null);
    }
    function setupModuleLoader(window) {
        function ensure(obj, name, factory) {
            return obj[name] || (obj[name] = factory());
        }
        var $injectorMinErr = minErr("$injector"), ngMinErr = minErr("ng"), angular = ensure(window, "angular", Object);
        angular.$$minErr = angular.$$minErr || minErr;
        return ensure(angular, "module", function() {
            var modules = {};
            return function(name, requires, configFn) {
                !function(name, context) {
                    if ("hasOwnProperty" === name) throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
                }(name, "module");
                requires && modules.hasOwnProperty(name) && (modules[name] = null);
                return ensure(modules, name, function() {
                    function invokeLater(provider, method, insertMethod, queue) {
                        queue || (queue = invokeQueue);
                        return function() {
                            queue[insertMethod || "push"]([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                    function invokeLaterAndSetModuleName(provider, method) {
                        return function(recipeName, factoryFunction) {
                            factoryFunction && isFunction(factoryFunction) && (factoryFunction.$$moduleName = name);
                            invokeQueue.push([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                    if (!requires) throw $injectorMinErr("nomod", "Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.", name);
                    var invokeQueue = [], configBlocks = [], runBlocks = [], config = invokeLater("$injector", "invoke", "push", configBlocks), moduleInstance = {
                        _invokeQueue: invokeQueue,
                        _configBlocks: configBlocks,
                        _runBlocks: runBlocks,
                        requires: requires,
                        name: name,
                        provider: invokeLaterAndSetModuleName("$provide", "provider"),
                        factory: invokeLaterAndSetModuleName("$provide", "factory"),
                        service: invokeLaterAndSetModuleName("$provide", "service"),
                        value: invokeLater("$provide", "value"),
                        constant: invokeLater("$provide", "constant", "unshift"),
                        decorator: invokeLaterAndSetModuleName("$provide", "decorator"),
                        animation: invokeLaterAndSetModuleName("$animateProvider", "register"),
                        filter: invokeLaterAndSetModuleName("$filterProvider", "register"),
                        controller: invokeLaterAndSetModuleName("$controllerProvider", "register"),
                        directive: invokeLaterAndSetModuleName("$compileProvider", "directive"),
                        config: config,
                        run: function(block) {
                            runBlocks.push(block);
                            return this;
                        }
                    };
                    configFn && config(configFn);
                    return moduleInstance;
                });
            };
        });
    }
    function serializeObject(obj) {
        var seen = [];
        return JSON.stringify(obj, function(key, val) {
            val = toJsonReplacer(key, val);
            if (isObject(val)) {
                if (seen.indexOf(val) >= 0) return "...";
                seen.push(val);
            }
            return val;
        });
    }
    function toDebugString(obj) {
        return "function" == typeof obj ? obj.toString().replace(/ \{[\s\S]*$/, "") : isUndefined(obj) ? "undefined" : "string" != typeof obj ? serializeObject(obj) : obj;
    }
    function jqNextId() {
        return ++jqId;
    }
    function camelCase(name) {
        return name.replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
            return offset ? letter.toUpperCase() : letter;
        }).replace(MOZ_HACK_REGEXP, "Moz$1");
    }
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteAcceptsData(node) {
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
    }
    function jqLiteHasData(node) {
        for (var key in jqCache[node.ng339]) return !0;
        return !1;
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, i, fragment = context.createDocumentFragment(), nodes = [];
        if (jqLiteIsTextNode(html)) nodes.push(context.createTextNode(html)); else {
            tmp = tmp || fragment.appendChild(context.createElement("div"));
            tag = (TAG_NAME_REGEXP.exec(html) || [ "", "" ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
            i = wrap[0];
            for (;i--; ) tmp = tmp.lastChild;
            nodes = concat(nodes, tmp.childNodes);
            tmp = fragment.firstChild;
            tmp.textContent = "";
        }
        fragment.textContent = "";
        fragment.innerHTML = "";
        forEach(nodes, function(node) {
            fragment.appendChild(node);
        });
        return fragment;
    }
    function jqLiteParseHTML(html, context) {
        context = context || document;
        var parsed;
        return (parsed = SINGLE_TAG_REGEXP.exec(html)) ? [ context.createElement(parsed[1]) ] : (parsed = jqLiteBuildFragment(html, context)) ? parsed.childNodes : [];
    }
    function JQLite(element) {
        if (element instanceof JQLite) return element;
        var argIsString;
        if (isString(element)) {
            element = trim(element);
            argIsString = !0;
        }
        if (!(this instanceof JQLite)) {
            if (argIsString && "<" != element.charAt(0)) throw jqLiteMinErr("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            return new JQLite(element);
        }
        argIsString ? jqLiteAddNodes(this, jqLiteParseHTML(element)) : jqLiteAddNodes(this, element);
    }
    function jqLiteClone(element) {
        return element.cloneNode(!0);
    }
    function jqLiteDealoc(element, onlyDescendants) {
        onlyDescendants || jqLiteRemoveData(element);
        if (element.querySelectorAll) for (var descendants = element.querySelectorAll("*"), i = 0, l = descendants.length; i < l; i++) jqLiteRemoveData(descendants[i]);
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr("offargs", "jqLite#off() does not support the `selector` argument");
        var expandoStore = jqLiteExpandoStore(element), events = expandoStore && expandoStore.events, handle = expandoStore && expandoStore.handle;
        if (handle) if (type) {
            var removeHandler = function(type) {
                var listenerFns = events[type];
                isDefined(fn) && arrayRemove(listenerFns || [], fn);
                if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
                    removeEventListenerFn(element, type, handle);
                    delete events[type];
                }
            };
            forEach(type.split(" "), function(type) {
                removeHandler(type);
                MOUSE_EVENT_MAP[type] && removeHandler(MOUSE_EVENT_MAP[type]);
            });
        } else for (type in events) {
            "$destroy" !== type && removeEventListenerFn(element, type, handle);
            delete events[type];
        }
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
            if (name) {
                delete expandoStore.data[name];
                return;
            }
            if (expandoStore.handle) {
                expandoStore.events.$destroy && expandoStore.handle({}, "$destroy");
                jqLiteOff(element);
            }
            delete jqCache[expandoId];
            element.ng339 = undefined;
        }
    }
    function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
            element.ng339 = expandoId = jqNextId();
            expandoStore = jqCache[expandoId] = {
                events: {},
                data: {},
                handle: undefined
            };
        }
        return expandoStore;
    }
    function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
            var isSimpleSetter = isDefined(value), isSimpleGetter = !isSimpleSetter && key && !isObject(key), massGetter = !key, expandoStore = jqLiteExpandoStore(element, !isSimpleGetter), data = expandoStore && expandoStore.data;
            if (isSimpleSetter) data[key] = value; else {
                if (massGetter) return data;
                if (isSimpleGetter) return data && data[key];
                extend(data, key);
            }
        }
    }
    function jqLiteHasClass(element, selector) {
        return !!element.getAttribute && (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ") > -1;
    }
    function jqLiteRemoveClass(element, cssClasses) {
        cssClasses && element.setAttribute && forEach(cssClasses.split(" "), function(cssClass) {
            element.setAttribute("class", trim((" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + trim(cssClass) + " ", " ")));
        });
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                -1 === existingClasses.indexOf(" " + cssClass + " ") && (existingClasses += cssClass + " ");
            });
            element.setAttribute("class", trim(existingClasses));
        }
    }
    function jqLiteAddNodes(root, elements) {
        if (elements) if (elements.nodeType) root[root.length++] = elements; else {
            var length = elements.length;
            if ("number" == typeof length && elements.window !== elements) {
                if (length) for (var i = 0; i < length; i++) root[root.length++] = elements[i];
            } else root[root.length++] = elements;
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, "$" + (name || "ngController") + "Controller");
    }
    function jqLiteInheritedData(element, name, value) {
        element.nodeType == NODE_TYPE_DOCUMENT && (element = element.documentElement);
        for (var names = isArray(name) ? name : [ name ]; element; ) {
            for (var i = 0, ii = names.length; i < ii; i++) if (isDefined(value = jqLite.data(element, names[i]))) return value;
            element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
    }
    function jqLiteEmpty(element) {
        jqLiteDealoc(element, !0);
        for (;element.firstChild; ) element.removeChild(element.firstChild);
    }
    function jqLiteRemove(element, keepData) {
        keepData || jqLiteDealoc(element);
        var parent = element.parentNode;
        parent && parent.removeChild(element);
    }
    function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        "complete" === win.document.readyState ? win.setTimeout(action) : jqLite(win).on("load", action);
    }
    function getBooleanAttrName(element, name) {
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
    }
    function getAliasedAttrName(name) {
        return ALIASED_ATTR[name];
    }
    function createEventHandler(element, events) {
        var eventHandler = function(event, type) {
            event.isDefaultPrevented = function() {
                return event.defaultPrevented;
            };
            var eventFns = events[type || event.type], eventFnsLength = eventFns ? eventFns.length : 0;
            if (eventFnsLength) {
                if (isUndefined(event.immediatePropagationStopped)) {
                    var originalStopImmediatePropagation = event.stopImmediatePropagation;
                    event.stopImmediatePropagation = function() {
                        event.immediatePropagationStopped = !0;
                        event.stopPropagation && event.stopPropagation();
                        originalStopImmediatePropagation && originalStopImmediatePropagation.call(event);
                    };
                }
                event.isImmediatePropagationStopped = function() {
                    return !0 === event.immediatePropagationStopped;
                };
                var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
                eventFnsLength > 1 && (eventFns = shallowCopy(eventFns));
                for (var i = 0; i < eventFnsLength; i++) event.isImmediatePropagationStopped() || handlerWrapper(element, event, eventFns[i]);
            }
        };
        eventHandler.elem = element;
        return eventHandler;
    }
    function defaultHandlerWrapper(element, event, handler) {
        handler.call(element, event);
    }
    function specialMouseHandlerWrapper(target, event, handler) {
        var related = event.relatedTarget;
        related && (related === target || jqLiteContains.call(target, related)) || handler.call(target, event);
    }
    function $$jqLiteProvider() {
        this.$get = function() {
            return extend(JQLite, {
                hasClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteHasClass(node, classes);
                },
                addClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteAddClass(node, classes);
                },
                removeClass: function(node, classes) {
                    node.attr && (node = node[0]);
                    return jqLiteRemoveClass(node, classes);
                }
            });
        };
    }
    function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
            "function" == typeof key && (key = obj.$$hashKey());
            return key;
        }
        var objType = typeof obj;
        key = "function" == objType || "object" == objType && null !== obj ? obj.$$hashKey = objType + ":" + (nextUidFn || nextUid)() : objType + ":" + obj;
        return key;
    }
    function HashMap(array, isolatedUid) {
        if (isolatedUid) {
            var uid = 0;
            this.nextUid = function() {
                return ++uid;
            };
        }
        forEach(array, this.put, this);
    }
    function anonFn(fn) {
        var fnText = fn.toString().replace(STRIP_COMMENTS, ""), args = fnText.match(FN_ARGS);
        return args ? "function(" + (args[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
    }
    function annotate(fn, strictDi, name) {
        var $inject, fnText, argDecl, last;
        if ("function" == typeof fn) {
            if (!($inject = fn.$inject)) {
                $inject = [];
                if (fn.length) {
                    if (strictDi) {
                        isString(name) && name || (name = fn.name || anonFn(fn));
                        throw $injectorMinErr("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", name);
                    }
                    fnText = fn.toString().replace(STRIP_COMMENTS, "");
                    argDecl = fnText.match(FN_ARGS);
                    forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        } else if (isArray(fn)) {
            last = fn.length - 1;
            assertArgFn(fn[last], "fn");
            $inject = fn.slice(0, last);
        } else assertArgFn(fn, "fn", !0);
        return $inject;
    }
    function createInjector(modulesToLoad, strictDi) {
        function supportObject(delegate) {
            return function(key, value) {
                if (!isObject(key)) return delegate(key, value);
                forEach(key, reverseParams(delegate));
            };
        }
        function provider(name, provider_) {
            assertNotHasOwnProperty(name, "service");
            (isFunction(provider_) || isArray(provider_)) && (provider_ = providerInjector.instantiate(provider_));
            if (!provider_.$get) throw $injectorMinErr("pget", "Provider '{0}' must define $get factory method.", name);
            return providerCache[name + providerSuffix] = provider_;
        }
        function enforceReturnValue(name, factory) {
            return function() {
                var result = instanceInjector.invoke(factory, this);
                if (isUndefined(result)) throw $injectorMinErr("undef", "Provider '{0}' must return a value from $get factory method.", name);
                return result;
            };
        }
        function factory(name, factoryFn, enforce) {
            return provider(name, {
                $get: !1 !== enforce ? enforceReturnValue(name, factoryFn) : factoryFn
            });
        }
        function service(name, constructor) {
            return factory(name, [ "$injector", function($injector) {
                return $injector.instantiate(constructor);
            } ]);
        }
        function value(name, val) {
            return factory(name, valueFn(val), !1);
        }
        function constant(name, value) {
            assertNotHasOwnProperty(name, "constant");
            providerCache[name] = value;
            instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
            var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
            origProvider.$get = function() {
                var origInstance = instanceInjector.invoke(orig$get, origProvider);
                return instanceInjector.invoke(decorFn, null, {
                    $delegate: origInstance
                });
            };
        }
        function loadModules(modulesToLoad) {
            assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), "modulesToLoad", "not an array");
            var moduleFn, runBlocks = [];
            forEach(modulesToLoad, function(module) {
                function runInvokeQueue(queue) {
                    var i, ii;
                    for (i = 0, ii = queue.length; i < ii; i++) {
                        var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                        provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                    }
                }
                if (!loadedModules.get(module)) {
                    loadedModules.put(module, !0);
                    try {
                        if (isString(module)) {
                            moduleFn = angularModule(module);
                            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                            runInvokeQueue(moduleFn._invokeQueue);
                            runInvokeQueue(moduleFn._configBlocks);
                        } else isFunction(module) ? runBlocks.push(providerInjector.invoke(module)) : isArray(module) ? runBlocks.push(providerInjector.invoke(module)) : assertArgFn(module, "module");
                    } catch (e) {
                        isArray(module) && (module = module[module.length - 1]);
                        e.message && e.stack && -1 == e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack);
                        throw $injectorMinErr("modulerr", "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                    }
                }
            });
            return runBlocks;
        }
        function createInternalInjector(cache, factory) {
            function getService(serviceName, caller) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) throw $injectorMinErr("cdep", "Circular dependency found: {0}", serviceName + " <- " + path.join(" <- "));
                    return cache[serviceName];
                }
                try {
                    path.unshift(serviceName);
                    cache[serviceName] = INSTANTIATING;
                    return cache[serviceName] = factory(serviceName, caller);
                } catch (err) {
                    cache[serviceName] === INSTANTIATING && delete cache[serviceName];
                    throw err;
                } finally {
                    path.shift();
                }
            }
            function invoke(fn, self, locals, serviceName) {
                if ("string" == typeof locals) {
                    serviceName = locals;
                    locals = null;
                }
                var length, i, key, args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName);
                for (i = 0, length = $inject.length; i < length; i++) {
                    key = $inject[i];
                    if ("string" != typeof key) throw $injectorMinErr("itkn", "Incorrect injection token! Expected service name as string, got {0}", key);
                    args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
                }
                isArray(fn) && (fn = fn[length]);
                return fn.apply(self, args);
            }
            function instantiate(Type, locals, serviceName) {
                var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null), returnedValue = invoke(Type, instance, locals, serviceName);
                return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
            }
            return {
                invoke: invoke,
                instantiate: instantiate,
                get: getService,
                annotate: createInjector.$$annotate,
                has: function(name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
        strictDi = !0 === strictDi;
        var INSTANTIATING = {}, providerSuffix = "Provider", path = [], loadedModules = new HashMap([], !0), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(service),
                value: supportObject(value),
                constant: supportObject(constant),
                decorator: decorator
            }
        }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function(serviceName, caller) {
            angular.isString(caller) && path.push(caller);
            throw $injectorMinErr("unpr", "Unknown provider: {0}", path.join(" <- "));
        }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
        });
        forEach(loadModules(modulesToLoad), function(fn) {
            fn && instanceInjector.invoke(fn);
        });
        return instanceInjector;
    }
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = !0;
        this.disableAutoScrolling = function() {
            autoScrollingEnabled = !1;
        };
        this.$get = [ "$window", "$location", "$rootScope", function($window, $location, $rootScope) {
            function getFirstAnchor(list) {
                var result = null;
                Array.prototype.some.call(list, function(element) {
                    if ("a" === nodeName_(element)) {
                        result = element;
                        return !0;
                    }
                });
                return result;
            }
            function getYOffset() {
                var offset = scroll.yOffset;
                if (isFunction(offset)) offset = offset(); else if (isElement(offset)) {
                    var elem = offset[0], style = $window.getComputedStyle(elem);
                    offset = "fixed" !== style.position ? 0 : elem.getBoundingClientRect().bottom;
                } else isNumber(offset) || (offset = 0);
                return offset;
            }
            function scrollTo(elem) {
                if (elem) {
                    elem.scrollIntoView();
                    var offset = getYOffset();
                    if (offset) {
                        var elemTop = elem.getBoundingClientRect().top;
                        $window.scrollBy(0, elemTop - offset);
                    }
                } else $window.scrollTo(0, 0);
            }
            function scroll(hash) {
                hash = isString(hash) ? hash : $location.hash();
                var elm;
                hash ? (elm = document.getElementById(hash)) ? scrollTo(elm) : (elm = getFirstAnchor(document.getElementsByName(hash))) ? scrollTo(elm) : "top" === hash && scrollTo(null) : scrollTo(null);
            }
            var document = $window.document;
            autoScrollingEnabled && $rootScope.$watch(function() {
                return $location.hash();
            }, function(newVal, oldVal) {
                newVal === oldVal && "" === newVal || jqLiteDocumentLoaded(function() {
                    $rootScope.$evalAsync(scroll);
                });
            });
            return scroll;
        } ];
    }
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        isArray(a) && (a = a.join(" "));
        isArray(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) return elm;
        }
    }
    function splitClasses(classes) {
        isString(classes) && (classes = classes.split(" "));
        var obj = createMap();
        forEach(classes, function(klass) {
            klass.length && (obj[klass] = !0);
        });
        return obj;
    }
    function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
    }
    function Browser(window, document, $log, $sniffer) {
        function completeOutstandingRequest(fn) {
            try {
                fn.apply(null, sliceArgs(arguments, 1));
            } finally {
                outstandingRequestCount--;
                if (0 === outstandingRequestCount) for (;outstandingRequestCallbacks.length; ) try {
                    outstandingRequestCallbacks.pop()();
                } catch (e) {
                    $log.error(e);
                }
            }
        }
        function getHash(url) {
            var index = url.indexOf("#");
            return -1 === index ? "" : url.substr(index);
        }
        function cacheStateAndFireUrlChange() {
            pendingLocation = null;
            cacheState();
            fireUrlChange();
        }
        function getCurrentState() {
            try {
                return history.state;
            } catch (e) {}
        }
        function cacheState() {
            cachedState = getCurrentState();
            cachedState = isUndefined(cachedState) ? null : cachedState;
            equals(cachedState, lastCachedState) && (cachedState = lastCachedState);
            lastCachedState = cachedState;
        }
        function fireUrlChange() {
            if (lastBrowserUrl !== self.url() || lastHistoryState !== cachedState) {
                lastBrowserUrl = self.url();
                lastHistoryState = cachedState;
                forEach(urlChangeListeners, function(listener) {
                    listener(self.url(), cachedState);
                });
            }
        }
        var self = this, location = (document[0], window.location), history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
        self.isMock = !1;
        var outstandingRequestCount = 0, outstandingRequestCallbacks = [];
        self.$$completeOutstandingRequest = completeOutstandingRequest;
        self.$$incOutstandingRequestCount = function() {
            outstandingRequestCount++;
        };
        self.notifyWhenNoOutstandingRequests = function(callback) {
            0 === outstandingRequestCount ? callback() : outstandingRequestCallbacks.push(callback);
        };
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find("base"), pendingLocation = null;
        cacheState();
        lastHistoryState = cachedState;
        self.url = function(url, replace, state) {
            isUndefined(state) && (state = null);
            location !== window.location && (location = window.location);
            history !== window.history && (history = window.history);
            if (url) {
                var sameState = lastHistoryState === state;
                if (lastBrowserUrl === url && (!$sniffer.history || sameState)) return self;
                var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
                lastBrowserUrl = url;
                lastHistoryState = state;
                if (!$sniffer.history || sameBase && sameState) {
                    sameBase && !pendingLocation || (pendingLocation = url);
                    replace ? location.replace(url) : sameBase ? location.hash = getHash(url) : location.href = url;
                    location.href !== url && (pendingLocation = url);
                } else {
                    history[replace ? "replaceState" : "pushState"](state, "", url);
                    cacheState();
                    lastHistoryState = cachedState;
                }
                return self;
            }
            return pendingLocation || location.href.replace(/%27/g, "'");
        };
        self.state = function() {
            return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = !1, lastCachedState = null;
        self.onUrlChange = function(callback) {
            if (!urlChangeInit) {
                $sniffer.history && jqLite(window).on("popstate", cacheStateAndFireUrlChange);
                jqLite(window).on("hashchange", cacheStateAndFireUrlChange);
                urlChangeInit = !0;
            }
            urlChangeListeners.push(callback);
            return callback;
        };
        self.$$applicationDestroyed = function() {
            jqLite(window).off("hashchange popstate", cacheStateAndFireUrlChange);
        };
        self.$$checkUrlChange = fireUrlChange;
        self.baseHref = function() {
            var href = baseElement.attr("href");
            return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, "") : "";
        };
        self.defer = function(fn, delay) {
            var timeoutId;
            outstandingRequestCount++;
            timeoutId = setTimeout(function() {
                delete pendingDeferIds[timeoutId];
                completeOutstandingRequest(fn);
            }, delay || 0);
            pendingDeferIds[timeoutId] = !0;
            return timeoutId;
        };
        self.defer.cancel = function(deferId) {
            if (pendingDeferIds[deferId]) {
                delete pendingDeferIds[deferId];
                clearTimeout(deferId);
                completeOutstandingRequest(noop);
                return !0;
            }
            return !1;
        };
    }
    function $BrowserProvider() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function($window, $log, $sniffer, $document) {
            return new Browser($window, $document, $log, $sniffer);
        } ];
    }
    function $CacheFactoryProvider() {
        this.$get = function() {
            function cacheFactory(cacheId, options) {
                function refresh(entry) {
                    if (entry != freshEnd) {
                        staleEnd ? staleEnd == entry && (staleEnd = entry.n) : staleEnd = entry;
                        link(entry.n, entry.p);
                        link(entry, freshEnd);
                        freshEnd = entry;
                        freshEnd.n = null;
                    }
                }
                function link(nextEntry, prevEntry) {
                    if (nextEntry != prevEntry) {
                        nextEntry && (nextEntry.p = prevEntry);
                        prevEntry && (prevEntry.n = nextEntry);
                    }
                }
                if (cacheId in caches) throw minErr("$cacheFactory")("iid", "CacheId '{0}' is already taken!", cacheId);
                var size = 0, stats = extend({}, options, {
                    id: cacheId
                }), data = createMap(), capacity = options && options.capacity || Number.MAX_VALUE, lruHash = createMap(), freshEnd = null, staleEnd = null;
                return caches[cacheId] = {
                    put: function(key, value) {
                        if (!isUndefined(value)) {
                            if (capacity < Number.MAX_VALUE) {
                                refresh(lruHash[key] || (lruHash[key] = {
                                    key: key
                                }));
                            }
                            key in data || size++;
                            data[key] = value;
                            size > capacity && this.remove(staleEnd.key);
                            return value;
                        }
                    },
                    get: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    remove: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            lruEntry == freshEnd && (freshEnd = lruEntry.p);
                            lruEntry == staleEnd && (staleEnd = lruEntry.n);
                            link(lruEntry.n, lruEntry.p);
                            delete lruHash[key];
                        }
                        if (key in data) {
                            delete data[key];
                            size--;
                        }
                    },
                    removeAll: function() {
                        data = createMap();
                        size = 0;
                        lruHash = createMap();
                        freshEnd = staleEnd = null;
                    },
                    destroy: function() {
                        data = null;
                        stats = null;
                        lruHash = null;
                        delete caches[cacheId];
                    },
                    info: function() {
                        return extend({}, stats, {
                            size: size
                        });
                    }
                };
            }
            var caches = {};
            cacheFactory.info = function() {
                var info = {};
                forEach(caches, function(cache, cacheId) {
                    info[cacheId] = cache.info();
                });
                return info;
            };
            cacheFactory.get = function(cacheId) {
                return caches[cacheId];
            };
            return cacheFactory;
        };
    }
    function $TemplateCacheProvider() {
        this.$get = [ "$cacheFactory", function($cacheFactory) {
            return $cacheFactory("templates");
        } ];
    }
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        function parseIsolateBindings(scope, directiveName, isController) {
            var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/, bindings = {};
            forEach(scope, function(definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP);
                if (!match) throw $compileMinErr("iscp", "Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition, isController ? "controller bindings definition" : "isolate scope definition");
                bindings[scopeName] = {
                    mode: match[1][0],
                    collection: "*" === match[2],
                    optional: "?" === match[3],
                    attrName: match[4] || scopeName
                };
            });
            return bindings;
        }
        function parseDirectiveBindings(directive, directiveName) {
            var bindings = {
                isolateScope: null,
                bindToController: null
            };
            if (isObject(directive.scope)) if (!0 === directive.bindToController) {
                bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, !0);
                bindings.isolateScope = {};
            } else bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, !1);
            isObject(directive.bindToController) && (bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, !0));
            if (isObject(bindings.bindToController)) {
                var controller = directive.controller, controllerAs = directive.controllerAs;
                if (!controller) throw $compileMinErr("noctrl", "Cannot bind to controller without directive '{0}'s controller.", directiveName);
                if (!identifierForController(controller, controllerAs)) throw $compileMinErr("noident", "Cannot bind to controller without identifier for directive '{0}'.", directiveName);
            }
            return bindings;
        }
        function assertValidDirectiveName(name) {
            var letter = name.charAt(0);
            if (!letter || letter !== lowercase(letter)) throw $compileMinErr("baddir", "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
            if (name !== name.trim()) throw $compileMinErr("baddir", "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces", name);
        }
        var hasDirectives = {}, Suffix = "Directive", COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap("ngSrc,ngSrcset,src,srcset"), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        this.directive = function registerDirective(name, directiveFactory) {
            assertNotHasOwnProperty(name, "directive");
            if (isString(name)) {
                assertValidDirectiveName(name);
                assertArg(directiveFactory, "directiveFactory");
                if (!hasDirectives.hasOwnProperty(name)) {
                    hasDirectives[name] = [];
                    $provide.factory(name + Suffix, [ "$injector", "$exceptionHandler", function($injector, $exceptionHandler) {
                        var directives = [];
                        forEach(hasDirectives[name], function(directiveFactory, index) {
                            try {
                                var directive = $injector.invoke(directiveFactory);
                                isFunction(directive) ? directive = {
                                    compile: valueFn(directive)
                                } : !directive.compile && directive.link && (directive.compile = valueFn(directive.link));
                                directive.priority = directive.priority || 0;
                                directive.index = index;
                                directive.name = directive.name || name;
                                directive.require = directive.require || directive.controller && directive.name;
                                directive.restrict = directive.restrict || "EA";
                                var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                                isObject(bindings.isolateScope) && (directive.$$isolateBindings = bindings.isolateScope);
                                directive.$$moduleName = directiveFactory.$$moduleName;
                                directives.push(directive);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                        return directives;
                    } ]);
                }
                hasDirectives[name].push(directiveFactory);
            } else forEach(name, reverseParams(registerDirective));
            return this;
        };
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
                return this;
            }
            return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
                return this;
            }
            return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
        };
        var debugInfoEnabled = !0;
        this.debugInfoEnabled = function(enabled) {
            if (isDefined(enabled)) {
                debugInfoEnabled = enabled;
                return this;
            }
            return debugInfoEnabled;
        };
        this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $sce, $animate, $$sanitizeUri) {
            function safeAddClass($element, className) {
                try {
                    $element.addClass(className);
                } catch (e) {}
            }
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                $compileNodes instanceof jqLite || ($compileNodes = jqLite($compileNodes));
                forEach($compileNodes, function(node, index) {
                    node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) && ($compileNodes[index] = jqLite(node).wrap("<span></span>").parent()[0]);
                });
                var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                compile.$$addScopeClass($compileNodes);
                var namespace = null;
                return function(scope, cloneConnectFn, options) {
                    assertArg(scope, "scope");
                    previousCompileContext && previousCompileContext.needsNewScope && (scope = scope.$parent.$new());
                    options = options || {};
                    var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                    parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude && (parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude);
                    namespace || (namespace = detectNamespaceForChildElements(futureParentElement));
                    var $linkNode;
                    $linkNode = "html" !== namespace ? jqLite(wrapTemplate(namespace, jqLite("<div>").append($compileNodes).html())) : cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
                    if (transcludeControllers) for (var controllerName in transcludeControllers) $linkNode.data("$" + controllerName + "Controller", transcludeControllers[controllerName].instance);
                    compile.$$addScopeInfo($linkNode, scope);
                    cloneConnectFn && cloneConnectFn($linkNode, scope);
                    compositeLinkFn && compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                    return $linkNode;
                };
            }
            function detectNamespaceForChildElements(parentElement) {
                var node = parentElement && parentElement[0];
                return node && "foreignobject" !== nodeName_(node) && node.toString().match(/SVG/) ? "svg" : "html";
            }
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                    var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn, stableNodeList;
                    if (nodeLinkFnFound) {
                        var nodeListLength = nodeList.length;
                        stableNodeList = new Array(nodeListLength);
                        for (i = 0; i < linkFns.length; i += 3) {
                            idx = linkFns[i];
                            stableNodeList[idx] = nodeList[idx];
                        }
                    } else stableNodeList = nodeList;
                    for (i = 0, ii = linkFns.length; i < ii; ) {
                        node = stableNodeList[linkFns[i++]];
                        nodeLinkFn = linkFns[i++];
                        childLinkFn = linkFns[i++];
                        if (nodeLinkFn) {
                            if (nodeLinkFn.scope) {
                                childScope = scope.$new();
                                compile.$$addScopeInfo(jqLite(node), childScope);
                            } else childScope = scope;
                            childBoundTranscludeFn = nodeLinkFn.transcludeOnThisElement ? createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn) : !nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn ? parentBoundTranscludeFn : !parentBoundTranscludeFn && transcludeFn ? createBoundTranscludeFn(scope, transcludeFn) : null;
                            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                        } else childLinkFn && childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                    }
                }
                for (var attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound, linkFns = [], i = 0; i < nodeList.length; i++) {
                    attrs = new Attributes();
                    directives = collectDirectives(nodeList[i], [], attrs, 0 === i ? maxPriority : undefined, ignoreDirective);
                    nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
                    nodeLinkFn && nodeLinkFn.scope && compile.$$addScopeClass(attrs.$$element);
                    childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
                    if (nodeLinkFn || childLinkFn) {
                        linkFns.push(i, nodeLinkFn, childLinkFn);
                        linkFnFound = !0;
                        nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                    }
                    previousCompileContext = null;
                }
                return linkFnFound ? compositeLinkFn : null;
            }
            function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
                return function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                    if (!transcludedScope) {
                        transcludedScope = scope.$new(!1, containingScope);
                        transcludedScope.$$transcluded = !0;
                    }
                    return transcludeFn(transcludedScope, cloneFn, {
                        parentBoundTranscludeFn: previousBoundTranscludeFn,
                        transcludeControllers: controllers,
                        futureParentElement: futureParentElement
                    });
                };
            }
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                var match, className, nodeType = node.nodeType, attrsMap = attrs.$attr;
                switch (nodeType) {
                  case NODE_TYPE_ELEMENT:
                    addDirective(directives, directiveNormalize(nodeName_(node)), "E", maxPriority, ignoreDirective);
                    for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                        var attrStartName = !1, attrEndName = !1;
                        attr = nAttrs[j];
                        name = attr.name;
                        value = trim(attr.value);
                        ngAttrName = directiveNormalize(name);
                        (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) && (name = name.replace(PREFIX_REGEXP, "").substr(8).replace(/_(.)/g, function(match, letter) {
                            return letter.toUpperCase();
                        }));
                        var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
                        if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
                            attrStartName = name;
                            attrEndName = name.substr(0, name.length - 5) + "end";
                            name = name.substr(0, name.length - 6);
                        }
                        nName = directiveNormalize(name.toLowerCase());
                        attrsMap[nName] = name;
                        if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                            attrs[nName] = value;
                            getBooleanAttrName(node, nName) && (attrs[nName] = !0);
                        }
                        addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                        addDirective(directives, nName, "A", maxPriority, ignoreDirective, attrStartName, attrEndName);
                    }
                    className = node.className;
                    isObject(className) && (className = className.animVal);
                    if (isString(className) && "" !== className) for (;match = CLASS_DIRECTIVE_REGEXP.exec(className); ) {
                        nName = directiveNormalize(match[2]);
                        addDirective(directives, nName, "C", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[3]));
                        className = className.substr(match.index + match[0].length);
                    }
                    break;

                  case NODE_TYPE_TEXT:
                    if (11 === msie) for (;node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT; ) {
                        node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
                        node.parentNode.removeChild(node.nextSibling);
                    }
                    addTextInterpolateDirective(directives, node.nodeValue);
                    break;

                  case NODE_TYPE_COMMENT:
                    try {
                        match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                        if (match) {
                            nName = directiveNormalize(match[1]);
                            addDirective(directives, nName, "M", maxPriority, ignoreDirective) && (attrs[nName] = trim(match[2]));
                        }
                    } catch (e) {}
                }
                directives.sort(byPriority);
                return directives;
            }
            function groupScan(node, attrStart, attrEnd) {
                var nodes = [], depth = 0;
                if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) do {
                    if (!node) throw $compileMinErr("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                    if (node.nodeType == NODE_TYPE_ELEMENT) {
                        node.hasAttribute(attrStart) && depth++;
                        node.hasAttribute(attrEnd) && depth--;
                    }
                    nodes.push(node);
                    node = node.nextSibling;
                } while (depth > 0); else nodes.push(node);
                return jqLite(nodes);
            }
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                return function(scope, element, attrs, controllers, transcludeFn) {
                    element = groupScan(element[0], attrStart, attrEnd);
                    return linkFn(scope, element, attrs, controllers, transcludeFn);
                };
            }
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                function addLinkFns(pre, post, attrStart, attrEnd) {
                    if (pre) {
                        attrStart && (pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd));
                        pre.require = directive.require;
                        pre.directiveName = directiveName;
                        (newIsolateScopeDirective === directive || directive.$$isolateScope) && (pre = cloneAndAnnotateFn(pre, {
                            isolateScope: !0
                        }));
                        preLinkFns.push(pre);
                    }
                    if (post) {
                        attrStart && (post = groupElementsLinkFnWrapper(post, attrStart, attrEnd));
                        post.require = directive.require;
                        post.directiveName = directiveName;
                        (newIsolateScopeDirective === directive || directive.$$isolateScope) && (post = cloneAndAnnotateFn(post, {
                            isolateScope: !0
                        }));
                        postLinkFns.push(post);
                    }
                }
                function getControllers(directiveName, require, $element, elementControllers) {
                    var value;
                    if (isString(require)) {
                        var match = require.match(REQUIRE_PREFIX_REGEXP), name = require.substring(match[0].length), inheritType = match[1] || match[3], optional = "?" === match[2];
                        if ("^^" === inheritType) $element = $element.parent(); else {
                            value = elementControllers && elementControllers[name];
                            value = value && value.instance;
                        }
                        if (!value) {
                            var dataName = "$" + name + "Controller";
                            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
                        }
                        if (!value && !optional) throw $compileMinErr("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", name, directiveName);
                    } else if (isArray(require)) {
                        value = [];
                        for (var i = 0, ii = require.length; i < ii; i++) value[i] = getControllers(directiveName, require[i], $element, elementControllers);
                    }
                    return value || null;
                }
                function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
                    var elementControllers = createMap();
                    for (var controllerKey in controllerDirectives) {
                        var directive = controllerDirectives[controllerKey], locals = {
                            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                            $element: $element,
                            $attrs: attrs,
                            $transclude: transcludeFn
                        }, controller = directive.controller;
                        "@" == controller && (controller = attrs[directive.name]);
                        var controllerInstance = $controller(controller, locals, !0, directive.controllerAs);
                        elementControllers[directive.name] = controllerInstance;
                        hasElementTranscludeDirective || $element.data("$" + directive.name + "Controller", controllerInstance.instance);
                    }
                    return elementControllers;
                }
                function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                    function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
                        var transcludeControllers;
                        if (!isScope(scope)) {
                            futureParentElement = cloneAttachFn;
                            cloneAttachFn = scope;
                            scope = undefined;
                        }
                        hasElementTranscludeDirective && (transcludeControllers = elementControllers);
                        futureParentElement || (futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element);
                        return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                    }
                    var linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element, attrs, removeScopeBindingWatches, removeControllerBindingWatches;
                    if (compileNode === linkNode) {
                        attrs = templateAttrs;
                        $element = templateAttrs.$$element;
                    } else {
                        $element = jqLite(linkNode);
                        attrs = new Attributes($element, templateAttrs);
                    }
                    controllerScope = scope;
                    newIsolateScopeDirective ? isolateScope = scope.$new(!0) : newScopeDirective && (controllerScope = scope.$parent);
                    if (boundTranscludeFn) {
                        transcludeFn = controllersBoundTransclude;
                        transcludeFn.$$boundTransclude = boundTranscludeFn;
                    }
                    controllerDirectives && (elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope));
                    if (newIsolateScopeDirective) {
                        compile.$$addScopeInfo($element, isolateScope, !0, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                        compile.$$addScopeClass($element, !0);
                        isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                        removeScopeBindingWatches = initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective);
                        removeScopeBindingWatches && isolateScope.$on("$destroy", removeScopeBindingWatches);
                    }
                    for (var name in elementControllers) {
                        var controllerDirective = controllerDirectives[name], controller = elementControllers[name], bindings = controllerDirective.$$bindings.bindToController;
                        controller.identifier && bindings && (removeControllerBindingWatches = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective));
                        var controllerResult = controller();
                        if (controllerResult !== controller.instance) {
                            controller.instance = controllerResult;
                            $element.data("$" + controllerDirective.name + "Controller", controllerResult);
                            removeControllerBindingWatches && removeControllerBindingWatches();
                            removeControllerBindingWatches = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                        }
                    }
                    for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                        linkFn = preLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                    var scopeToChild = scope;
                    newIsolateScopeDirective && (newIsolateScopeDirective.template || null === newIsolateScopeDirective.templateUrl) && (scopeToChild = isolateScope);
                    childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
                    for (i = postLinkFns.length - 1; i >= 0; i--) {
                        linkFn = postLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                }
                previousCompileContext = previousCompileContext || {};
                for (var directive, directiveName, $template, linkFn, directiveValue, terminalPriority = -Number.MAX_VALUE, newScopeDirective = previousCompileContext.newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = !1, hasTemplate = !1, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, i = 0, ii = directives.length; i < ii; i++) {
                    directive = directives[i];
                    var attrStart = directive.$$start, attrEnd = directive.$$end;
                    attrStart && ($compileNode = groupScan(compileNode, attrStart, attrEnd));
                    $template = undefined;
                    if (terminalPriority > directive.priority) break;
                    if (directiveValue = directive.scope) {
                        if (!directive.templateUrl) if (isObject(directiveValue)) {
                            assertNoDuplicate("new/isolated scope", newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                            newIsolateScopeDirective = directive;
                        } else assertNoDuplicate("new/isolated scope", newIsolateScopeDirective, directive, $compileNode);
                        newScopeDirective = newScopeDirective || directive;
                    }
                    directiveName = directive.name;
                    if (!directive.templateUrl && directive.controller) {
                        directiveValue = directive.controller;
                        controllerDirectives = controllerDirectives || createMap();
                        assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                        controllerDirectives[directiveName] = directive;
                    }
                    if (directiveValue = directive.transclude) {
                        hasTranscludeDirective = !0;
                        if (!directive.$$tlb) {
                            assertNoDuplicate("transclusion", nonTlbTranscludeDirective, directive, $compileNode);
                            nonTlbTranscludeDirective = directive;
                        }
                        if ("element" == directiveValue) {
                            hasElementTranscludeDirective = !0;
                            terminalPriority = directive.priority;
                            $template = $compileNode;
                            $compileNode = templateAttrs.$$element = jqLite(document.createComment(" " + directiveName + ": " + templateAttrs[directiveName] + " "));
                            compileNode = $compileNode[0];
                            replaceWith(jqCollection, sliceArgs($template), compileNode);
                            childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                                nonTlbTranscludeDirective: nonTlbTranscludeDirective
                            });
                        } else {
                            $template = jqLite(jqLiteClone(compileNode)).contents();
                            $compileNode.empty();
                            childTranscludeFn = compile($template, transcludeFn, undefined, undefined, {
                                needsNewScope: directive.$$isolateScope || directive.$$newScope
                            });
                        }
                    }
                    if (directive.template) {
                        hasTemplate = !0;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
                        directiveValue = denormalizeTemplate(directiveValue);
                        if (directive.replace) {
                            replaceDirective = directive;
                            $template = jqLiteIsTextNode(directiveValue) ? [] : removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                            compileNode = $template[0];
                            if (1 != $template.length || compileNode.nodeType !== NODE_TYPE_ELEMENT) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", directiveName, "");
                            replaceWith(jqCollection, $compileNode, compileNode);
                            var newTemplateAttrs = {
                                $attr: {}
                            }, templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs), unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                            (newIsolateScopeDirective || newScopeDirective) && markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
                            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                            ii = directives.length;
                        } else $compileNode.html(directiveValue);
                    }
                    if (directive.templateUrl) {
                        hasTemplate = !0;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        directive.replace && (replaceDirective = directive);
                        nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                            controllerDirectives: controllerDirectives,
                            newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                            newIsolateScopeDirective: newIsolateScopeDirective,
                            templateDirective: templateDirective,
                            nonTlbTranscludeDirective: nonTlbTranscludeDirective
                        });
                        ii = directives.length;
                    } else if (directive.compile) try {
                        linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                        isFunction(linkFn) ? addLinkFns(null, linkFn, attrStart, attrEnd) : linkFn && addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                    } catch (e) {
                        $exceptionHandler(e, startingTag($compileNode));
                    }
                    if (directive.terminal) {
                        nodeLinkFn.terminal = !0;
                        terminalPriority = Math.max(terminalPriority, directive.priority);
                    }
                }
                nodeLinkFn.scope = newScopeDirective && !0 === newScopeDirective.scope;
                nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
                nodeLinkFn.templateOnThisElement = hasTemplate;
                nodeLinkFn.transclude = childTranscludeFn;
                previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
                return nodeLinkFn;
            }
            function markDirectiveScope(directives, isolateScope, newScope) {
                for (var j = 0, jj = directives.length; j < jj; j++) directives[j] = inherit(directives[j], {
                    $$isolateScope: isolateScope,
                    $$newScope: newScope
                });
            }
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                if (name === ignoreDirective) return null;
                var match = null;
                if (hasDirectives.hasOwnProperty(name)) for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) try {
                    directive = directives[i];
                    if ((isUndefined(maxPriority) || maxPriority > directive.priority) && -1 != directive.restrict.indexOf(location)) {
                        startAttrName && (directive = inherit(directive, {
                            $$start: startAttrName,
                            $$end: endAttrName
                        }));
                        tDirectives.push(directive);
                        match = directive;
                    }
                } catch (e) {
                    $exceptionHandler(e);
                }
                return match;
            }
            function directiveIsMultiElement(name) {
                if (hasDirectives.hasOwnProperty(name)) for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                    directive = directives[i];
                    if (directive.multiElement) return !0;
                }
                return !1;
            }
            function mergeTemplateAttributes(dst, src) {
                var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
                forEach(dst, function(value, key) {
                    if ("$" != key.charAt(0)) {
                        src[key] && src[key] !== value && (value += ("style" === key ? ";" : " ") + src[key]);
                        dst.$set(key, value, !0, srcAttr[key]);
                    }
                });
                forEach(src, function(value, key) {
                    if ("class" == key) {
                        safeAddClass($element, value);
                        dst.class = (dst.class ? dst.class + " " : "") + value;
                    } else if ("style" == key) {
                        $element.attr("style", $element.attr("style") + ";" + value);
                        dst.style = (dst.style ? dst.style + ";" : "") + value;
                    } else if ("$" != key.charAt(0) && !dst.hasOwnProperty(key)) {
                        dst[key] = value;
                        dstAttr[key] = srcAttr[key];
                    }
                });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                var afterTemplateNodeLinkFn, afterTemplateChildLinkFn, linkQueue = [], beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
                $compileNode.empty();
                $templateRequest(templateUrl).then(function(content) {
                    var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                    content = denormalizeTemplate(content);
                    if (origAsyncDirective.replace) {
                        $template = jqLiteIsTextNode(content) ? [] : removeComments(wrapTemplate(templateNamespace, trim(content)));
                        compileNode = $template[0];
                        if (1 != $template.length || compileNode.nodeType !== NODE_TYPE_ELEMENT) throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                        tempTemplateAttrs = {
                            $attr: {}
                        };
                        replaceWith($rootElement, $compileNode, compileNode);
                        var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                        isObject(origAsyncDirective.scope) && markDirectiveScope(templateDirectives, !0);
                        directives = templateDirectives.concat(directives);
                        mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                    } else {
                        compileNode = beforeTemplateCompileNode;
                        $compileNode.html(content);
                    }
                    directives.unshift(derivedSyncDirective);
                    afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                    forEach($rootElement, function(node, i) {
                        node == compileNode && ($rootElement[i] = $compileNode[0]);
                    });
                    afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                    for (;linkQueue.length; ) {
                        var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                        if (!scope.$$destroyed) {
                            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                                var oldClasses = beforeTemplateLinkNode.className;
                                previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace || (linkNode = jqLiteClone(compileNode));
                                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                                safeAddClass(jqLite(linkNode), oldClasses);
                            }
                            childBoundTranscludeFn = afterTemplateNodeLinkFn.transcludeOnThisElement ? createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn) : boundTranscludeFn;
                            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                        }
                    }
                    linkQueue = null;
                });
                return function(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                    var childBoundTranscludeFn = boundTranscludeFn;
                    if (!scope.$$destroyed) if (linkQueue) linkQueue.push(scope, node, rootElement, childBoundTranscludeFn); else {
                        afterTemplateNodeLinkFn.transcludeOnThisElement && (childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn));
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
                    }
                };
            }
            function byPriority(a, b) {
                var diff = b.priority - a.priority;
                return 0 !== diff ? diff : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
                function wrapModuleNameIfDefined(moduleName) {
                    return moduleName ? " (module: " + moduleName + ")" : "";
                }
                if (previousDirective) throw $compileMinErr("multidir", "Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}", previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
            }
            function addTextInterpolateDirective(directives, text) {
                var interpolateFn = $interpolate(text, !0);
                interpolateFn && directives.push({
                    priority: 0,
                    compile: function(templateNode) {
                        var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                        hasCompileParent && compile.$$addBindingClass(templateNodeParent);
                        return function(scope, node) {
                            var parent = node.parent();
                            hasCompileParent || compile.$$addBindingClass(parent);
                            compile.$$addBindingInfo(parent, interpolateFn.expressions);
                            scope.$watch(interpolateFn, function(value) {
                                node[0].nodeValue = value;
                            });
                        };
                    }
                });
            }
            function wrapTemplate(type, template) {
                type = lowercase(type || "html");
                switch (type) {
                  case "svg":
                  case "math":
                    var wrapper = document.createElement("div");
                    wrapper.innerHTML = "<" + type + ">" + template + "</" + type + ">";
                    return wrapper.childNodes[0].childNodes;

                  default:
                    return template;
                }
            }
            function getTrustedContext(node, attrNormalizedName) {
                if ("srcdoc" == attrNormalizedName) return $sce.HTML;
                var tag = nodeName_(node);
                return "xlinkHref" == attrNormalizedName || "form" == tag && "action" == attrNormalizedName || "img" != tag && ("src" == attrNormalizedName || "ngSrc" == attrNormalizedName) ? $sce.RESOURCE_URL : void 0;
            }
            function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
                var trustedContext = getTrustedContext(node, name);
                allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;
                var interpolateFn = $interpolate(value, !0, trustedContext, allOrNothing);
                if (interpolateFn) {
                    if ("multiple" === name && "select" === nodeName_(node)) throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                    directives.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(scope, element, attr) {
                                    var $$observers = attr.$$observers || (attr.$$observers = createMap());
                                    if (EVENT_HANDLER_ATTR_REGEXP.test(name)) throw $compileMinErr("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
                                    var newValue = attr[name];
                                    if (newValue !== value) {
                                        interpolateFn = newValue && $interpolate(newValue, !0, trustedContext, allOrNothing);
                                        value = newValue;
                                    }
                                    if (interpolateFn) {
                                        attr[name] = interpolateFn(scope);
                                        ($$observers[name] || ($$observers[name] = [])).$$inter = !0;
                                        (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function(newValue, oldValue) {
                                            "class" === name && newValue != oldValue ? attr.$updateClass(newValue, oldValue) : attr.$set(name, newValue);
                                        });
                                    }
                                }
                            };
                        }
                    });
                }
            }
            function replaceWith($rootElement, elementsToRemove, newNode) {
                var i, ii, firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode;
                if ($rootElement) for (i = 0, ii = $rootElement.length; i < ii; i++) if ($rootElement[i] == firstElementToRemove) {
                    $rootElement[i++] = newNode;
                    for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, 
                    j2++) j2 < jj ? $rootElement[j] = $rootElement[j2] : delete $rootElement[j];
                    $rootElement.length -= removeCount - 1;
                    $rootElement.context === firstElementToRemove && ($rootElement.context = newNode);
                    break;
                }
                parent && parent.replaceChild(newNode, firstElementToRemove);
                var fragment = document.createDocumentFragment();
                fragment.appendChild(firstElementToRemove);
                if (jqLite.hasData(firstElementToRemove)) {
                    jqLite.data(newNode, jqLite.data(firstElementToRemove));
                    if (jQuery) {
                        skipDestroyOnNextJQueryCleanData = !0;
                        jQuery.cleanData([ firstElementToRemove ]);
                    } else delete jqLite.cache[firstElementToRemove[jqLite.expando]];
                }
                for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
                    var element = elementsToRemove[k];
                    jqLite(element).remove();
                    fragment.appendChild(element);
                    delete elementsToRemove[k];
                }
                elementsToRemove[0] = newNode;
                elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
                return extend(function() {
                    return fn.apply(null, arguments);
                }, fn, annotation);
            }
            function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
                try {
                    linkFn(scope, $element, attrs, controllers, transcludeFn);
                } catch (e) {
                    $exceptionHandler(e, startingTag($element));
                }
            }
            function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
                var removeWatchCollection = [];
                forEach(bindings, function(definition, scopeName) {
                    var lastValue, parentGet, parentSet, compare, attrName = definition.attrName, optional = definition.optional, mode = definition.mode;
                    switch (mode) {
                      case "@":
                        optional || hasOwnProperty.call(attrs, attrName) || (destination[scopeName] = attrs[attrName] = void 0);
                        attrs.$observe(attrName, function(value) {
                            isString(value) && (destination[scopeName] = value);
                        });
                        attrs.$$observers[attrName].$$scope = scope;
                        isString(attrs[attrName]) && (destination[scopeName] = $interpolate(attrs[attrName])(scope));
                        break;

                      case "=":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            attrs[attrName] = void 0;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        compare = parentGet.literal ? equals : function(a, b) {
                            return a === b || a !== a && b !== b;
                        };
                        parentSet = parentGet.assign || function() {
                            lastValue = destination[scopeName] = parentGet(scope);
                            throw $compileMinErr("nonassign", "Expression '{0}' used with directive '{1}' is non-assignable!", attrs[attrName], directive.name);
                        };
                        lastValue = destination[scopeName] = parentGet(scope);
                        var parentValueWatch = function(parentValue) {
                            compare(parentValue, destination[scopeName]) || (compare(parentValue, lastValue) ? parentSet(scope, parentValue = destination[scopeName]) : destination[scopeName] = parentValue);
                            return lastValue = parentValue;
                        };
                        parentValueWatch.$stateful = !0;
                        var removeWatch;
                        removeWatch = definition.collection ? scope.$watchCollection(attrs[attrName], parentValueWatch) : scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "&":
                        parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
                        if (parentGet === noop && optional) break;
                        destination[scopeName] = function(locals) {
                            return parentGet(scope, locals);
                        };
                    }
                });
                return removeWatchCollection.length && function() {
                    for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) removeWatchCollection[i]();
                };
            }
            var Attributes = function(element, attributesToCopy) {
                if (attributesToCopy) {
                    var i, l, key, keys = Object.keys(attributesToCopy);
                    for (i = 0, l = keys.length; i < l; i++) {
                        key = keys[i];
                        this[key] = attributesToCopy[key];
                    }
                } else this.$attr = {};
                this.$$element = element;
            };
            Attributes.prototype = {
                $normalize: directiveNormalize,
                $addClass: function(classVal) {
                    classVal && classVal.length > 0 && $animate.addClass(this.$$element, classVal);
                },
                $removeClass: function(classVal) {
                    classVal && classVal.length > 0 && $animate.removeClass(this.$$element, classVal);
                },
                $updateClass: function(newClasses, oldClasses) {
                    var toAdd = tokenDifference(newClasses, oldClasses);
                    toAdd && toAdd.length && $animate.addClass(this.$$element, toAdd);
                    var toRemove = tokenDifference(oldClasses, newClasses);
                    toRemove && toRemove.length && $animate.removeClass(this.$$element, toRemove);
                },
                $set: function(key, value, writeAttr, attrName) {
                    var nodeName, node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(key), observer = key;
                    if (booleanKey) {
                        this.$$element.prop(key, value);
                        attrName = booleanKey;
                    } else if (aliasedKey) {
                        this[aliasedKey] = value;
                        observer = aliasedKey;
                    }
                    this[key] = value;
                    if (attrName) this.$attr[key] = attrName; else {
                        attrName = this.$attr[key];
                        attrName || (this.$attr[key] = attrName = snake_case(key, "-"));
                    }
                    nodeName = nodeName_(this.$$element);
                    if ("a" === nodeName && "href" === key || "img" === nodeName && "src" === key) this[key] = value = $$sanitizeUri(value, "src" === key); else if ("img" === nodeName && "srcset" === key) {
                        for (var result = "", trimmedSrcset = trim(value), srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/, rawUris = trimmedSrcset.split(pattern), nbrUrisWith2parts = Math.floor(rawUris.length / 2), i = 0; i < nbrUrisWith2parts; i++) {
                            var innerIdx = 2 * i;
                            result += $$sanitizeUri(trim(rawUris[innerIdx]), !0);
                            result += " " + trim(rawUris[innerIdx + 1]);
                        }
                        var lastTuple = trim(rawUris[2 * i]).split(/\s/);
                        result += $$sanitizeUri(trim(lastTuple[0]), !0);
                        2 === lastTuple.length && (result += " " + trim(lastTuple[1]));
                        this[key] = value = result;
                    }
                    !1 !== writeAttr && (null === value || isUndefined(value) ? this.$$element.removeAttr(attrName) : this.$$element.attr(attrName, value));
                    var $$observers = this.$$observers;
                    $$observers && forEach($$observers[observer], function(fn) {
                        try {
                            fn(value);
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                    });
                },
                $observe: function(key, fn) {
                    var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
                    listeners.push(fn);
                    $rootScope.$evalAsync(function() {
                        listeners.$$inter || !attrs.hasOwnProperty(key) || isUndefined(attrs[key]) || fn(attrs[key]);
                    });
                    return function() {
                        arrayRemove(listeners, fn);
                    };
                }
            };
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = "{{" == startSymbol || "}}" == endSymbol ? identity : function(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
            }, NG_ATTR_BINDING = /^ngAttr[A-Z]/, MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
            compile.$$addBindingInfo = debugInfoEnabled ? function($element, binding) {
                var bindings = $element.data("$binding") || [];
                isArray(binding) ? bindings = bindings.concat(binding) : bindings.push(binding);
                $element.data("$binding", bindings);
            } : noop;
            compile.$$addBindingClass = debugInfoEnabled ? function($element) {
                safeAddClass($element, "ng-binding");
            } : noop;
            compile.$$addScopeInfo = debugInfoEnabled ? function($element, scope, isolated, noTemplate) {
                var dataName = isolated ? noTemplate ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
                $element.data(dataName, scope);
            } : noop;
            compile.$$addScopeClass = debugInfoEnabled ? function($element, isolated) {
                safeAddClass($element, isolated ? "ng-isolate-scope" : "ng-scope");
            } : noop;
            return compile;
        } ];
    }
    function directiveNormalize(name) {
        return camelCase(name.replace(PREFIX_REGEXP, ""));
    }
    function tokenDifference(str1, str2) {
        var values = "", tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token == tokens2[j]) continue outer;
            values += (values.length > 0 ? " " : "") + token;
        }
        return values;
    }
    function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;
        if (i <= 1) return jqNodes;
        for (;i--; ) {
            jqNodes[i].nodeType === NODE_TYPE_COMMENT && splice.call(jqNodes, i, 1);
        }
        return jqNodes;
    }
    function identifierForController(controller, ident) {
        if (ident && isString(ident)) return ident;
        if (isString(controller)) {
            var match = CNTRL_REG.exec(controller);
            if (match) return match[3];
        }
    }
    function $ControllerProvider() {
        var controllers = {}, globals = !1;
        this.register = function(name, constructor) {
            assertNotHasOwnProperty(name, "controller");
            isObject(name) ? extend(controllers, name) : controllers[name] = constructor;
        };
        this.allowGlobals = function() {
            globals = !0;
        };
        this.$get = [ "$injector", "$window", function($injector, $window) {
            function addIdentifier(locals, identifier, instance, name) {
                if (!locals || !isObject(locals.$scope)) throw minErr("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
                locals.$scope[identifier] = instance;
            }
            return function(expression, locals, later, ident) {
                var instance, match, constructor, identifier;
                later = !0 === later;
                ident && isString(ident) && (identifier = ident);
                if (isString(expression)) {
                    match = expression.match(CNTRL_REG);
                    if (!match) throw $controllerMinErr("ctrlfmt", "Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.", expression);
                    constructor = match[1], identifier = identifier || match[3];
                    expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, !0) || (globals ? getter($window, constructor, !0) : undefined);
                    assertArgFn(expression, constructor, !0);
                }
                if (later) {
                    var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
                    instance = Object.create(controllerPrototype || null);
                    identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                    return extend(function() {
                        var result = $injector.invoke(expression, instance, locals, constructor);
                        if (result !== instance && (isObject(result) || isFunction(result))) {
                            instance = result;
                            identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                        }
                        return instance;
                    }, {
                        instance: instance,
                        identifier: identifier
                    });
                }
                instance = $injector.instantiate(expression, locals, constructor);
                identifier && addIdentifier(locals, identifier, instance, constructor || expression.name);
                return instance;
            };
        } ];
    }
    function $DocumentProvider() {
        this.$get = [ "$window", function(window) {
            return jqLite(window.document);
        } ];
    }
    function $ExceptionHandlerProvider() {
        this.$get = [ "$log", function($log) {
            return function(exception, cause) {
                $log.error.apply($log, arguments);
            };
        } ];
    }
    function serializeValue(v) {
        return isObject(v) ? isDate(v) ? v.toISOString() : toJson(v) : v;
    }
    function $HttpParamSerializerProvider() {
        this.$get = function() {
            return function(params) {
                if (!params) return "";
                var parts = [];
                forEachSorted(params, function(value, key) {
                    null === value || isUndefined(value) || (isArray(value) ? forEach(value, function(v, k) {
                        parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(v)));
                    }) : parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(value))));
                });
                return parts.join("&");
            };
        };
    }
    function $HttpParamSerializerJQLikeProvider() {
        this.$get = function() {
            return function(params) {
                function serialize(toSerialize, prefix, topLevel) {
                    null === toSerialize || isUndefined(toSerialize) || (isArray(toSerialize) ? forEach(toSerialize, function(value, index) {
                        serialize(value, prefix + "[" + (isObject(value) ? index : "") + "]");
                    }) : isObject(toSerialize) && !isDate(toSerialize) ? forEachSorted(toSerialize, function(value, key) {
                        serialize(value, prefix + (topLevel ? "" : "[") + key + (topLevel ? "" : "]"));
                    }) : parts.push(encodeUriQuery(prefix) + "=" + encodeUriQuery(serializeValue(toSerialize))));
                }
                if (!params) return "";
                var parts = [];
                serialize(params, "", !0);
                return parts.join("&");
            };
        };
    }
    function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
            var tempData = data.replace(JSON_PROTECTION_PREFIX, "").trim();
            if (tempData) {
                var contentType = headers("Content-Type");
                (contentType && 0 === contentType.indexOf(APPLICATION_JSON) || isJsonLike(tempData)) && (data = fromJson(tempData));
            }
        }
        return data;
    }
    function isJsonLike(str) {
        var jsonStart = str.match(JSON_START);
        return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
    }
    function parseHeaders(headers) {
        function fillInParsed(key, val) {
            key && (parsed[key] = parsed[key] ? parsed[key] + ", " + val : val);
        }
        var i, parsed = createMap();
        isString(headers) ? forEach(headers.split("\n"), function(line) {
            i = line.indexOf(":");
            fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
        }) : isObject(headers) && forEach(headers, function(headerVal, headerKey) {
            fillInParsed(lowercase(headerKey), trim(headerVal));
        });
        return parsed;
    }
    function headersGetter(headers) {
        var headersObj;
        return function(name) {
            headersObj || (headersObj = parseHeaders(headers));
            if (name) {
                var value = headersObj[lowercase(name)];
                void 0 === value && (value = null);
                return value;
            }
            return headersObj;
        };
    }
    function transformData(data, headers, status, fns) {
        if (isFunction(fns)) return fns(data, headers, status);
        forEach(fns, function(fn) {
            data = fn(data, headers, status);
        });
        return data;
    }
    function isSuccess(status) {
        return 200 <= status && status < 300;
    }
    function $HttpProvider() {
        var defaults = this.defaults = {
            transformResponse: [ defaultHttpResponseTransform ],
            transformRequest: [ function(d) {
                return !isObject(d) || isFile(d) || isBlob(d) || isFormData(d) ? d : toJson(d);
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer"
        }, useApplyAsync = !1;
        this.useApplyAsync = function(value) {
            if (isDefined(value)) {
                useApplyAsync = !!value;
                return this;
            }
            return useApplyAsync;
        };
        var useLegacyPromise = !0;
        this.useLegacyPromiseExtensions = function(value) {
            if (isDefined(value)) {
                useLegacyPromise = !!value;
                return this;
            }
            return useLegacyPromise;
        };
        var interceptorFactories = this.interceptors = [];
        this.$get = [ "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {
            function $http(requestConfig) {
                function transformResponse(response) {
                    var resp = extend({}, response);
                    resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
                    return isSuccess(response.status) ? resp : $q.reject(resp);
                }
                function executeHeaderFns(headers, config) {
                    var headerContent, processedHeaders = {};
                    forEach(headers, function(headerFn, header) {
                        if (isFunction(headerFn)) {
                            headerContent = headerFn(config);
                            null != headerContent && (processedHeaders[header] = headerContent);
                        } else processedHeaders[header] = headerFn;
                    });
                    return processedHeaders;
                }
                if (!angular.isObject(requestConfig)) throw minErr("$http")("badreq", "Http request configuration must be an object.  Received: {0}", requestConfig);
                if (!isString(requestConfig.url)) throw minErr("$http")("badreq", "Http request configuration url must be a string.  Received: {0}", requestConfig.url);
                var config = extend({
                    method: "get",
                    transformRequest: defaults.transformRequest,
                    transformResponse: defaults.transformResponse,
                    paramSerializer: defaults.paramSerializer
                }, requestConfig);
                config.headers = function(config) {
                    var defHeaderName, lowercaseDefHeaderName, reqHeaderName, defHeaders = defaults.headers, reqHeaders = extend({}, config.headers);
                    defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                    defaultHeadersIteration: for (defHeaderName in defHeaders) {
                        lowercaseDefHeaderName = lowercase(defHeaderName);
                        for (reqHeaderName in reqHeaders) if (lowercase(reqHeaderName) === lowercaseDefHeaderName) continue defaultHeadersIteration;
                        reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                    }
                    return executeHeaderFns(reqHeaders, shallowCopy(config));
                }(requestConfig);
                config.method = uppercase(config.method);
                config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;
                var serverRequest = function(config) {
                    var headers = config.headers, reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
                    isUndefined(reqData) && forEach(headers, function(value, header) {
                        "content-type" === lowercase(header) && delete headers[header];
                    });
                    isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials) && (config.withCredentials = defaults.withCredentials);
                    return sendReq(config, reqData).then(transformResponse, transformResponse);
                }, chain = [ serverRequest, undefined ], promise = $q.when(config);
                forEach(reversedInterceptors, function(interceptor) {
                    (interceptor.request || interceptor.requestError) && chain.unshift(interceptor.request, interceptor.requestError);
                    (interceptor.response || interceptor.responseError) && chain.push(interceptor.response, interceptor.responseError);
                });
                for (;chain.length; ) {
                    var thenFn = chain.shift(), rejectFn = chain.shift();
                    promise = promise.then(thenFn, rejectFn);
                }
                if (useLegacyPromise) {
                    promise.success = function(fn) {
                        assertArgFn(fn, "fn");
                        promise.then(function(response) {
                            fn(response.data, response.status, response.headers, config);
                        });
                        return promise;
                    };
                    promise.error = function(fn) {
                        assertArgFn(fn, "fn");
                        promise.then(null, function(response) {
                            fn(response.data, response.status, response.headers, config);
                        });
                        return promise;
                    };
                } else {
                    promise.success = $httpMinErrLegacyFn("success");
                    promise.error = $httpMinErrLegacyFn("error");
                }
                return promise;
            }
            function sendReq(config, reqData) {
                function done(status, response, headersString, statusText) {
                    function resolveHttpPromise() {
                        resolvePromise(response, status, headersString, statusText);
                    }
                    cache && (isSuccess(status) ? cache.put(url, [ status, response, parseHeaders(headersString), statusText ]) : cache.remove(url));
                    if (useApplyAsync) $rootScope.$applyAsync(resolveHttpPromise); else {
                        resolveHttpPromise();
                        $rootScope.$$phase || $rootScope.$apply();
                    }
                }
                function resolvePromise(response, status, headers, statusText) {
                    status = status >= -1 ? status : 0;
                    (isSuccess(status) ? deferred.resolve : deferred.reject)({
                        data: response,
                        status: status,
                        headers: headersGetter(headers),
                        config: config,
                        statusText: statusText
                    });
                }
                function resolvePromiseWithResult(result) {
                    resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
                }
                function removePendingReq() {
                    var idx = $http.pendingRequests.indexOf(config);
                    -1 !== idx && $http.pendingRequests.splice(idx, 1);
                }
                var cache, cachedResp, deferred = $q.defer(), promise = deferred.promise, reqHeaders = config.headers, url = buildUrl(config.url, config.paramSerializer(config.params));
                $http.pendingRequests.push(config);
                promise.then(removePendingReq, removePendingReq);
                !config.cache && !defaults.cache || !1 === config.cache || "GET" !== config.method && "JSONP" !== config.method || (cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache);
                if (cache) {
                    cachedResp = cache.get(url);
                    isDefined(cachedResp) ? isPromiseLike(cachedResp) ? cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult) : isArray(cachedResp) ? resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]) : resolvePromise(cachedResp, 200, {}, "OK") : cache.put(url, promise);
                }
                if (isUndefined(cachedResp)) {
                    var xsrfValue = urlIsSameOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
                    xsrfValue && (reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue);
                    $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
                }
                return promise;
            }
            function buildUrl(url, serializedParams) {
                serializedParams.length > 0 && (url += (-1 == url.indexOf("?") ? "?" : "&") + serializedParams);
                return url;
            }
            var defaultCache = $cacheFactory("$http");
            defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
            var reversedInterceptors = [];
            forEach(interceptorFactories, function(interceptorFactory) {
                reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            });
            $http.pendingRequests = [];
            !function(names) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url
                        }));
                    };
                });
            }("get", "delete", "head", "jsonp");
            !function(name) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, data, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url,
                            data: data
                        }));
                    };
                });
            }("post", "put", "patch");
            $http.defaults = defaults;
            return $http;
        } ];
    }
    function $xhrFactoryProvider() {
        this.$get = function() {
            return function() {
                return new window.XMLHttpRequest();
            };
        };
    }
    function $HttpBackendProvider() {
        this.$get = [ "$browser", "$window", "$document", "$xhrFactory", function($browser, $window, $document, $xhrFactory) {
            return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
        } ];
    }
    function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        function jsonpReq(url, callbackId, done) {
            var script = rawDocument.createElement("script"), callback = null;
            script.type = "text/javascript";
            script.src = url;
            script.async = !0;
            callback = function(event) {
                removeEventListenerFn(script, "load", callback);
                removeEventListenerFn(script, "error", callback);
                rawDocument.body.removeChild(script);
                script = null;
                var status = -1, text = "unknown";
                if (event) {
                    "load" !== event.type || callbacks[callbackId].called || (event = {
                        type: "error"
                    });
                    text = event.type;
                    status = "error" === event.type ? 404 : 200;
                }
                done && done(status, text);
            };
            addEventListenerFn(script, "load", callback);
            addEventListenerFn(script, "error", callback);
            rawDocument.body.appendChild(script);
            return callback;
        }
        return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
            function timeoutRequest() {
                jsonpDone && jsonpDone();
                xhr && xhr.abort();
            }
            function completeRequest(callback, status, response, headersString, statusText) {
                isDefined(timeoutId) && $browserDefer.cancel(timeoutId);
                jsonpDone = xhr = null;
                callback(status, response, headersString, statusText);
                $browser.$$completeOutstandingRequest(noop);
            }
            $browser.$$incOutstandingRequestCount();
            url = url || $browser.url();
            if ("jsonp" == lowercase(method)) {
                var callbackId = "_" + (callbacks.counter++).toString(36);
                callbacks[callbackId] = function(data) {
                    callbacks[callbackId].data = data;
                    callbacks[callbackId].called = !0;
                };
                var jsonpDone = jsonpReq(url.replace("JSON_CALLBACK", "angular.callbacks." + callbackId), callbackId, function(status, text) {
                    completeRequest(callback, status, callbacks[callbackId].data, "", text);
                    callbacks[callbackId] = noop;
                });
            } else {
                var xhr = createXhr(method, url);
                xhr.open(method, url, !0);
                forEach(headers, function(value, key) {
                    isDefined(value) && xhr.setRequestHeader(key, value);
                });
                xhr.onload = function() {
                    var statusText = xhr.statusText || "", response = "response" in xhr ? xhr.response : xhr.responseText, status = 1223 === xhr.status ? 204 : xhr.status;
                    0 === status && (status = response ? 200 : "file" == urlResolve(url).protocol ? 404 : 0);
                    completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText);
                };
                var requestError = function() {
                    completeRequest(callback, -1, null, null, "");
                };
                xhr.onerror = requestError;
                xhr.onabort = requestError;
                withCredentials && (xhr.withCredentials = !0);
                if (responseType) try {
                    xhr.responseType = responseType;
                } catch (e) {
                    if ("json" !== responseType) throw e;
                }
                xhr.send(isUndefined(post) ? null : post);
            }
            if (timeout > 0) var timeoutId = $browserDefer(timeoutRequest, timeout); else isPromiseLike(timeout) && timeout.then(timeoutRequest);
        };
    }
    function $InterpolateProvider() {
        var startSymbol = "{{", endSymbol = "}}";
        this.startSymbol = function(value) {
            if (value) {
                startSymbol = value;
                return this;
            }
            return startSymbol;
        };
        this.endSymbol = function(value) {
            if (value) {
                endSymbol = value;
                return this;
            }
            return endSymbol;
        };
        this.$get = [ "$parse", "$exceptionHandler", "$sce", function($parse, $exceptionHandler, $sce) {
            function escape(ch) {
                return "\\\\\\" + ch;
            }
            function unescapeText(text) {
                return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
            }
            function stringify(value) {
                if (null == value) return "";
                switch (typeof value) {
                  case "string":
                    break;

                  case "number":
                    value = "" + value;
                    break;

                  default:
                    value = toJson(value);
                }
                return value;
            }
            function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
                function parseStringifyInterceptor(value) {
                    try {
                        value = getValue(value);
                        return allOrNothing && !isDefined(value) ? value : stringify(value);
                    } catch (err) {
                        $exceptionHandler($interpolateMinErr.interr(text, err));
                    }
                }
                allOrNothing = !!allOrNothing;
                for (var startIndex, endIndex, exp, index = 0, expressions = [], parseFns = [], textLength = text.length, concat = [], expressionPositions = []; index < textLength; ) {
                    if (-1 == (startIndex = text.indexOf(startSymbol, index)) || -1 == (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength))) {
                        index !== textLength && concat.push(unescapeText(text.substring(index)));
                        break;
                    }
                    index !== startIndex && concat.push(unescapeText(text.substring(index, startIndex)));
                    exp = text.substring(startIndex + startSymbolLength, endIndex);
                    expressions.push(exp);
                    parseFns.push($parse(exp, parseStringifyInterceptor));
                    index = endIndex + endSymbolLength;
                    expressionPositions.push(concat.length);
                    concat.push("");
                }
                trustedContext && concat.length > 1 && $interpolateMinErr.throwNoconcat(text);
                if (!mustHaveExpression || expressions.length) {
                    var compute = function(values) {
                        for (var i = 0, ii = expressions.length; i < ii; i++) {
                            if (allOrNothing && isUndefined(values[i])) return;
                            concat[expressionPositions[i]] = values[i];
                        }
                        return concat.join("");
                    }, getValue = function(value) {
                        return trustedContext ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
                    };
                    return extend(function(context) {
                        var i = 0, ii = expressions.length, values = new Array(ii);
                        try {
                            for (;i < ii; i++) values[i] = parseFns[i](context);
                            return compute(values);
                        } catch (err) {
                            $exceptionHandler($interpolateMinErr.interr(text, err));
                        }
                    }, {
                        exp: text,
                        expressions: expressions,
                        $$watchDelegate: function(scope, listener) {
                            var lastValue;
                            return scope.$watchGroup(parseFns, function(values, oldValues) {
                                var currValue = compute(values);
                                isFunction(listener) && listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                                lastValue = currValue;
                            });
                        }
                    });
                }
            }
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), "g"), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), "g");
            $interpolate.startSymbol = function() {
                return startSymbol;
            };
            $interpolate.endSymbol = function() {
                return endSymbol;
            };
            return $interpolate;
        } ];
    }
    function $IntervalProvider() {
        this.$get = [ "$rootScope", "$window", "$q", "$$q", function($rootScope, $window, $q, $$q) {
            function interval(fn, delay, count, invokeApply) {
                var hasParams = arguments.length > 4, args = hasParams ? sliceArgs(arguments, 4) : [], setInterval = $window.setInterval, clearInterval = $window.clearInterval, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                count = isDefined(count) ? count : 0;
                promise.then(null, null, hasParams ? function() {
                    fn.apply(null, args);
                } : fn);
                promise.$$intervalId = setInterval(function() {
                    deferred.notify(iteration++);
                    if (count > 0 && iteration >= count) {
                        deferred.resolve(iteration);
                        clearInterval(promise.$$intervalId);
                        delete intervals[promise.$$intervalId];
                    }
                    skipApply || $rootScope.$apply();
                }, delay);
                intervals[promise.$$intervalId] = deferred;
                return promise;
            }
            var intervals = {};
            interval.cancel = function(promise) {
                if (promise && promise.$$intervalId in intervals) {
                    intervals[promise.$$intervalId].reject("canceled");
                    $window.clearInterval(promise.$$intervalId);
                    delete intervals[promise.$$intervalId];
                    return !0;
                }
                return !1;
            };
            return interval;
        } ];
    }
    function encodePath(path) {
        for (var segments = path.split("/"), i = segments.length; i--; ) segments[i] = encodeUriSegment(segments[i]);
        return segments.join("/");
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    function parseAppUrl(relativeUrl, locationObj) {
        var prefixed = "/" !== relativeUrl.charAt(0);
        prefixed && (relativeUrl = "/" + relativeUrl);
        var match = urlResolve(relativeUrl);
        locationObj.$$path = decodeURIComponent(prefixed && "/" === match.pathname.charAt(0) ? match.pathname.substring(1) : match.pathname);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        locationObj.$$path && "/" != locationObj.$$path.charAt(0) && (locationObj.$$path = "/" + locationObj.$$path);
    }
    function beginsWith(begin, whole) {
        if (0 === whole.indexOf(begin)) return whole.substr(begin.length);
    }
    function stripHash(url) {
        var index = url.indexOf("#");
        return -1 == index ? url : url.substr(0, index);
    }
    function trimEmptyHash(url) {
        return url.replace(/(#.+)|#$/, "$1");
    }
    function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf("/") + 1);
    }
    function serverBase(url) {
        return url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
    }
    function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = !0;
        basePrefix = basePrefix || "";
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var pathUrl = beginsWith(appBaseNoFile, url);
            if (!isString(pathUrl)) throw $locationMinErr("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            parseAppUrl(pathUrl, this);
            this.$$path || (this.$$path = "/");
            this.$$compose();
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBaseNoFile + this.$$url.substr(1);
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && "#" === relHref[0]) {
                this.hash(relHref.slice(1));
                return !0;
            }
            var appUrl, prevAppUrl, rewrittenUrl;
            if (isDefined(appUrl = beginsWith(appBase, url))) {
                prevAppUrl = appUrl;
                rewrittenUrl = isDefined(appUrl = beginsWith(basePrefix, appUrl)) ? appBaseNoFile + (beginsWith("/", appUrl) || appUrl) : appBase + prevAppUrl;
            } else isDefined(appUrl = beginsWith(appBaseNoFile, url)) ? rewrittenUrl = appBaseNoFile + appUrl : appBaseNoFile == url + "/" && (rewrittenUrl = appBaseNoFile);
            rewrittenUrl && this.$$parse(rewrittenUrl);
            return !!rewrittenUrl;
        };
    }
    function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var withoutHashUrl, withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
            if (isUndefined(withoutBaseUrl) || "#" !== withoutBaseUrl.charAt(0)) if (this.$$html5) withoutHashUrl = withoutBaseUrl; else {
                withoutHashUrl = "";
                if (isUndefined(withoutBaseUrl)) {
                    appBase = url;
                    this.replace();
                }
            } else {
                withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
                isUndefined(withoutHashUrl) && (withoutHashUrl = withoutBaseUrl);
            }
            parseAppUrl(withoutHashUrl, this);
            this.$$path = function(path, url, base) {
                var firstPathSegmentMatch, windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
                0 === url.indexOf(base) && (url = url.replace(base, ""));
                if (windowsFilePathExp.exec(url)) return path;
                firstPathSegmentMatch = windowsFilePathExp.exec(path);
                return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
            }(this.$$path, withoutHashUrl, appBase);
            this.$$compose();
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : "");
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (stripHash(appBase) == stripHash(url)) {
                this.$$parse(url);
                return !0;
            }
            return !1;
        };
    }
    function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = !0;
        LocationHashbangUrl.apply(this, arguments);
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && "#" === relHref[0]) {
                this.hash(relHref.slice(1));
                return !0;
            }
            var rewrittenUrl, appUrl;
            appBase == stripHash(url) ? rewrittenUrl = url : (appUrl = beginsWith(appBaseNoFile, url)) ? rewrittenUrl = appBase + hashPrefix + appUrl : appBaseNoFile === url + "/" && (rewrittenUrl = appBaseNoFile);
            rewrittenUrl && this.$$parse(rewrittenUrl);
            return !!rewrittenUrl;
        };
        this.$$compose = function() {
            var search = toKeyValue(this.$$search), hash = this.$$hash ? "#" + encodeUriSegment(this.$$hash) : "";
            this.$$url = encodePath(this.$$path) + (search ? "?" + search : "") + hash;
            this.$$absUrl = appBase + hashPrefix + this.$$url;
        };
    }
    function locationGetter(property) {
        return function() {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function(value) {
            if (isUndefined(value)) return this[property];
            this[property] = preprocess(value);
            this.$$compose();
            return this;
        };
    }
    function $LocationProvider() {
        var hashPrefix = "", html5Mode = {
            enabled: !1,
            requireBase: !0,
            rewriteLinks: !0
        };
        this.hashPrefix = function(prefix) {
            if (isDefined(prefix)) {
                hashPrefix = prefix;
                return this;
            }
            return hashPrefix;
        };
        this.html5Mode = function(mode) {
            if (isBoolean(mode)) {
                html5Mode.enabled = mode;
                return this;
            }
            if (isObject(mode)) {
                isBoolean(mode.enabled) && (html5Mode.enabled = mode.enabled);
                isBoolean(mode.requireBase) && (html5Mode.requireBase = mode.requireBase);
                isBoolean(mode.rewriteLinks) && (html5Mode.rewriteLinks = mode.rewriteLinks);
                return this;
            }
            return html5Mode;
        };
        this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function($rootScope, $browser, $sniffer, $rootElement, $window) {
            function setBrowserUrlWithFallback(url, replace, state) {
                var oldUrl = $location.url(), oldState = $location.$$state;
                try {
                    $browser.url(url, replace, state);
                    $location.$$state = $browser.state();
                } catch (e) {
                    $location.url(oldUrl);
                    $location.$$state = oldState;
                    throw e;
                }
            }
            function afterLocationChange(oldUrl, oldState) {
                $rootScope.$broadcast("$locationChangeSuccess", $location.absUrl(), oldUrl, $location.$$state, oldState);
            }
            var $location, LocationMode, appBase, baseHref = $browser.baseHref(), initialUrl = $browser.url();
            if (html5Mode.enabled) {
                if (!baseHref && html5Mode.requireBase) throw $locationMinErr("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
                appBase = serverBase(initialUrl) + (baseHref || "/");
                LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
            } else {
                appBase = stripHash(initialUrl);
                LocationMode = LocationHashbangUrl;
            }
            var appBaseNoFile = stripFile(appBase);
            $location = new LocationMode(appBase, appBaseNoFile, "#" + hashPrefix);
            $location.$$parseLinkUrl(initialUrl, initialUrl);
            $location.$$state = $browser.state();
            var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
            $rootElement.on("click", function(event) {
                if (html5Mode.rewriteLinks && !event.ctrlKey && !event.metaKey && !event.shiftKey && 2 != event.which && 2 != event.button) {
                    for (var elm = jqLite(event.target); "a" !== nodeName_(elm[0]); ) if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
                    var absHref = elm.prop("href"), relHref = elm.attr("href") || elm.attr("xlink:href");
                    isObject(absHref) && "[object SVGAnimatedString]" === absHref.toString() && (absHref = urlResolve(absHref.animVal).href);
                    if (!IGNORE_URI_REGEXP.test(absHref) && absHref && !elm.attr("target") && !event.isDefaultPrevented() && $location.$$parseLinkUrl(absHref, relHref)) {
                        event.preventDefault();
                        if ($location.absUrl() != $browser.url()) {
                            $rootScope.$apply();
                            $window.angular["ff-684208-preventDefault"] = !0;
                        }
                    }
                }
            });
            trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl) && $browser.url($location.absUrl(), !0);
            var initializing = !0;
            $browser.onUrlChange(function(newUrl, newState) {
                if (isUndefined(beginsWith(appBaseNoFile, newUrl))) $window.location.href = newUrl; else {
                    $rootScope.$evalAsync(function() {
                        var defaultPrevented, oldUrl = $location.absUrl(), oldState = $location.$$state;
                        newUrl = trimEmptyHash(newUrl);
                        $location.$$parse(newUrl);
                        $location.$$state = newState;
                        defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, newState, oldState).defaultPrevented;
                        if ($location.absUrl() === newUrl) if (defaultPrevented) {
                            $location.$$parse(oldUrl);
                            $location.$$state = oldState;
                            setBrowserUrlWithFallback(oldUrl, !1, oldState);
                        } else {
                            initializing = !1;
                            afterLocationChange(oldUrl, oldState);
                        }
                    });
                    $rootScope.$$phase || $rootScope.$digest();
                }
            });
            $rootScope.$watch(function() {
                var oldUrl = trimEmptyHash($browser.url()), newUrl = trimEmptyHash($location.absUrl()), oldState = $browser.state(), currentReplace = $location.$$replace, urlOrStateChanged = oldUrl !== newUrl || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
                if (initializing || urlOrStateChanged) {
                    initializing = !1;
                    $rootScope.$evalAsync(function() {
                        var newUrl = $location.absUrl(), defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                        if ($location.absUrl() === newUrl) if (defaultPrevented) {
                            $location.$$parse(oldUrl);
                            $location.$$state = oldState;
                        } else {
                            urlOrStateChanged && setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                            afterLocationChange(oldUrl, oldState);
                        }
                    });
                }
                $location.$$replace = !1;
            });
            return $location;
        } ];
    }
    function $LogProvider() {
        var debug = !0, self = this;
        this.debugEnabled = function(flag) {
            if (isDefined(flag)) {
                debug = flag;
                return this;
            }
            return debug;
        };
        this.$get = [ "$window", function($window) {
            function formatError(arg) {
                arg instanceof Error && (arg.stack ? arg = arg.message && -1 === arg.stack.indexOf(arg.message) ? "Error: " + arg.message + "\n" + arg.stack : arg.stack : arg.sourceURL && (arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line));
                return arg;
            }
            function consoleLog(type) {
                var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = !1;
                try {
                    hasApply = !!logFn.apply;
                } catch (e) {}
                return hasApply ? function() {
                    var args = [];
                    forEach(arguments, function(arg) {
                        args.push(formatError(arg));
                    });
                    return logFn.apply(console, args);
                } : function(arg1, arg2) {
                    logFn(arg1, null == arg2 ? "" : arg2);
                };
            }
            return {
                log: consoleLog("log"),
                info: consoleLog("info"),
                warn: consoleLog("warn"),
                error: consoleLog("error"),
                debug: function() {
                    var fn = consoleLog("debug");
                    return function() {
                        debug && fn.apply(self, arguments);
                    };
                }()
            };
        } ];
    }
    function ensureSafeMemberName(name, fullExpression) {
        if ("__defineGetter__" === name || "__defineSetter__" === name || "__lookupGetter__" === name || "__lookupSetter__" === name || "__proto__" === name) throw $parseMinErr("isecfld", "Attempting to access a disallowed field in Angular expressions! Expression: {0}", fullExpression);
        return name;
    }
    function getStringValue(name, fullExpression) {
        name += "";
        if (!isString(name)) throw $parseMinErr("iseccst", "Cannot convert object to primitive value! Expression: {0}", fullExpression);
        return name;
    }
    function ensureSafeObject(obj, fullExpression) {
        if (obj) {
            if (obj.constructor === obj) throw $parseMinErr("isecfn", "Referencing Function in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj.window === obj) throw $parseMinErr("isecwindow", "Referencing the Window in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) throw $parseMinErr("isecdom", "Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj === Object) throw $parseMinErr("isecobj", "Referencing Object in Angular expressions is disallowed! Expression: {0}", fullExpression);
        }
        return obj;
    }
    function ensureSafeFunction(obj, fullExpression) {
        if (obj) {
            if (obj.constructor === obj) throw $parseMinErr("isecfn", "Referencing Function in Angular expressions is disallowed! Expression: {0}", fullExpression);
            if (obj === CALL || obj === APPLY || obj === BIND) throw $parseMinErr("isecff", "Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}", fullExpression);
        }
    }
    function ensureSafeAssignContext(obj, fullExpression) {
        if (obj && (obj === (0).constructor || obj === (!1).constructor || obj === "".constructor || obj === {}.constructor || obj === [].constructor || obj === Function.constructor)) throw $parseMinErr("isecaf", "Assigning to a constructor is disallowed! Expression: {0}", fullExpression);
    }
    function ifDefined(v, d) {
        return void 0 !== v ? v : d;
    }
    function plusFn(l, r) {
        return void 0 === l ? r : void 0 === r ? l : l + r;
    }
    function isStateless($filter, filterName) {
        return !$filter(filterName).$stateful;
    }
    function findConstantAndWatchExpressions(ast, $filter) {
        var allConstants, argsToWatch;
        switch (ast.type) {
          case AST.Program:
            allConstants = !0;
            forEach(ast.body, function(expr) {
                findConstantAndWatchExpressions(expr.expression, $filter);
                allConstants = allConstants && expr.expression.constant;
            });
            ast.constant = allConstants;
            break;

          case AST.Literal:
            ast.constant = !0;
            ast.toWatch = [];
            break;

          case AST.UnaryExpression:
            findConstantAndWatchExpressions(ast.argument, $filter);
            ast.constant = ast.argument.constant;
            ast.toWatch = ast.argument.toWatch;
            break;

          case AST.BinaryExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
            break;

          case AST.LogicalExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.ConditionalExpression:
            findConstantAndWatchExpressions(ast.test, $filter);
            findConstantAndWatchExpressions(ast.alternate, $filter);
            findConstantAndWatchExpressions(ast.consequent, $filter);
            ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.Identifier:
            ast.constant = !1;
            ast.toWatch = [ ast ];
            break;

          case AST.MemberExpression:
            findConstantAndWatchExpressions(ast.object, $filter);
            ast.computed && findConstantAndWatchExpressions(ast.property, $filter);
            ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
            ast.toWatch = [ ast ];
            break;

          case AST.CallExpression:
            allConstants = !!ast.filter && isStateless($filter, ast.callee.name);
            argsToWatch = [];
            forEach(ast.arguments, function(expr) {
                findConstantAndWatchExpressions(expr, $filter);
                allConstants = allConstants && expr.constant;
                expr.constant || argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ ast ];
            break;

          case AST.AssignmentExpression:
            findConstantAndWatchExpressions(ast.left, $filter);
            findConstantAndWatchExpressions(ast.right, $filter);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = [ ast ];
            break;

          case AST.ArrayExpression:
            allConstants = !0;
            argsToWatch = [];
            forEach(ast.elements, function(expr) {
                findConstantAndWatchExpressions(expr, $filter);
                allConstants = allConstants && expr.constant;
                expr.constant || argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ObjectExpression:
            allConstants = !0;
            argsToWatch = [];
            forEach(ast.properties, function(property) {
                findConstantAndWatchExpressions(property.value, $filter);
                allConstants = allConstants && property.value.constant;
                property.value.constant || argsToWatch.push.apply(argsToWatch, property.value.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ThisExpression:
            ast.constant = !1;
            ast.toWatch = [];
        }
    }
    function getInputs(body) {
        if (1 == body.length) {
            var lastExpression = body[0].expression, candidate = lastExpression.toWatch;
            return 1 !== candidate.length ? candidate : candidate[0] !== lastExpression ? candidate : undefined;
        }
    }
    function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
    }
    function assignableAST(ast) {
        if (1 === ast.body.length && isAssignable(ast.body[0].expression)) return {
            type: AST.AssignmentExpression,
            left: ast.body[0].expression,
            right: {
                type: AST.NGValueParameter
            },
            operator: "="
        };
    }
    function isLiteral(ast) {
        return 0 === ast.body.length || 1 === ast.body.length && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
    }
    function isConstant(ast) {
        return ast.constant;
    }
    function ASTCompiler(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
    }
    function ASTInterpreter(astBuilder, $filter) {
        this.astBuilder = astBuilder;
        this.$filter = $filter;
    }
    function isPossiblyDangerousMemberName(name) {
        return "constructor" == name;
    }
    function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
    }
    function $ParseProvider() {
        var cacheDefault = createMap(), cacheExpensive = createMap();
        this.$get = [ "$filter", function($filter) {
            function expressionInputDirtyCheck(newValue, oldValueOfValue) {
                if (null == newValue || null == oldValueOfValue) return newValue === oldValueOfValue;
                if ("object" == typeof newValue) {
                    newValue = getValueOf(newValue);
                    if ("object" == typeof newValue) return !1;
                }
                return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
            }
            function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var lastResult, inputExpressions = parsedExpression.inputs;
                if (1 === inputExpressions.length) {
                    var oldInputValueOf = expressionInputDirtyCheck;
                    inputExpressions = inputExpressions[0];
                    return scope.$watch(function(scope) {
                        var newInputValue = inputExpressions(scope);
                        if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
                            lastResult = parsedExpression(scope, undefined, undefined, [ newInputValue ]);
                            oldInputValueOf = newInputValue && getValueOf(newInputValue);
                        }
                        return lastResult;
                    }, listener, objectEquality, prettyPrintExpression);
                }
                for (var oldInputValueOfValues = [], oldInputValues = [], i = 0, ii = inputExpressions.length; i < ii; i++) {
                    oldInputValueOfValues[i] = expressionInputDirtyCheck;
                    oldInputValues[i] = null;
                }
                return scope.$watch(function(scope) {
                    for (var changed = !1, i = 0, ii = inputExpressions.length; i < ii; i++) {
                        var newInputValue = inputExpressions[i](scope);
                        if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
                            oldInputValues[i] = newInputValue;
                            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                        }
                    }
                    changed && (lastResult = parsedExpression(scope, undefined, undefined, oldInputValues));
                    return lastResult;
                }, listener, objectEquality, prettyPrintExpression);
            }
            function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch, lastValue;
                return unwatch = scope.$watch(function(scope) {
                    return parsedExpression(scope);
                }, function(value, old, scope) {
                    lastValue = value;
                    isFunction(listener) && listener.apply(this, arguments);
                    isDefined(value) && scope.$$postDigest(function() {
                        isDefined(lastValue) && unwatch();
                    });
                }, objectEquality);
            }
            function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                function isAllDefined(value) {
                    var allDefined = !0;
                    forEach(value, function(val) {
                        isDefined(val) || (allDefined = !1);
                    });
                    return allDefined;
                }
                var unwatch, lastValue;
                return unwatch = scope.$watch(function(scope) {
                    return parsedExpression(scope);
                }, function(value, old, scope) {
                    lastValue = value;
                    isFunction(listener) && listener.call(this, value, old, scope);
                    isAllDefined(value) && scope.$$postDigest(function() {
                        isAllDefined(lastValue) && unwatch();
                    });
                }, objectEquality);
            }
            function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch;
                return unwatch = scope.$watch(function(scope) {
                    return parsedExpression(scope);
                }, function(value, old, scope) {
                    isFunction(listener) && listener.apply(this, arguments);
                    unwatch();
                }, objectEquality);
            }
            function addInterceptor(parsedExpression, interceptorFn) {
                if (!interceptorFn) return parsedExpression;
                var watchDelegate = parsedExpression.$$watchDelegate, useInputs = !1, regularWatch = watchDelegate !== oneTimeLiteralWatchDelegate && watchDelegate !== oneTimeWatchDelegate, fn = regularWatch ? function(scope, locals, assign, inputs) {
                    var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
                    return interceptorFn(value, scope, locals);
                } : function(scope, locals, assign, inputs) {
                    var value = parsedExpression(scope, locals, assign, inputs), result = interceptorFn(value, scope, locals);
                    return isDefined(value) ? result : value;
                };
                if (parsedExpression.$$watchDelegate && parsedExpression.$$watchDelegate !== inputsWatchDelegate) fn.$$watchDelegate = parsedExpression.$$watchDelegate; else if (!interceptorFn.$stateful) {
                    fn.$$watchDelegate = inputsWatchDelegate;
                    useInputs = !parsedExpression.inputs;
                    fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [ parsedExpression ];
                }
                return fn;
            }
            var noUnsafeEval = csp().noUnsafeEval, $parseOptions = {
                csp: noUnsafeEval,
                expensiveChecks: !1
            }, $parseOptionsExpensive = {
                csp: noUnsafeEval,
                expensiveChecks: !0
            };
            return function(exp, interceptorFn, expensiveChecks) {
                var parsedExpression, oneTime, cacheKey;
                switch (typeof exp) {
                  case "string":
                    exp = exp.trim();
                    cacheKey = exp;
                    var cache = expensiveChecks ? cacheExpensive : cacheDefault;
                    parsedExpression = cache[cacheKey];
                    if (!parsedExpression) {
                        if (":" === exp.charAt(0) && ":" === exp.charAt(1)) {
                            oneTime = !0;
                            exp = exp.substring(2);
                        }
                        var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions, lexer = new Lexer(parseOptions);
                        parsedExpression = new Parser(lexer, $filter, parseOptions).parse(exp);
                        parsedExpression.constant ? parsedExpression.$$watchDelegate = constantWatchDelegate : oneTime ? parsedExpression.$$watchDelegate = parsedExpression.literal ? oneTimeLiteralWatchDelegate : oneTimeWatchDelegate : parsedExpression.inputs && (parsedExpression.$$watchDelegate = inputsWatchDelegate);
                        cache[cacheKey] = parsedExpression;
                    }
                    return addInterceptor(parsedExpression, interceptorFn);

                  case "function":
                    return addInterceptor(exp, interceptorFn);

                  default:
                    return addInterceptor(noop, interceptorFn);
                }
            };
        } ];
    }
    function $QProvider() {
        this.$get = [ "$rootScope", "$exceptionHandler", function($rootScope, $exceptionHandler) {
            return qFactory(function(callback) {
                $rootScope.$evalAsync(callback);
            }, $exceptionHandler);
        } ];
    }
    function $$QProvider() {
        this.$get = [ "$browser", "$exceptionHandler", function($browser, $exceptionHandler) {
            return qFactory(function(callback) {
                $browser.defer(callback);
            }, $exceptionHandler);
        } ];
    }
    function qFactory(nextTick, exceptionHandler) {
        function callOnce(self, resolveFn, rejectFn) {
            function wrap(fn) {
                return function(value) {
                    if (!called) {
                        called = !0;
                        fn.call(self, value);
                    }
                };
            }
            var called = !1;
            return [ wrap(resolveFn), wrap(rejectFn) ];
        }
        function Promise() {
            this.$$state = {
                status: 0
            };
        }
        function simpleBind(context, fn) {
            return function(value) {
                fn.call(context, value);
            };
        }
        function processQueue(state) {
            var fn, deferred, pending;
            pending = state.pending;
            state.processScheduled = !1;
            state.pending = undefined;
            for (var i = 0, ii = pending.length; i < ii; ++i) {
                deferred = pending[i][0];
                fn = pending[i][state.status];
                try {
                    isFunction(fn) ? deferred.resolve(fn(state.value)) : 1 === state.status ? deferred.resolve(state.value) : deferred.reject(state.value);
                } catch (e) {
                    deferred.reject(e);
                    exceptionHandler(e);
                }
            }
        }
        function scheduleProcessQueue(state) {
            if (!state.processScheduled && state.pending) {
                state.processScheduled = !0;
                nextTick(function() {
                    processQueue(state);
                });
            }
        }
        function Deferred() {
            this.promise = new Promise();
            this.resolve = simpleBind(this, this.resolve);
            this.reject = simpleBind(this, this.reject);
            this.notify = simpleBind(this, this.notify);
        }
        function all(promises) {
            var deferred = new Deferred(), counter = 0, results = isArray(promises) ? [] : {};
            forEach(promises, function(promise, key) {
                counter++;
                when(promise).then(function(value) {
                    if (!results.hasOwnProperty(key)) {
                        results[key] = value;
                        --counter || deferred.resolve(results);
                    }
                }, function(reason) {
                    results.hasOwnProperty(key) || deferred.reject(reason);
                });
            });
            0 === counter && deferred.resolve(results);
            return deferred.promise;
        }
        var $qMinErr = minErr("$q", TypeError), defer = function() {
            return new Deferred();
        };
        extend(Promise.prototype, {
            then: function(onFulfilled, onRejected, progressBack) {
                if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) return this;
                var result = new Deferred();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([ result, onFulfilled, onRejected, progressBack ]);
                this.$$state.status > 0 && scheduleProcessQueue(this.$$state);
                return result.promise;
            },
            catch: function(callback) {
                return this.then(null, callback);
            },
            finally: function(callback, progressBack) {
                return this.then(function(value) {
                    return handleCallback(value, !0, callback);
                }, function(error) {
                    return handleCallback(error, !1, callback);
                }, progressBack);
            }
        });
        extend(Deferred.prototype, {
            resolve: function(val) {
                this.promise.$$state.status || (val === this.promise ? this.$$reject($qMinErr("qcycle", "Expected promise to be resolved with value other than itself '{0}'", val)) : this.$$resolve(val));
            },
            $$resolve: function(val) {
                var then, fns;
                fns = callOnce(this, this.$$resolve, this.$$reject);
                try {
                    (isObject(val) || isFunction(val)) && (then = val && val.then);
                    if (isFunction(then)) {
                        this.promise.$$state.status = -1;
                        then.call(val, fns[0], fns[1], this.notify);
                    } else {
                        this.promise.$$state.value = val;
                        this.promise.$$state.status = 1;
                        scheduleProcessQueue(this.promise.$$state);
                    }
                } catch (e) {
                    fns[1](e);
                    exceptionHandler(e);
                }
            },
            reject: function(reason) {
                this.promise.$$state.status || this.$$reject(reason);
            },
            $$reject: function(reason) {
                this.promise.$$state.value = reason;
                this.promise.$$state.status = 2;
                scheduleProcessQueue(this.promise.$$state);
            },
            notify: function(progress) {
                var callbacks = this.promise.$$state.pending;
                this.promise.$$state.status <= 0 && callbacks && callbacks.length && nextTick(function() {
                    for (var callback, result, i = 0, ii = callbacks.length; i < ii; i++) {
                        result = callbacks[i][0];
                        callback = callbacks[i][3];
                        try {
                            result.notify(isFunction(callback) ? callback(progress) : progress);
                        } catch (e) {
                            exceptionHandler(e);
                        }
                    }
                });
            }
        });
        var reject = function(reason) {
            var result = new Deferred();
            result.reject(reason);
            return result.promise;
        }, makePromise = function(value, resolved) {
            var result = new Deferred();
            resolved ? result.resolve(value) : result.reject(value);
            return result.promise;
        }, handleCallback = function(value, isResolved, callback) {
            var callbackOutput = null;
            try {
                isFunction(callback) && (callbackOutput = callback());
            } catch (e) {
                return makePromise(e, !1);
            }
            return isPromiseLike(callbackOutput) ? callbackOutput.then(function() {
                return makePromise(value, isResolved);
            }, function(error) {
                return makePromise(error, !1);
            }) : makePromise(value, isResolved);
        }, when = function(value, callback, errback, progressBack) {
            var result = new Deferred();
            result.resolve(value);
            return result.promise.then(callback, errback, progressBack);
        }, resolve = when, $Q = function Q(resolver) {
            function resolveFn(value) {
                deferred.resolve(value);
            }
            function rejectFn(reason) {
                deferred.reject(reason);
            }
            if (!isFunction(resolver)) throw $qMinErr("norslvr", "Expected resolverFn, got '{0}'", resolver);
            if (!(this instanceof Q)) return new Q(resolver);
            var deferred = new Deferred();
            resolver(resolveFn, rejectFn);
            return deferred.promise;
        };
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = all;
        return $Q;
    }
    function $$RAFProvider() {
        this.$get = [ "$window", "$timeout", function($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame, cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame, rafSupported = !!requestAnimationFrame, raf = rafSupported ? function(fn) {
                var id = requestAnimationFrame(fn);
                return function() {
                    cancelAnimationFrame(id);
                };
            } : function(fn) {
                var timer = $timeout(fn, 16.66, !1);
                return function() {
                    $timeout.cancel(timer);
                };
            };
            raf.supported = rafSupported;
            return raf;
        } ];
    }
    function $RootScopeProvider() {
        function createChildScopeClass(parent) {
            function ChildScope() {
                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$id = nextUid();
                this.$$ChildScope = null;
            }
            ChildScope.prototype = parent;
            return ChildScope;
        }
        var TTL = 10, $rootScopeMinErr = minErr("$rootScope"), lastDirtyWatch = null, applyAsyncId = null;
        this.digestTtl = function(value) {
            arguments.length && (TTL = value);
            return TTL;
        };
        this.$get = [ "$injector", "$exceptionHandler", "$parse", "$browser", function($injector, $exceptionHandler, $parse, $browser) {
            function destroyChildScope($event) {
                $event.currentScope.$$destroyed = !0;
            }
            function cleanUpScope($scope) {
                if (9 === msie) {
                    $scope.$$childHead && cleanUpScope($scope.$$childHead);
                    $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
                }
                $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead = $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
            }
            function Scope() {
                this.$id = nextUid();
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed = !1;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null;
            }
            function beginPhase(phase) {
                if ($rootScope.$$phase) throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
                $rootScope.$$phase = phase;
            }
            function clearPhase() {
                $rootScope.$$phase = null;
            }
            function incrementWatchersCount(current, count) {
                do {
                    current.$$watchersCount += count;
                } while (current = current.$parent);
            }
            function decrementListenerCount(current, count, name) {
                do {
                    current.$$listenerCount[name] -= count;
                    0 === current.$$listenerCount[name] && delete current.$$listenerCount[name];
                } while (current = current.$parent);
            }
            function initWatchVal() {}
            function flushApplyAsync() {
                for (;applyAsyncQueue.length; ) try {
                    applyAsyncQueue.shift()();
                } catch (e) {
                    $exceptionHandler(e);
                }
                applyAsyncId = null;
            }
            function scheduleApplyAsync() {
                null === applyAsyncId && (applyAsyncId = $browser.defer(function() {
                    $rootScope.$apply(flushApplyAsync);
                }));
            }
            Scope.prototype = {
                constructor: Scope,
                $new: function(isolate, parent) {
                    var child;
                    parent = parent || this;
                    if (isolate) {
                        child = new Scope();
                        child.$root = this.$root;
                    } else {
                        this.$$ChildScope || (this.$$ChildScope = createChildScopeClass(this));
                        child = new this.$$ChildScope();
                    }
                    child.$parent = parent;
                    child.$$prevSibling = parent.$$childTail;
                    if (parent.$$childHead) {
                        parent.$$childTail.$$nextSibling = child;
                        parent.$$childTail = child;
                    } else parent.$$childHead = parent.$$childTail = child;
                    (isolate || parent != this) && child.$on("$destroy", destroyChildScope);
                    return child;
                },
                $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
                    var get = $parse(watchExp);
                    if (get.$$watchDelegate) return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
                    var scope = this, array = scope.$$watchers, watcher = {
                        fn: listener,
                        last: initWatchVal,
                        get: get,
                        exp: prettyPrintExpression || watchExp,
                        eq: !!objectEquality
                    };
                    lastDirtyWatch = null;
                    isFunction(listener) || (watcher.fn = noop);
                    array || (array = scope.$$watchers = []);
                    array.unshift(watcher);
                    incrementWatchersCount(this, 1);
                    return function() {
                        arrayRemove(array, watcher) >= 0 && incrementWatchersCount(scope, -1);
                        lastDirtyWatch = null;
                    };
                },
                $watchGroup: function(watchExpressions, listener) {
                    function watchGroupAction() {
                        changeReactionScheduled = !1;
                        if (firstRun) {
                            firstRun = !1;
                            listener(newValues, newValues, self);
                        } else listener(newValues, oldValues, self);
                    }
                    var oldValues = new Array(watchExpressions.length), newValues = new Array(watchExpressions.length), deregisterFns = [], self = this, changeReactionScheduled = !1, firstRun = !0;
                    if (!watchExpressions.length) {
                        var shouldCall = !0;
                        self.$evalAsync(function() {
                            shouldCall && listener(newValues, newValues, self);
                        });
                        return function() {
                            shouldCall = !1;
                        };
                    }
                    if (1 === watchExpressions.length) return this.$watch(watchExpressions[0], function(value, oldValue, scope) {
                        newValues[0] = value;
                        oldValues[0] = oldValue;
                        listener(newValues, value === oldValue ? newValues : oldValues, scope);
                    });
                    forEach(watchExpressions, function(expr, i) {
                        var unwatchFn = self.$watch(expr, function(value, oldValue) {
                            newValues[i] = value;
                            oldValues[i] = oldValue;
                            if (!changeReactionScheduled) {
                                changeReactionScheduled = !0;
                                self.$evalAsync(watchGroupAction);
                            }
                        });
                        deregisterFns.push(unwatchFn);
                    });
                    return function() {
                        for (;deregisterFns.length; ) deregisterFns.shift()();
                    };
                },
                $watchCollection: function(obj, listener) {
                    function $watchCollectionInterceptor(_value) {
                        newValue = _value;
                        var newLength, key, bothNaN, newItem, oldItem;
                        if (!isUndefined(newValue)) {
                            if (isObject(newValue)) if (isArrayLike(newValue)) {
                                if (oldValue !== internalArray) {
                                    oldValue = internalArray;
                                    oldLength = oldValue.length = 0;
                                    changeDetected++;
                                }
                                newLength = newValue.length;
                                if (oldLength !== newLength) {
                                    changeDetected++;
                                    oldValue.length = oldLength = newLength;
                                }
                                for (var i = 0; i < newLength; i++) {
                                    oldItem = oldValue[i];
                                    newItem = newValue[i];
                                    bothNaN = oldItem !== oldItem && newItem !== newItem;
                                    if (!bothNaN && oldItem !== newItem) {
                                        changeDetected++;
                                        oldValue[i] = newItem;
                                    }
                                }
                            } else {
                                if (oldValue !== internalObject) {
                                    oldValue = internalObject = {};
                                    oldLength = 0;
                                    changeDetected++;
                                }
                                newLength = 0;
                                for (key in newValue) if (hasOwnProperty.call(newValue, key)) {
                                    newLength++;
                                    newItem = newValue[key];
                                    oldItem = oldValue[key];
                                    if (key in oldValue) {
                                        bothNaN = oldItem !== oldItem && newItem !== newItem;
                                        if (!bothNaN && oldItem !== newItem) {
                                            changeDetected++;
                                            oldValue[key] = newItem;
                                        }
                                    } else {
                                        oldLength++;
                                        oldValue[key] = newItem;
                                        changeDetected++;
                                    }
                                }
                                if (oldLength > newLength) {
                                    changeDetected++;
                                    for (key in oldValue) if (!hasOwnProperty.call(newValue, key)) {
                                        oldLength--;
                                        delete oldValue[key];
                                    }
                                }
                            } else if (oldValue !== newValue) {
                                oldValue = newValue;
                                changeDetected++;
                            }
                            return changeDetected;
                        }
                    }
                    function $watchCollectionAction() {
                        if (initRun) {
                            initRun = !1;
                            listener(newValue, newValue, self);
                        } else listener(newValue, veryOldValue, self);
                        if (trackVeryOldValue) if (isObject(newValue)) if (isArrayLike(newValue)) {
                            veryOldValue = new Array(newValue.length);
                            for (var i = 0; i < newValue.length; i++) veryOldValue[i] = newValue[i];
                        } else {
                            veryOldValue = {};
                            for (var key in newValue) hasOwnProperty.call(newValue, key) && (veryOldValue[key] = newValue[key]);
                        } else veryOldValue = newValue;
                    }
                    $watchCollectionInterceptor.$stateful = !0;
                    var newValue, oldValue, veryOldValue, self = this, trackVeryOldValue = listener.length > 1, changeDetected = 0, changeDetector = $parse(obj, $watchCollectionInterceptor), internalArray = [], internalObject = {}, initRun = !0, oldLength = 0;
                    return this.$watch(changeDetector, $watchCollectionAction);
                },
                $digest: function() {
                    var watch, value, last, watchers, length, dirty, next, current, logIdx, asyncTask, ttl = TTL, target = this, watchLog = [];
                    beginPhase("$digest");
                    $browser.$$checkUrlChange();
                    if (this === $rootScope && null !== applyAsyncId) {
                        $browser.defer.cancel(applyAsyncId);
                        flushApplyAsync();
                    }
                    lastDirtyWatch = null;
                    do {
                        dirty = !1;
                        current = target;
                        for (;asyncQueue.length; ) {
                            try {
                                asyncTask = asyncQueue.shift();
                                asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                            lastDirtyWatch = null;
                        }
                        traverseScopesLoop: do {
                            if (watchers = current.$$watchers) {
                                length = watchers.length;
                                for (;length--; ) try {
                                    watch = watchers[length];
                                    if (watch) if ((value = watch.get(current)) === (last = watch.last) || (watch.eq ? equals(value, last) : "number" == typeof value && "number" == typeof last && isNaN(value) && isNaN(last))) {
                                        if (watch === lastDirtyWatch) {
                                            dirty = !1;
                                            break traverseScopesLoop;
                                        }
                                    } else {
                                        dirty = !0;
                                        lastDirtyWatch = watch;
                                        watch.last = watch.eq ? copy(value, null) : value;
                                        watch.fn(value, last === initWatchVal ? value : last, current);
                                        if (ttl < 5) {
                                            logIdx = 4 - ttl;
                                            watchLog[logIdx] || (watchLog[logIdx] = []);
                                            watchLog[logIdx].push({
                                                msg: isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                                newVal: value,
                                                oldVal: last
                                            });
                                        }
                                    }
                                } catch (e) {
                                    $exceptionHandler(e);
                                }
                            }
                            if (!(next = current.$$watchersCount && current.$$childHead || current !== target && current.$$nextSibling)) for (;current !== target && !(next = current.$$nextSibling); ) current = current.$parent;
                        } while (current = next);
                        if ((dirty || asyncQueue.length) && !ttl--) {
                            clearPhase();
                            throw $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", TTL, watchLog);
                        }
                    } while (dirty || asyncQueue.length);
                    clearPhase();
                    for (;postDigestQueue.length; ) try {
                        postDigestQueue.shift()();
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var parent = this.$parent;
                        this.$broadcast("$destroy");
                        this.$$destroyed = !0;
                        this === $rootScope && $browser.$$applicationDestroyed();
                        incrementWatchersCount(this, -this.$$watchersCount);
                        for (var eventName in this.$$listenerCount) decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                        parent && parent.$$childHead == this && (parent.$$childHead = this.$$nextSibling);
                        parent && parent.$$childTail == this && (parent.$$childTail = this.$$prevSibling);
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                        this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                        this.$on = this.$watch = this.$watchGroup = function() {
                            return noop;
                        };
                        this.$$listeners = {};
                        this.$$nextSibling = null;
                        cleanUpScope(this);
                    }
                },
                $eval: function(expr, locals) {
                    return $parse(expr)(this, locals);
                },
                $evalAsync: function(expr, locals) {
                    $rootScope.$$phase || asyncQueue.length || $browser.defer(function() {
                        asyncQueue.length && $rootScope.$digest();
                    });
                    asyncQueue.push({
                        scope: this,
                        expression: expr,
                        locals: locals
                    });
                },
                $$postDigest: function(fn) {
                    postDigestQueue.push(fn);
                },
                $apply: function(expr) {
                    try {
                        beginPhase("$apply");
                        try {
                            return this.$eval(expr);
                        } finally {
                            clearPhase();
                        }
                    } catch (e) {
                        $exceptionHandler(e);
                    } finally {
                        try {
                            $rootScope.$digest();
                        } catch (e) {
                            $exceptionHandler(e);
                            throw e;
                        }
                    }
                },
                $applyAsync: function(expr) {
                    function $applyAsyncExpression() {
                        scope.$eval(expr);
                    }
                    var scope = this;
                    expr && applyAsyncQueue.push($applyAsyncExpression);
                    scheduleApplyAsync();
                },
                $on: function(name, listener) {
                    var namedListeners = this.$$listeners[name];
                    namedListeners || (this.$$listeners[name] = namedListeners = []);
                    namedListeners.push(listener);
                    var current = this;
                    do {
                        current.$$listenerCount[name] || (current.$$listenerCount[name] = 0);
                        current.$$listenerCount[name]++;
                    } while (current = current.$parent);
                    var self = this;
                    return function() {
                        var indexOfListener = namedListeners.indexOf(listener);
                        if (-1 !== indexOfListener) {
                            namedListeners[indexOfListener] = null;
                            decrementListenerCount(self, 1, name);
                        }
                    };
                },
                $emit: function(name, args) {
                    var namedListeners, i, length, empty = [], scope = this, stopPropagation = !1, event = {
                        name: name,
                        targetScope: scope,
                        stopPropagation: function() {
                            stopPropagation = !0;
                        },
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, listenerArgs = concat([ event ], arguments, 1);
                    do {
                        namedListeners = scope.$$listeners[name] || empty;
                        event.currentScope = scope;
                        for (i = 0, length = namedListeners.length; i < length; i++) if (namedListeners[i]) try {
                            namedListeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else {
                            namedListeners.splice(i, 1);
                            i--;
                            length--;
                        }
                        if (stopPropagation) {
                            event.currentScope = null;
                            return event;
                        }
                        scope = scope.$parent;
                    } while (scope);
                    event.currentScope = null;
                    return event;
                },
                $broadcast: function(name, args) {
                    var target = this, current = target, next = target, event = {
                        name: name,
                        targetScope: target,
                        preventDefault: function() {
                            event.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    };
                    if (!target.$$listenerCount[name]) return event;
                    for (var listeners, i, length, listenerArgs = concat([ event ], arguments, 1); current = next; ) {
                        event.currentScope = current;
                        listeners = current.$$listeners[name] || [];
                        for (i = 0, length = listeners.length; i < length; i++) if (listeners[i]) try {
                            listeners[i].apply(null, listenerArgs);
                        } catch (e) {
                            $exceptionHandler(e);
                        } else {
                            listeners.splice(i, 1);
                            i--;
                            length--;
                        }
                        if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) for (;current !== target && !(next = current.$$nextSibling); ) current = current.$parent;
                    }
                    event.currentScope = null;
                    return event;
                }
            };
            var $rootScope = new Scope(), asyncQueue = $rootScope.$$asyncQueue = [], postDigestQueue = $rootScope.$$postDigestQueue = [], applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
            return $rootScope;
        } ];
    }
    function $$SanitizeUriProvider() {
        var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                aHrefSanitizationWhitelist = regexp;
                return this;
            }
            return aHrefSanitizationWhitelist;
        };
        this.imgSrcSanitizationWhitelist = function(regexp) {
            if (isDefined(regexp)) {
                imgSrcSanitizationWhitelist = regexp;
                return this;
            }
            return imgSrcSanitizationWhitelist;
        };
        this.$get = function() {
            return function(uri, isImage) {
                var normalizedVal, regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
                normalizedVal = urlResolve(uri).href;
                return "" === normalizedVal || normalizedVal.match(regex) ? uri : "unsafe:" + normalizedVal;
            };
        };
    }
    function adjustMatcher(matcher) {
        if ("self" === matcher) return matcher;
        if (isString(matcher)) {
            if (matcher.indexOf("***") > -1) throw $sceMinErr("iwcard", "Illegal sequence *** in string matcher.  String: {0}", matcher);
            matcher = escapeForRegexp(matcher).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*");
            return new RegExp("^" + matcher + "$");
        }
        if (isRegExp(matcher)) return new RegExp("^" + matcher.source + "$");
        throw $sceMinErr("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        isDefined(matchers) && forEach(matchers, function(matcher) {
            adjustedMatchers.push(adjustMatcher(matcher));
        });
        return adjustedMatchers;
    }
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        var resourceUrlWhitelist = [ "self" ], resourceUrlBlacklist = [];
        this.resourceUrlWhitelist = function(value) {
            arguments.length && (resourceUrlWhitelist = adjustMatchers(value));
            return resourceUrlWhitelist;
        };
        this.resourceUrlBlacklist = function(value) {
            arguments.length && (resourceUrlBlacklist = adjustMatchers(value));
            return resourceUrlBlacklist;
        };
        this.$get = [ "$injector", function($injector) {
            function matchUrl(matcher, parsedUrl) {
                return "self" === matcher ? urlIsSameOrigin(parsedUrl) : !!matcher.exec(parsedUrl.href);
            }
            function isResourceUrlAllowedByPolicy(url) {
                var i, n, parsedUrl = urlResolve(url.toString()), allowed = !1;
                for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
                    allowed = !0;
                    break;
                }
                if (allowed) for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                    allowed = !1;
                    break;
                }
                return allowed;
            }
            function generateHolderType(Base) {
                var holderType = function(trustedValue) {
                    this.$$unwrapTrustedValue = function() {
                        return trustedValue;
                    };
                };
                Base && (holderType.prototype = new Base());
                holderType.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue();
                };
                holderType.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString();
                };
                return holderType;
            }
            function trustAs(type, trustedValue) {
                var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (!Constructor) throw $sceMinErr("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", type, trustedValue);
                if (null === trustedValue || isUndefined(trustedValue) || "" === trustedValue) return trustedValue;
                if ("string" != typeof trustedValue) throw $sceMinErr("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", type);
                return new Constructor(trustedValue);
            }
            function valueOf(maybeTrusted) {
                return maybeTrusted instanceof trustedValueHolderBase ? maybeTrusted.$$unwrapTrustedValue() : maybeTrusted;
            }
            function getTrusted(type, maybeTrusted) {
                if (null === maybeTrusted || isUndefined(maybeTrusted) || "" === maybeTrusted) return maybeTrusted;
                var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (constructor && maybeTrusted instanceof constructor) return maybeTrusted.$$unwrapTrustedValue();
                if (type === SCE_CONTEXTS.RESOURCE_URL) {
                    if (isResourceUrlAllowedByPolicy(maybeTrusted)) return maybeTrusted;
                    throw $sceMinErr("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", maybeTrusted.toString());
                }
                if (type === SCE_CONTEXTS.HTML) return htmlSanitizer(maybeTrusted);
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            }
            var htmlSanitizer = function(html) {
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            $injector.has("$sanitize") && (htmlSanitizer = $injector.get("$sanitize"));
            var trustedValueHolderBase = generateHolderType(), byType = {};
            byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
            return {
                trustAs: trustAs,
                getTrusted: getTrusted,
                valueOf: valueOf
            };
        } ];
    }
    function $SceProvider() {
        var enabled = !0;
        this.enabled = function(value) {
            arguments.length && (enabled = !!value);
            return enabled;
        };
        this.$get = [ "$parse", "$sceDelegate", function($parse, $sceDelegate) {
            if (enabled && msie < 8) throw $sceMinErr("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            var sce = shallowCopy(SCE_CONTEXTS);
            sce.isEnabled = function() {
                return enabled;
            };
            sce.trustAs = $sceDelegate.trustAs;
            sce.getTrusted = $sceDelegate.getTrusted;
            sce.valueOf = $sceDelegate.valueOf;
            if (!enabled) {
                sce.trustAs = sce.getTrusted = function(type, value) {
                    return value;
                };
                sce.valueOf = identity;
            }
            sce.parseAs = function(type, expr) {
                var parsed = $parse(expr);
                return parsed.literal && parsed.constant ? parsed : $parse(expr, function(value) {
                    return sce.getTrusted(type, value);
                });
            };
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            forEach(SCE_CONTEXTS, function(enumValue, name) {
                var lName = lowercase(name);
                sce[camelCase("parse_as_" + lName)] = function(expr) {
                    return parse(enumValue, expr);
                };
                sce[camelCase("get_trusted_" + lName)] = function(value) {
                    return getTrusted(enumValue, value);
                };
                sce[camelCase("trust_as_" + lName)] = function(value) {
                    return trustAs(enumValue, value);
                };
            });
            return sce;
        } ];
    }
    function $SnifferProvider() {
        this.$get = [ "$window", "$document", function($window, $document) {
            var vendorPrefix, match, eventSupport = {}, android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = !1, animations = !1;
            if (bodyStyle) {
                for (var prop in bodyStyle) if (match = vendorRegex.exec(prop)) {
                    vendorPrefix = match[0];
                    vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
                    break;
                }
                vendorPrefix || (vendorPrefix = "WebkitOpacity" in bodyStyle && "webkit");
                transitions = !!("transition" in bodyStyle || vendorPrefix + "Transition" in bodyStyle);
                animations = !!("animation" in bodyStyle || vendorPrefix + "Animation" in bodyStyle);
                if (android && (!transitions || !animations)) {
                    transitions = isString(bodyStyle.webkitTransition);
                    animations = isString(bodyStyle.webkitAnimation);
                }
            }
            return {
                history: !(!$window.history || !$window.history.pushState || android < 4 || boxee),
                hasEvent: function(event) {
                    if ("input" === event && msie <= 11) return !1;
                    if (isUndefined(eventSupport[event])) {
                        var divElm = document.createElement("div");
                        eventSupport[event] = "on" + event in divElm;
                    }
                    return eventSupport[event];
                },
                csp: csp(),
                vendorPrefix: vendorPrefix,
                transitions: transitions,
                animations: animations,
                android: android
            };
        } ];
    }
    function $TemplateRequestProvider() {
        this.$get = [ "$templateCache", "$http", "$q", "$sce", function($templateCache, $http, $q, $sce) {
            function handleRequestFn(tpl, ignoreRequestError) {
                function handleError(resp) {
                    if (!ignoreRequestError) throw $compileMinErr("tpload", "Failed to load template: {0} (HTTP status: {1} {2})", tpl, resp.status, resp.statusText);
                    return $q.reject(resp);
                }
                handleRequestFn.totalPendingRequests++;
                isString(tpl) && $templateCache.get(tpl) || (tpl = $sce.getTrustedResourceUrl(tpl));
                var transformResponse = $http.defaults && $http.defaults.transformResponse;
                isArray(transformResponse) ? transformResponse = transformResponse.filter(function(transformer) {
                    return transformer !== defaultHttpResponseTransform;
                }) : transformResponse === defaultHttpResponseTransform && (transformResponse = null);
                var httpOptions = {
                    cache: $templateCache,
                    transformResponse: transformResponse
                };
                return $http.get(tpl, httpOptions).finally(function() {
                    handleRequestFn.totalPendingRequests--;
                }).then(function(response) {
                    $templateCache.put(tpl, response.data);
                    return response.data;
                }, handleError);
            }
            handleRequestFn.totalPendingRequests = 0;
            return handleRequestFn;
        } ];
    }
    function $$TestabilityProvider() {
        this.$get = [ "$rootScope", "$browser", "$location", function($rootScope, $browser, $location) {
            var testability = {};
            testability.findBindings = function(element, expression, opt_exactMatch) {
                var bindings = element.getElementsByClassName("ng-binding"), matches = [];
                forEach(bindings, function(binding) {
                    var dataBinding = angular.element(binding).data("$binding");
                    dataBinding && forEach(dataBinding, function(bindingName) {
                        if (opt_exactMatch) {
                            new RegExp("(^|\\s)" + escapeForRegexp(expression) + "(\\s|\\||$)").test(bindingName) && matches.push(binding);
                        } else -1 != bindingName.indexOf(expression) && matches.push(binding);
                    });
                });
                return matches;
            };
            testability.findModels = function(element, expression, opt_exactMatch) {
                for (var prefixes = [ "ng-", "data-ng-", "ng\\:" ], p = 0; p < prefixes.length; ++p) {
                    var attributeEquals = opt_exactMatch ? "=" : "*=", selector = "[" + prefixes[p] + "model" + attributeEquals + '"' + expression + '"]', elements = element.querySelectorAll(selector);
                    if (elements.length) return elements;
                }
            };
            testability.getLocation = function() {
                return $location.url();
            };
            testability.setLocation = function(url) {
                if (url !== $location.url()) {
                    $location.url(url);
                    $rootScope.$digest();
                }
            };
            testability.whenStable = function(callback) {
                $browser.notifyWhenNoOutstandingRequests(callback);
            };
            return testability;
        } ];
    }
    function $TimeoutProvider() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function($rootScope, $browser, $q, $$q, $exceptionHandler) {
            function timeout(fn, delay, invokeApply) {
                if (!isFunction(fn)) {
                    invokeApply = delay;
                    delay = fn;
                    fn = noop;
                }
                var timeoutId, args = sliceArgs(arguments, 3), skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                timeoutId = $browser.defer(function() {
                    try {
                        deferred.resolve(fn.apply(null, args));
                    } catch (e) {
                        deferred.reject(e);
                        $exceptionHandler(e);
                    } finally {
                        delete deferreds[promise.$$timeoutId];
                    }
                    skipApply || $rootScope.$apply();
                }, delay);
                promise.$$timeoutId = timeoutId;
                deferreds[timeoutId] = deferred;
                return promise;
            }
            var deferreds = {};
            timeout.cancel = function(promise) {
                if (promise && promise.$$timeoutId in deferreds) {
                    deferreds[promise.$$timeoutId].reject("canceled");
                    delete deferreds[promise.$$timeoutId];
                    return $browser.defer.cancel(promise.$$timeoutId);
                }
                return !1;
            };
            return timeout;
        } ];
    }
    function urlResolve(url) {
        var href = url;
        if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: "/" === urlParsingNode.pathname.charAt(0) ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    function urlIsSameOrigin(requestUrl) {
        var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
        return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
    }
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    function $$CookieReader($document) {
        function safeDecodeURIComponent(str) {
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return str;
            }
        }
        var rawDocument = $document[0] || {}, lastCookies = {}, lastCookieString = "";
        return function() {
            var cookieArray, cookie, i, index, name, currentCookieString = rawDocument.cookie || "";
            if (currentCookieString !== lastCookieString) {
                lastCookieString = currentCookieString;
                cookieArray = lastCookieString.split("; ");
                lastCookies = {};
                for (i = 0; i < cookieArray.length; i++) {
                    cookie = cookieArray[i];
                    index = cookie.indexOf("=");
                    if (index > 0) {
                        name = safeDecodeURIComponent(cookie.substring(0, index));
                        isUndefined(lastCookies[name]) && (lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1)));
                    }
                }
            }
            return lastCookies;
        };
    }
    function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
    }
    function $FilterProvider($provide) {
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                forEach(name, function(filter, key) {
                    filters[key] = register(key, filter);
                });
                return filters;
            }
            return $provide.factory(name + suffix, factory);
        }
        var suffix = "Filter";
        this.register = register;
        this.$get = [ "$injector", function($injector) {
            return function(name) {
                return $injector.get(name + suffix);
            };
        } ];
        register("currency", currencyFilter);
        register("date", dateFilter);
        register("filter", filterFilter);
        register("json", jsonFilter);
        register("limitTo", limitToFilter);
        register("lowercase", lowercaseFilter);
        register("number", numberFilter);
        register("orderBy", orderByFilter);
        register("uppercase", uppercaseFilter);
    }
    function filterFilter() {
        return function(array, expression, comparator) {
            if (!isArrayLike(array)) {
                if (null == array) return array;
                throw minErr("filter")("notarray", "Expected array but received: {0}", array);
            }
            var predicateFn, matchAgainstAnyProp, expressionType = getTypeForFilter(expression);
            switch (expressionType) {
              case "function":
                predicateFn = expression;
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                matchAgainstAnyProp = !0;

              case "object":
                predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
                break;

              default:
                return array;
            }
            return Array.prototype.filter.call(array, predicateFn);
        };
    }
    function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
        var predicateFn, shouldMatchPrimitives = isObject(expression) && "$" in expression;
        !0 === comparator ? comparator = equals : isFunction(comparator) || (comparator = function(actual, expected) {
            if (isUndefined(actual)) return !1;
            if (null === actual || null === expected) return actual === expected;
            if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) return !1;
            actual = lowercase("" + actual);
            expected = lowercase("" + expected);
            return -1 !== actual.indexOf(expected);
        });
        predicateFn = function(item) {
            return shouldMatchPrimitives && !isObject(item) ? deepCompare(item, expression.$, comparator, !1) : deepCompare(item, expression, comparator, matchAgainstAnyProp);
        };
        return predicateFn;
    }
    function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual), expectedType = getTypeForFilter(expected);
        if ("string" === expectedType && "!" === expected.charAt(0)) return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
        if (isArray(actual)) return actual.some(function(item) {
            return deepCompare(item, expected, comparator, matchAgainstAnyProp);
        });
        switch (actualType) {
          case "object":
            var key;
            if (matchAgainstAnyProp) {
                for (key in actual) if ("$" !== key.charAt(0) && deepCompare(actual[key], expected, comparator, !0)) return !0;
                return !dontMatchWholeObject && deepCompare(actual, expected, comparator, !1);
            }
            if ("object" === expectedType) {
                for (key in expected) {
                    var expectedVal = expected[key];
                    if (!isFunction(expectedVal) && !isUndefined(expectedVal)) {
                        var matchAnyProperty = "$" === key;
                        if (!deepCompare(matchAnyProperty ? actual : actual[key], expectedVal, comparator, matchAnyProperty, matchAnyProperty)) return !1;
                    }
                }
                return !0;
            }
            return comparator(actual, expected);

          case "function":
            return !1;

          default:
            return comparator(actual, expected);
        }
    }
    function getTypeForFilter(val) {
        return null === val ? "null" : typeof val;
    }
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(amount, currencySymbol, fractionSize) {
            isUndefined(currencySymbol) && (currencySymbol = formats.CURRENCY_SYM);
            isUndefined(fractionSize) && (fractionSize = formats.PATTERNS[1].maxFrac);
            return null == amount ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(/\u00A4/g, currencySymbol);
        };
    }
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(number, fractionSize) {
            return null == number ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    function parse(numStr) {
        var digits, numberOfIntegerDigits, i, j, zeros, exponent = 0;
        (numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1 && (numStr = numStr.replace(DECIMAL_SEP, ""));
        if ((i = numStr.search(/e/i)) > 0) {
            numberOfIntegerDigits < 0 && (numberOfIntegerDigits = i);
            numberOfIntegerDigits += +numStr.slice(i + 1);
            numStr = numStr.substring(0, i);
        } else numberOfIntegerDigits < 0 && (numberOfIntegerDigits = numStr.length);
        for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++) ;
        if (i == (zeros = numStr.length)) {
            digits = [ 0 ];
            numberOfIntegerDigits = 1;
        } else {
            zeros--;
            for (;numStr.charAt(zeros) == ZERO_CHAR; ) zeros--;
            numberOfIntegerDigits -= i;
            digits = [];
            for (j = 0; i <= zeros; i++, j++) digits[j] = +numStr.charAt(i);
        }
        if (numberOfIntegerDigits > MAX_DIGITS) {
            digits = digits.splice(0, MAX_DIGITS - 1);
            exponent = numberOfIntegerDigits - 1;
            numberOfIntegerDigits = 1;
        }
        return {
            d: digits,
            e: exponent,
            i: numberOfIntegerDigits
        };
    }
    function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
        var digits = parsedNumber.d, fractionLen = digits.length - parsedNumber.i;
        fractionSize = isUndefined(fractionSize) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
        var roundAt = fractionSize + parsedNumber.i, digit = digits[roundAt];
        if (roundAt > 0) digits.splice(roundAt); else {
            parsedNumber.i = 1;
            digits.length = roundAt = fractionSize + 1;
            for (var i = 0; i < roundAt; i++) digits[i] = 0;
        }
        digit >= 5 && digits[roundAt - 1]++;
        for (;fractionLen < fractionSize; fractionLen++) digits.push(0);
        var carry = digits.reduceRight(function(carry, d, i, digits) {
            d += carry;
            digits[i] = d % 10;
            return Math.floor(d / 10);
        }, 0);
        if (carry) {
            digits.unshift(carry);
            parsedNumber.i++;
        }
    }
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (!isString(number) && !isNumber(number) || isNaN(number)) return "";
        var parsedNumber, isInfinity = !isFinite(number), isZero = !1, numStr = Math.abs(number) + "", formattedText = "";
        if (isInfinity) formattedText = "∞"; else {
            parsedNumber = parse(numStr);
            roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
            var digits = parsedNumber.d, integerLen = parsedNumber.i, exponent = parsedNumber.e, decimals = [];
            isZero = digits.reduce(function(isZero, d) {
                return isZero && !d;
            }, !0);
            for (;integerLen < 0; ) {
                digits.unshift(0);
                integerLen++;
            }
            if (integerLen > 0) decimals = digits.splice(integerLen); else {
                decimals = digits;
                digits = [ 0 ];
            }
            var groups = [];
            digits.length > pattern.lgSize && groups.unshift(digits.splice(-pattern.lgSize).join(""));
            for (;digits.length > pattern.gSize; ) groups.unshift(digits.splice(-pattern.gSize).join(""));
            digits.length && groups.unshift(digits.join(""));
            formattedText = groups.join(groupSep);
            decimals.length && (formattedText += decimalSep + decimals.join(""));
            exponent && (formattedText += "e+" + exponent);
        }
        return number < 0 && !isZero ? pattern.negPre + formattedText + pattern.negSuf : pattern.posPre + formattedText + pattern.posSuf;
    }
    function padNumber(num, digits, trim) {
        var neg = "";
        if (num < 0) {
            neg = "-";
            num = -num;
        }
        num = "" + num;
        for (;num.length < digits; ) num = ZERO_CHAR + num;
        trim && (num = num.substr(num.length - digits));
        return neg + num;
    }
    function dateGetter(name, size, offset, trim) {
        offset = offset || 0;
        return function(date) {
            var value = date["get" + name]();
            (offset > 0 || value > -offset) && (value += offset);
            0 === value && -12 == offset && (value = 12);
            return padNumber(value, size, trim);
        };
    }
    function dateStrGetter(name, shortForm) {
        return function(date, formats) {
            var value = date["get" + name]();
            return formats[uppercase(shortForm ? "SHORT" + name : name)][value];
        };
    }
    function timeZoneGetter(date, formats, offset) {
        var zone = -1 * offset, paddedZone = zone >= 0 ? "+" : "";
        paddedZone += padNumber(Math[zone > 0 ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
        return paddedZone;
    }
    function getFirstThursdayOfYear(year) {
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
    }
    function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
    }
    function weekGetter(size) {
        return function(date) {
            var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date), diff = +thisThurs - +firstThurs;
            return padNumber(1 + Math.round(diff / 6048e5), size);
        };
    }
    function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
    }
    function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
    }
    function longEraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
    }
    function dateFilter($locale) {
        function jsonStringToDate(string) {
            var match;
            if (match = string.match(R_ISO8601_STR)) {
                var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                if (match[9]) {
                    tzHour = toInt(match[9] + match[10]);
                    tzMin = toInt(match[9] + match[11]);
                }
                dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
                var h = toInt(match[4] || 0) - tzHour, m = toInt(match[5] || 0) - tzMin, s = toInt(match[6] || 0), ms = Math.round(1e3 * parseFloat("0." + (match[7] || 0)));
                timeSetter.call(date, h, m, s, ms);
                return date;
            }
            return string;
        }
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(date, format, timezone) {
            var fn, match, text = "", parts = [];
            format = format || "mediumDate";
            format = $locale.DATETIME_FORMATS[format] || format;
            isString(date) && (date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date));
            isNumber(date) && (date = new Date(date));
            if (!isDate(date) || !isFinite(date.getTime())) return date;
            for (;format; ) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = concat(parts, match, 1);
                    format = parts.pop();
                } else {
                    parts.push(format);
                    format = null;
                }
            }
            var dateTimezoneOffset = date.getTimezoneOffset();
            if (timezone) {
                dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
                date = convertTimezoneToLocal(date, timezone, !0);
            }
            forEach(parts, function(value) {
                fn = DATE_FORMATS[value];
                text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : value.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            });
            return text;
        };
    }
    function jsonFilter() {
        return function(object, spacing) {
            isUndefined(spacing) && (spacing = 2);
            return toJson(object, spacing);
        };
    }
    function limitToFilter() {
        return function(input, limit, begin) {
            limit = Math.abs(Number(limit)) === 1 / 0 ? Number(limit) : toInt(limit);
            if (isNaN(limit)) return input;
            isNumber(input) && (input = input.toString());
            if (!isArray(input) && !isString(input)) return input;
            begin = !begin || isNaN(begin) ? 0 : toInt(begin);
            begin = begin < 0 ? Math.max(0, input.length + begin) : begin;
            return limit >= 0 ? input.slice(begin, begin + limit) : 0 === begin ? input.slice(limit, input.length) : input.slice(Math.max(0, begin + limit), begin);
        };
    }
    function orderByFilter($parse) {
        function processPredicates(sortPredicate, reverseOrder) {
            reverseOrder = reverseOrder ? -1 : 1;
            return sortPredicate.map(function(predicate) {
                var descending = 1, get = identity;
                if (isFunction(predicate)) get = predicate; else if (isString(predicate)) {
                    if ("+" == predicate.charAt(0) || "-" == predicate.charAt(0)) {
                        descending = "-" == predicate.charAt(0) ? -1 : 1;
                        predicate = predicate.substring(1);
                    }
                    if ("" !== predicate) {
                        get = $parse(predicate);
                        if (get.constant) {
                            var key = get();
                            get = function(value) {
                                return value[key];
                            };
                        }
                    }
                }
                return {
                    get: get,
                    descending: descending * reverseOrder
                };
            });
        }
        function isPrimitive(value) {
            switch (typeof value) {
              case "number":
              case "boolean":
              case "string":
                return !0;

              default:
                return !1;
            }
        }
        function objectValue(value, index) {
            if ("function" == typeof value.valueOf) {
                value = value.valueOf();
                if (isPrimitive(value)) return value;
            }
            if (hasCustomToString(value)) {
                value = value.toString();
                if (isPrimitive(value)) return value;
            }
            return index;
        }
        function getPredicateValue(value, index) {
            var type = typeof value;
            if (null === value) {
                type = "string";
                value = "null";
            } else "string" === type ? value = value.toLowerCase() : "object" === type && (value = objectValue(value, index));
            return {
                value: value,
                type: type
            };
        }
        function compare(v1, v2) {
            var result = 0;
            v1.type === v2.type ? v1.value !== v2.value && (result = v1.value < v2.value ? -1 : 1) : result = v1.type < v2.type ? -1 : 1;
            return result;
        }
        return function(array, sortPredicate, reverseOrder) {
            function getComparisonObject(value, index) {
                return {
                    value: value,
                    predicateValues: predicates.map(function(predicate) {
                        return getPredicateValue(predicate.get(value), index);
                    })
                };
            }
            function doComparison(v1, v2) {
                for (var result = 0, index = 0, length = predicates.length; index < length; ++index) {
                    result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
                    if (result) break;
                }
                return result;
            }
            if (!isArrayLike(array)) return array;
            isArray(sortPredicate) || (sortPredicate = [ sortPredicate ]);
            0 === sortPredicate.length && (sortPredicate = [ "+" ]);
            var predicates = processPredicates(sortPredicate, reverseOrder);
            predicates.push({
                get: function() {
                    return {};
                },
                descending: reverseOrder ? -1 : 1
            });
            var compareValues = Array.prototype.map.call(array, getComparisonObject);
            compareValues.sort(doComparison);
            array = compareValues.map(function(item) {
                return item.value;
            });
            return array;
        };
    }
    function ngDirective(directive) {
        isFunction(directive) && (directive = {
            link: directive
        });
        directive.restrict = directive.restrict || "AC";
        return valueFn(directive);
    }
    function nullFormRenameControl(control, name) {
        control.$name = name;
    }
    function FormController(element, attrs, $scope, $animate, $interpolate) {
        var form = this, controls = [];
        form.$error = {};
        form.$$success = {};
        form.$pending = undefined;
        form.$name = $interpolate(attrs.name || attrs.ngForm || "")($scope);
        form.$dirty = !1;
        form.$pristine = !0;
        form.$valid = !0;
        form.$invalid = !1;
        form.$submitted = !1;
        form.$$parentForm = nullFormCtrl;
        form.$rollbackViewValue = function() {
            forEach(controls, function(control) {
                control.$rollbackViewValue();
            });
        };
        form.$commitViewValue = function() {
            forEach(controls, function(control) {
                control.$commitViewValue();
            });
        };
        form.$addControl = function(control) {
            assertNotHasOwnProperty(control.$name, "input");
            controls.push(control);
            control.$name && (form[control.$name] = control);
            control.$$parentForm = form;
        };
        form.$$renameControl = function(control, newName) {
            var oldName = control.$name;
            form[oldName] === control && delete form[oldName];
            form[newName] = control;
            control.$name = newName;
        };
        form.$removeControl = function(control) {
            control.$name && form[control.$name] === control && delete form[control.$name];
            forEach(form.$pending, function(value, name) {
                form.$setValidity(name, null, control);
            });
            forEach(form.$error, function(value, name) {
                form.$setValidity(name, null, control);
            });
            forEach(form.$$success, function(value, name) {
                form.$setValidity(name, null, control);
            });
            arrayRemove(controls, control);
            control.$$parentForm = nullFormCtrl;
        };
        addSetValidityMethod({
            ctrl: this,
            $element: element,
            set: function(object, property, controller) {
                var list = object[property];
                if (list) {
                    -1 === list.indexOf(controller) && list.push(controller);
                } else object[property] = [ controller ];
            },
            unset: function(object, property, controller) {
                var list = object[property];
                if (list) {
                    arrayRemove(list, controller);
                    0 === list.length && delete object[property];
                }
            },
            $animate: $animate
        });
        form.$setDirty = function() {
            $animate.removeClass(element, PRISTINE_CLASS);
            $animate.addClass(element, DIRTY_CLASS);
            form.$dirty = !0;
            form.$pristine = !1;
            form.$$parentForm.$setDirty();
        };
        form.$setPristine = function() {
            $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + " " + SUBMITTED_CLASS);
            form.$dirty = !1;
            form.$pristine = !0;
            form.$submitted = !1;
            forEach(controls, function(control) {
                control.$setPristine();
            });
        };
        form.$setUntouched = function() {
            forEach(controls, function(control) {
                control.$setUntouched();
            });
        };
        form.$setSubmitted = function() {
            $animate.addClass(element, SUBMITTED_CLASS);
            form.$submitted = !0;
            form.$$parentForm.$setSubmitted();
        };
    }
    function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function(value) {
            return ctrl.$isEmpty(value) ? value : value.toString();
        });
    }
    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
    }
    function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var type = lowercase(element[0].type);
        if (!$sniffer.android) {
            var composing = !1;
            element.on("compositionstart", function(data) {
                composing = !0;
            });
            element.on("compositionend", function() {
                composing = !1;
                listener();
            });
        }
        var listener = function(ev) {
            if (timeout) {
                $browser.defer.cancel(timeout);
                timeout = null;
            }
            if (!composing) {
                var value = element.val(), event = ev && ev.type;
                "password" === type || attr.ngTrim && "false" === attr.ngTrim || (value = trim(value));
                (ctrl.$viewValue !== value || "" === value && ctrl.$$hasNativeValidators) && ctrl.$setViewValue(value, event);
            }
        };
        if ($sniffer.hasEvent("input")) element.on("input", listener); else {
            var timeout, deferListener = function(ev, input, origValue) {
                timeout || (timeout = $browser.defer(function() {
                    timeout = null;
                    input && input.value === origValue || listener(ev);
                }));
            };
            element.on("keydown", function(event) {
                var key = event.keyCode;
                91 === key || 15 < key && key < 19 || 37 <= key && key <= 40 || deferListener(event, this, this.value);
            });
            $sniffer.hasEvent("paste") && element.on("paste cut", deferListener);
        }
        element.on("change", listener);
        ctrl.$render = function() {
            var value = ctrl.$isEmpty(ctrl.$viewValue) ? "" : ctrl.$viewValue;
            element.val() !== value && element.val(value);
        };
    }
    function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) return isoWeek;
        if (isString(isoWeek)) {
            WEEK_REGEXP.lastIndex = 0;
            var parts = WEEK_REGEXP.exec(isoWeek);
            if (parts) {
                var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = 7 * (week - 1);
                if (existingDate) {
                    hours = existingDate.getHours();
                    minutes = existingDate.getMinutes();
                    seconds = existingDate.getSeconds();
                    milliseconds = existingDate.getMilliseconds();
                }
                return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
            }
        }
        return NaN;
    }
    function createDateParser(regexp, mapping) {
        return function(iso, date) {
            var parts, map;
            if (isDate(iso)) return iso;
            if (isString(iso)) {
                '"' == iso.charAt(0) && '"' == iso.charAt(iso.length - 1) && (iso = iso.substring(1, iso.length - 1));
                if (ISO_DATE_REGEXP.test(iso)) return new Date(iso);
                regexp.lastIndex = 0;
                parts = regexp.exec(iso);
                if (parts) {
                    parts.shift();
                    map = date ? {
                        yyyy: date.getFullYear(),
                        MM: date.getMonth() + 1,
                        dd: date.getDate(),
                        HH: date.getHours(),
                        mm: date.getMinutes(),
                        ss: date.getSeconds(),
                        sss: date.getMilliseconds() / 1e3
                    } : {
                        yyyy: 1970,
                        MM: 1,
                        dd: 1,
                        HH: 0,
                        mm: 0,
                        ss: 0,
                        sss: 0
                    };
                    forEach(parts, function(part, index) {
                        index < mapping.length && (map[mapping[index]] = +part);
                    });
                    return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, 1e3 * map.sss || 0);
                }
            }
            return NaN;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
            function isValidDate(value) {
                return value && !(value.getTime && value.getTime() !== value.getTime());
            }
            function parseObservedDateValue(val) {
                return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
            }
            badInputChecker(scope, element, attr, ctrl);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var previousDate, timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
            ctrl.$$parserName = type;
            ctrl.$parsers.push(function(value) {
                if (ctrl.$isEmpty(value)) return null;
                if (regexp.test(value)) {
                    var parsedDate = parseDate(value, previousDate);
                    timezone && (parsedDate = convertTimezoneToLocal(parsedDate, timezone));
                    return parsedDate;
                }
                return undefined;
            });
            ctrl.$formatters.push(function(value) {
                if (value && !isDate(value)) throw ngModelMinErr("datefmt", "Expected `{0}` to be a date", value);
                if (isValidDate(value)) {
                    previousDate = value;
                    previousDate && timezone && (previousDate = convertTimezoneToLocal(previousDate, timezone, !0));
                    return $filter("date")(value, format, timezone);
                }
                previousDate = null;
                return "";
            });
            if (isDefined(attr.min) || attr.ngMin) {
                var minVal;
                ctrl.$validators.min = function(value) {
                    return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
                };
                attr.$observe("min", function(val) {
                    minVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                var maxVal;
                ctrl.$validators.max = function(value) {
                    return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
                };
                attr.$observe("max", function(val) {
                    maxVal = parseObservedDateValue(val);
                    ctrl.$validate();
                });
            }
        };
    }
    function badInputChecker(scope, element, attr, ctrl) {
        var node = element[0];
        (ctrl.$$hasNativeValidators = isObject(node.validity)) && ctrl.$parsers.push(function(value) {
            var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
            return validity.badInput && !validity.typeMismatch ? undefined : value;
        });
    }
    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        ctrl.$$parserName = "number";
        ctrl.$parsers.push(function(value) {
            return ctrl.$isEmpty(value) ? null : NUMBER_REGEXP.test(value) ? parseFloat(value) : undefined;
        });
        ctrl.$formatters.push(function(value) {
            if (!ctrl.$isEmpty(value)) {
                if (!isNumber(value)) throw ngModelMinErr("numfmt", "Expected `{0}` to be a number", value);
                value = value.toString();
            }
            return value;
        });
        if (isDefined(attr.min) || attr.ngMin) {
            var minVal;
            ctrl.$validators.min = function(value) {
                return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
            };
            attr.$observe("min", function(val) {
                isDefined(val) && !isNumber(val) && (val = parseFloat(val, 10));
                minVal = isNumber(val) && !isNaN(val) ? val : undefined;
                ctrl.$validate();
            });
        }
        if (isDefined(attr.max) || attr.ngMax) {
            var maxVal;
            ctrl.$validators.max = function(value) {
                return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
            };
            attr.$observe("max", function(val) {
                isDefined(val) && !isNumber(val) && (val = parseFloat(val, 10));
                maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
                ctrl.$validate();
            });
        }
    }
    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = "url";
        ctrl.$validators.url = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
    }
    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$$parserName = "email";
        ctrl.$validators.email = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
    }
    function radioInputType(scope, element, attr, ctrl) {
        isUndefined(attr.name) && element.attr("name", nextUid());
        var listener = function(ev) {
            element[0].checked && ctrl.$setViewValue(attr.value, ev && ev.type);
        };
        element.on("click", listener);
        ctrl.$render = function() {
            var value = attr.value;
            element[0].checked = value == ctrl.$viewValue;
        };
        attr.$observe("value", ctrl.$render);
    }
    function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
            parseFn = $parse(expression);
            if (!parseFn.constant) throw ngModelMinErr("constexpr", "Expected constant expression for `{0}`, but saw `{1}`.", name, expression);
            return parseFn(context);
        }
        return fallback;
    }
    function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, "ngTrueValue", attr.ngTrueValue, !0), falseValue = parseConstantExpr($parse, scope, "ngFalseValue", attr.ngFalseValue, !1), listener = function(ev) {
            ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };
        element.on("click", listener);
        ctrl.$render = function() {
            element[0].checked = ctrl.$viewValue;
        };
        ctrl.$isEmpty = function(value) {
            return !1 === value;
        };
        ctrl.$formatters.push(function(value) {
            return equals(value, trueValue);
        });
        ctrl.$parsers.push(function(value) {
            return value ? trueValue : falseValue;
        });
    }
    function classDirective(name, selector) {
        name = "ngClass" + name;
        return [ "$animate", function($animate) {
            function arrayDifference(tokens1, tokens2) {
                var values = [];
                outer: for (var i = 0; i < tokens1.length; i++) {
                    for (var token = tokens1[i], j = 0; j < tokens2.length; j++) if (token == tokens2[j]) continue outer;
                    values.push(token);
                }
                return values;
            }
            function arrayClasses(classVal) {
                var classes = [];
                if (isArray(classVal)) {
                    forEach(classVal, function(v) {
                        classes = classes.concat(arrayClasses(v));
                    });
                    return classes;
                }
                if (isString(classVal)) return classVal.split(" ");
                if (isObject(classVal)) {
                    forEach(classVal, function(v, k) {
                        v && (classes = classes.concat(k.split(" ")));
                    });
                    return classes;
                }
                return classVal;
            }
            return {
                restrict: "AC",
                link: function(scope, element, attr) {
                    function addClasses(classes) {
                        var newClasses = digestClassCounts(classes, 1);
                        attr.$addClass(newClasses);
                    }
                    function removeClasses(classes) {
                        var newClasses = digestClassCounts(classes, -1);
                        attr.$removeClass(newClasses);
                    }
                    function digestClassCounts(classes, count) {
                        var classCounts = element.data("$classCounts") || createMap(), classesToUpdate = [];
                        forEach(classes, function(className) {
                            if (count > 0 || classCounts[className]) {
                                classCounts[className] = (classCounts[className] || 0) + count;
                                classCounts[className] === +(count > 0) && classesToUpdate.push(className);
                            }
                        });
                        element.data("$classCounts", classCounts);
                        return classesToUpdate.join(" ");
                    }
                    function updateClasses(oldClasses, newClasses) {
                        var toAdd = arrayDifference(newClasses, oldClasses), toRemove = arrayDifference(oldClasses, newClasses);
                        toAdd = digestClassCounts(toAdd, 1);
                        toRemove = digestClassCounts(toRemove, -1);
                        toAdd && toAdd.length && $animate.addClass(element, toAdd);
                        toRemove && toRemove.length && $animate.removeClass(element, toRemove);
                    }
                    function ngClassWatchAction(newVal) {
                        if (!0 === selector || scope.$index % 2 === selector) {
                            var newClasses = arrayClasses(newVal || []);
                            if (oldVal) {
                                if (!equals(newVal, oldVal)) {
                                    var oldClasses = arrayClasses(oldVal);
                                    updateClasses(oldClasses, newClasses);
                                }
                            } else addClasses(newClasses);
                        }
                        oldVal = shallowCopy(newVal);
                    }
                    var oldVal;
                    scope.$watch(attr[name], ngClassWatchAction, !0);
                    attr.$observe("class", function(value) {
                        ngClassWatchAction(scope.$eval(attr[name]));
                    });
                    "ngClass" !== name && scope.$watch("$index", function($index, old$index) {
                        var mod = 1 & $index;
                        if (mod !== (1 & old$index)) {
                            var classes = arrayClasses(scope.$eval(attr[name]));
                            mod === selector ? addClasses(classes) : removeClasses(classes);
                        }
                    });
                }
            };
        } ];
    }
    function addSetValidityMethod(context) {
        function setValidity(validationErrorKey, state, controller) {
            isUndefined(state) ? createAndSet("$pending", validationErrorKey, controller) : unsetAndCleanup("$pending", validationErrorKey, controller);
            if (isBoolean(state)) if (state) {
                unset(ctrl.$error, validationErrorKey, controller);
                set(ctrl.$$success, validationErrorKey, controller);
            } else {
                set(ctrl.$error, validationErrorKey, controller);
                unset(ctrl.$$success, validationErrorKey, controller);
            } else {
                unset(ctrl.$error, validationErrorKey, controller);
                unset(ctrl.$$success, validationErrorKey, controller);
            }
            if (ctrl.$pending) {
                cachedToggleClass(PENDING_CLASS, !0);
                ctrl.$valid = ctrl.$invalid = undefined;
                toggleValidationCss("", null);
            } else {
                cachedToggleClass(PENDING_CLASS, !1);
                ctrl.$valid = isObjectEmpty(ctrl.$error);
                ctrl.$invalid = !ctrl.$valid;
                toggleValidationCss("", ctrl.$valid);
            }
            var combinedState;
            combinedState = ctrl.$pending && ctrl.$pending[validationErrorKey] ? undefined : !ctrl.$error[validationErrorKey] && (!!ctrl.$$success[validationErrorKey] || null);
            toggleValidationCss(validationErrorKey, combinedState);
            ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
        }
        function createAndSet(name, value, controller) {
            ctrl[name] || (ctrl[name] = {});
            set(ctrl[name], value, controller);
        }
        function unsetAndCleanup(name, value, controller) {
            ctrl[name] && unset(ctrl[name], value, controller);
            isObjectEmpty(ctrl[name]) && (ctrl[name] = undefined);
        }
        function cachedToggleClass(className, switchValue) {
            if (switchValue && !classCache[className]) {
                $animate.addClass($element, className);
                classCache[className] = !0;
            } else if (!switchValue && classCache[className]) {
                $animate.removeClass($element, className);
                classCache[className] = !1;
            }
        }
        function toggleValidationCss(validationErrorKey, isValid) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "";
            cachedToggleClass(VALID_CLASS + validationErrorKey, !0 === isValid);
            cachedToggleClass(INVALID_CLASS + validationErrorKey, !1 === isValid);
        }
        var ctrl = context.ctrl, $element = context.$element, classCache = {}, set = context.set, unset = context.unset, $animate = context.$animate;
        classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));
        ctrl.$setValidity = setValidity;
    }
    function isObjectEmpty(obj) {
        if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) return !1;
        return !0;
    }
    function chromeHack(optionElement) {
        optionElement[0].hasAttribute("selected") && (optionElement[0].selected = !0);
    }
    var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/, VALIDITY_STATE_PROPERTY = "validity", lowercase = function(string) {
        return isString(string) ? string.toLowerCase() : string;
    }, hasOwnProperty = Object.prototype.hasOwnProperty, uppercase = function(string) {
        return isString(string) ? string.toUpperCase() : string;
    }, manualLowercase = function(s) {
        return isString(s) ? s.replace(/[A-Z]/g, function(ch) {
            return String.fromCharCode(32 | ch.charCodeAt(0));
        }) : s;
    }, manualUppercase = function(s) {
        return isString(s) ? s.replace(/[a-z]/g, function(ch) {
            return String.fromCharCode(-33 & ch.charCodeAt(0));
        }) : s;
    };
    if ("i" !== "I".toLowerCase()) {
        lowercase = manualLowercase;
        uppercase = manualUppercase;
    }
    var msie, jqLite, jQuery, angularModule, slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, getPrototypeOf = Object.getPrototypeOf, ngMinErr = minErr("ng"), angular = window.angular || (window.angular = {}), uid = 0;
    msie = document.documentMode;
    noop.$inject = [];
    identity.$inject = [];
    var skipDestroyOnNextJQueryCleanData, isArray = Array.isArray, TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/, trim = function(value) {
        return isString(value) ? value.trim() : value;
    }, escapeForRegexp = function(s) {
        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    }, csp = function() {
        if (!isDefined(csp.rules)) {
            var ngCspElement = document.querySelector("[ng-csp]") || document.querySelector("[data-ng-csp]");
            if (ngCspElement) {
                var ngCspAttribute = ngCspElement.getAttribute("ng-csp") || ngCspElement.getAttribute("data-ng-csp");
                csp.rules = {
                    noUnsafeEval: !ngCspAttribute || -1 !== ngCspAttribute.indexOf("no-unsafe-eval"),
                    noInlineStyle: !ngCspAttribute || -1 !== ngCspAttribute.indexOf("no-inline-style")
                };
            } else csp.rules = {
                noUnsafeEval: function() {
                    try {
                        new Function("");
                        return !1;
                    } catch (e) {
                        return !0;
                    }
                }(),
                noInlineStyle: !1
            };
        }
        return csp.rules;
    }, jq = function() {
        if (isDefined(jq.name_)) return jq.name_;
        var el, i, prefix, name, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
            prefix = ngAttrPrefixes[i];
            if (el = document.querySelector("[" + prefix.replace(":", "\\:") + "jq]")) {
                name = el.getAttribute(prefix + "jq");
                break;
            }
        }
        return jq.name_ = name;
    }, ngAttrPrefixes = [ "ng-", "data-ng-", "ng:", "x-ng-" ], SNAKE_CASE_REGEXP = /[A-Z]/g, bindJQueryFired = !1, NODE_TYPE_ELEMENT = 1, NODE_TYPE_TEXT = 3, NODE_TYPE_COMMENT = 8, NODE_TYPE_DOCUMENT = 9, NODE_TYPE_DOCUMENT_FRAGMENT = 11, version = {
        full: "1.4.9",
        major: 1,
        minor: 4,
        dot: 9,
        codeName: "implicit-superannuation"
    };
    JQLite.expando = "ng339";
    var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = function(element, type, fn) {
        element.addEventListener(type, fn, !1);
    }, removeEventListenerFn = function(element, type, fn) {
        element.removeEventListener(type, fn, !1);
    };
    JQLite._data = function(node) {
        return this.cache[node[this.expando]] || {};
    };
    var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g, MOZ_HACK_REGEXP = /^moz([A-Z])/, MOUSE_EVENT_MAP = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    }, jqLiteMinErr = minErr("jqLite"), SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, HTML_REGEXP = /<|&#?\w+;/, TAG_NAME_REGEXP = /<([\w:-]+)/, XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, wrapMap = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    var jqLiteContains = Node.prototype.contains || function(arg) {
        return !!(16 & this.compareDocumentPosition(arg));
    }, JQLitePrototype = JQLite.prototype = {
        ready: function(fn) {
            function trigger() {
                if (!fired) {
                    fired = !0;
                    fn();
                }
            }
            var fired = !1;
            if ("complete" === document.readyState) setTimeout(trigger); else {
                this.on("DOMContentLoaded", trigger);
                JQLite(window).on("load", trigger);
            }
        },
        toString: function() {
            var value = [];
            forEach(this, function(e) {
                value.push("" + e);
            });
            return "[" + value.join(", ") + "]";
        },
        eq: function(index) {
            return jqLite(index >= 0 ? this[index] : this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    }, BOOLEAN_ATTR = {};
    forEach("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach("input,select,option,textarea,button,form,details".split(","), function(value) {
        BOOLEAN_ELEMENTS[value] = !0;
    });
    var ALIASED_ATTR = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern"
    };
    forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: jqLiteHasData
    }, function(fn, name) {
        JQLite[name] = fn;
    });
    forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function(element) {
            return jqLite.data(element, "$scope") || jqLiteInheritedData(element.parentNode || element, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(element) {
            return jqLite.data(element, "$isolateScope") || jqLite.data(element, "$isolateScopeNoTemplate");
        },
        controller: jqLiteController,
        injector: function(element) {
            return jqLiteInheritedData(element, "$injector");
        },
        removeAttr: function(element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function(element, name, value) {
            name = camelCase(name);
            if (!isDefined(value)) return element.style[name];
            element.style[name] = value;
        },
        attr: function(element, name, value) {
            var nodeType = element.nodeType;
            if (nodeType !== NODE_TYPE_TEXT && 2 !== nodeType && nodeType !== NODE_TYPE_COMMENT) {
                var lowercasedName = lowercase(name);
                if (BOOLEAN_ATTR[lowercasedName]) {
                    if (!isDefined(value)) return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
                    if (value) {
                        element[name] = !0;
                        element.setAttribute(name, lowercasedName);
                    } else {
                        element[name] = !1;
                        element.removeAttribute(lowercasedName);
                    }
                } else if (isDefined(value)) element.setAttribute(name, value); else if (element.getAttribute) {
                    var ret = element.getAttribute(name, 2);
                    return null === ret ? undefined : ret;
                }
            }
        },
        prop: function(element, name, value) {
            if (!isDefined(value)) return element[name];
            element[name] = value;
        },
        text: function() {
            function getText(element, value) {
                if (isUndefined(value)) {
                    var nodeType = element.nodeType;
                    return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : "";
                }
                element.textContent = value;
            }
            getText.$dv = "";
            return getText;
        }(),
        val: function(element, value) {
            if (isUndefined(value)) {
                if (element.multiple && "select" === nodeName_(element)) {
                    var result = [];
                    forEach(element.options, function(option) {
                        option.selected && result.push(option.value || option.text);
                    });
                    return 0 === result.length ? null : result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function(element, value) {
            if (isUndefined(value)) return element.innerHTML;
            jqLiteDealoc(element, !0);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2) {
            var i, key, nodeCount = this.length;
            if (fn !== jqLiteEmpty && isUndefined(2 == fn.length && fn !== jqLiteHasClass && fn !== jqLiteController ? arg1 : arg2)) {
                if (isObject(arg1)) {
                    for (i = 0; i < nodeCount; i++) if (fn === jqLiteData) fn(this[i], arg1); else for (key in arg1) fn(this[i], key, arg1[key]);
                    return this;
                }
                for (var value = fn.$dv, jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount, j = 0; j < jj; j++) {
                    var nodeValue = fn(this[j], arg1, arg2);
                    value = value ? value + nodeValue : nodeValue;
                }
                return value;
            }
            for (i = 0; i < nodeCount; i++) fn(this[i], arg1, arg2);
            return this;
        };
    });
    forEach({
        removeData: jqLiteRemoveData,
        on: function(element, type, fn, unsupported) {
            if (isDefined(unsupported)) throw jqLiteMinErr("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            if (jqLiteAcceptsData(element)) {
                var expandoStore = jqLiteExpandoStore(element, !0), events = expandoStore.events, handle = expandoStore.handle;
                handle || (handle = expandoStore.handle = createEventHandler(element, events));
                for (var types = type.indexOf(" ") >= 0 ? type.split(" ") : [ type ], i = types.length, addHandler = function(type, specialHandlerWrapper, noEventListener) {
                    var eventFns = events[type];
                    if (!eventFns) {
                        eventFns = events[type] = [];
                        eventFns.specialHandlerWrapper = specialHandlerWrapper;
                        "$destroy" === type || noEventListener || addEventListenerFn(element, type, handle);
                    }
                    eventFns.push(fn);
                }; i--; ) {
                    type = types[i];
                    if (MOUSE_EVENT_MAP[type]) {
                        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
                        addHandler(type, undefined, !0);
                    } else addHandler(type);
                }
            }
        },
        off: jqLiteOff,
        one: function(element, type, fn) {
            element = jqLite(element);
            element.on(type, function onFn() {
                element.off(type, fn);
                element.off(type, onFn);
            });
            element.on(type, fn);
        },
        replaceWith: function(element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element);
            forEach(new JQLite(replaceNode), function(node) {
                index ? parent.insertBefore(node, index.nextSibling) : parent.replaceChild(node, element);
                index = node;
            });
        },
        children: function(element) {
            var children = [];
            forEach(element.childNodes, function(element) {
                element.nodeType === NODE_TYPE_ELEMENT && children.push(element);
            });
            return children;
        },
        contents: function(element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function(element, node) {
            var nodeType = element.nodeType;
            if (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_DOCUMENT_FRAGMENT) {
                node = new JQLite(node);
                for (var i = 0, ii = node.length; i < ii; i++) {
                    var child = node[i];
                    element.appendChild(child);
                }
            }
        },
        prepend: function(element, node) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
                var index = element.firstChild;
                forEach(new JQLite(node), function(child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function(element, wrapNode) {
            wrapNode = jqLite(wrapNode).eq(0).clone()[0];
            var parent = element.parentNode;
            parent && parent.replaceChild(wrapNode, element);
            wrapNode.appendChild(element);
        },
        remove: jqLiteRemove,
        detach: function(element) {
            jqLiteRemove(element, !0);
        },
        after: function(element, newElement) {
            var index = element, parent = element.parentNode;
            newElement = new JQLite(newElement);
            for (var i = 0, ii = newElement.length; i < ii; i++) {
                var node = newElement[i];
                parent.insertBefore(node, index.nextSibling);
                index = node;
            }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function(element, selector, condition) {
            selector && forEach(selector.split(" "), function(className) {
                var classCondition = condition;
                isUndefined(classCondition) && (classCondition = !jqLiteHasClass(element, className));
                (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
            });
        },
        parent: function(element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function(element) {
            return element.nextElementSibling;
        },
        find: function(element, selector) {
            return element.getElementsByTagName ? element.getElementsByTagName(selector) : [];
        },
        clone: jqLiteClone,
        triggerHandler: function(element, event, extraParameters) {
            var dummyEvent, eventFnsCopy, handlerArgs, eventName = event.type || event, expandoStore = jqLiteExpandoStore(element), events = expandoStore && expandoStore.events, eventFns = events && events[eventName];
            if (eventFns) {
                dummyEvent = {
                    preventDefault: function() {
                        this.defaultPrevented = !0;
                    },
                    isDefaultPrevented: function() {
                        return !0 === this.defaultPrevented;
                    },
                    stopImmediatePropagation: function() {
                        this.immediatePropagationStopped = !0;
                    },
                    isImmediatePropagationStopped: function() {
                        return !0 === this.immediatePropagationStopped;
                    },
                    stopPropagation: noop,
                    type: eventName,
                    target: element
                };
                event.type && (dummyEvent = extend(dummyEvent, event));
                eventFnsCopy = shallowCopy(eventFns);
                handlerArgs = extraParameters ? [ dummyEvent ].concat(extraParameters) : [ dummyEvent ];
                forEach(eventFnsCopy, function(fn) {
                    dummyEvent.isImmediatePropagationStopped() || fn.apply(element, handlerArgs);
                });
            }
        }
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2, arg3) {
            for (var value, i = 0, ii = this.length; i < ii; i++) if (isUndefined(value)) {
                value = fn(this[i], arg1, arg2, arg3);
                isDefined(value) && (value = jqLite(value));
            } else jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
            return isDefined(value) ? value : this;
        };
        JQLite.prototype.bind = JQLite.prototype.on;
        JQLite.prototype.unbind = JQLite.prototype.off;
    });
    HashMap.prototype = {
        put: function(key, value) {
            this[hashKey(key, this.nextUid)] = value;
        },
        get: function(key) {
            return this[hashKey(key, this.nextUid)];
        },
        remove: function(key) {
            var value = this[key = hashKey(key, this.nextUid)];
            delete this[key];
            return value;
        }
    };
    var $$HashMapProvider = [ function() {
        this.$get = [ function() {
            return HashMap;
        } ];
    } ], FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m, FN_ARG_SPLIT = /,/, FN_ARG = /^\s*(_?)(\S+?)\1\s*$/, STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, $injectorMinErr = minErr("$injector");
    createInjector.$$annotate = annotate;
    var $animateMinErr = minErr("$animate"), ELEMENT_NODE = 1, $$CoreAnimateJsProvider = function() {
        this.$get = function() {};
    }, $$CoreAnimateQueueProvider = function() {
        var postDigestQueue = new HashMap(), postDigestElements = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function($$AnimateRunner, $rootScope) {
            function updateData(data, classes, value) {
                var changed = !1;
                if (classes) {
                    classes = isString(classes) ? classes.split(" ") : isArray(classes) ? classes : [];
                    forEach(classes, function(className) {
                        if (className) {
                            changed = !0;
                            data[className] = value;
                        }
                    });
                }
                return changed;
            }
            function handleCSSClassChanges() {
                forEach(postDigestElements, function(element) {
                    var data = postDigestQueue.get(element);
                    if (data) {
                        var existing = splitClasses(element.attr("class")), toAdd = "", toRemove = "";
                        forEach(data, function(status, className) {
                            status !== !!existing[className] && (status ? toAdd += (toAdd.length ? " " : "") + className : toRemove += (toRemove.length ? " " : "") + className);
                        });
                        forEach(element, function(elm) {
                            toAdd && jqLiteAddClass(elm, toAdd);
                            toRemove && jqLiteRemoveClass(elm, toRemove);
                        });
                        postDigestQueue.remove(element);
                    }
                });
                postDigestElements.length = 0;
            }
            function addRemoveClassesPostDigest(element, add, remove) {
                var data = postDigestQueue.get(element) || {}, classesAdded = updateData(data, add, !0), classesRemoved = updateData(data, remove, !1);
                if (classesAdded || classesRemoved) {
                    postDigestQueue.put(element, data);
                    postDigestElements.push(element);
                    1 === postDigestElements.length && $rootScope.$$postDigest(handleCSSClassChanges);
                }
            }
            return {
                enabled: noop,
                on: noop,
                off: noop,
                pin: noop,
                push: function(element, event, options, domOperation) {
                    domOperation && domOperation();
                    options = options || {};
                    options.from && element.css(options.from);
                    options.to && element.css(options.to);
                    (options.addClass || options.removeClass) && addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
                    var runner = new $$AnimateRunner();
                    runner.complete();
                    return runner;
                }
            };
        } ];
    }, $AnimateProvider = [ "$provide", function($provide) {
        var provider = this;
        this.$$registeredAnimations = Object.create(null);
        this.register = function(name, factory) {
            if (name && "." !== name.charAt(0)) throw $animateMinErr("notcsel", "Expecting class selector starting with '.' got '{0}'.", name);
            var key = name + "-animation";
            provider.$$registeredAnimations[name.substr(1)] = key;
            $provide.factory(key, factory);
        };
        this.classNameFilter = function(expression) {
            if (1 === arguments.length) {
                this.$$classNameFilter = expression instanceof RegExp ? expression : null;
                if (this.$$classNameFilter) {
                    if (new RegExp("(\\s+|\\/)ng-animate(\\s+|\\/)").test(this.$$classNameFilter.toString())) throw $animateMinErr("nongcls", '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', "ng-animate");
                }
            }
            return this.$$classNameFilter;
        };
        this.$get = [ "$$animateQueue", function($$animateQueue) {
            function domInsert(element, parentElement, afterElement) {
                if (afterElement) {
                    var afterNode = extractElementNode(afterElement);
                    !afterNode || afterNode.parentNode || afterNode.previousElementSibling || (afterElement = null);
                }
                afterElement ? afterElement.after(element) : parentElement.prepend(element);
            }
            return {
                on: $$animateQueue.on,
                off: $$animateQueue.off,
                pin: $$animateQueue.pin,
                enabled: $$animateQueue.enabled,
                cancel: function(runner) {
                    runner.end && runner.end();
                },
                enter: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "enter", prepareAnimateOptions(options));
                },
                move: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "move", prepareAnimateOptions(options));
                },
                leave: function(element, options) {
                    return $$animateQueue.push(element, "leave", prepareAnimateOptions(options), function() {
                        element.remove();
                    });
                },
                addClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addclass, className);
                    return $$animateQueue.push(element, "addClass", options);
                },
                removeClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.removeClass = mergeClasses(options.removeClass, className);
                    return $$animateQueue.push(element, "removeClass", options);
                },
                setClass: function(element, add, remove, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addClass, add);
                    options.removeClass = mergeClasses(options.removeClass, remove);
                    return $$animateQueue.push(element, "setClass", options);
                },
                animate: function(element, from, to, className, options) {
                    options = prepareAnimateOptions(options);
                    options.from = options.from ? extend(options.from, from) : from;
                    options.to = options.to ? extend(options.to, to) : to;
                    className = className || "ng-inline-animate";
                    options.tempClasses = mergeClasses(options.tempClasses, className);
                    return $$animateQueue.push(element, "animate", options);
                }
            };
        } ];
    } ], $$AnimateAsyncRunFactoryProvider = function() {
        this.$get = [ "$$rAF", function($$rAF) {
            function waitForTick(fn) {
                waitQueue.push(fn);
                waitQueue.length > 1 || $$rAF(function() {
                    for (var i = 0; i < waitQueue.length; i++) waitQueue[i]();
                    waitQueue = [];
                });
            }
            var waitQueue = [];
            return function() {
                var passed = !1;
                waitForTick(function() {
                    passed = !0;
                });
                return function(callback) {
                    passed ? callback() : waitForTick(callback);
                };
            };
        } ];
    }, $$AnimateRunnerFactoryProvider = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$document", "$timeout", function($q, $sniffer, $$animateAsyncRun, $document, $timeout) {
            function AnimateRunner(host) {
                this.setHost(host);
                var rafTick = $$animateAsyncRun(), timeoutTick = function(fn) {
                    $timeout(fn, 0, !1);
                };
                this._doneCallbacks = [];
                this._tick = function(fn) {
                    var doc = $document[0];
                    doc && doc.hidden ? timeoutTick(fn) : rafTick(fn);
                };
                this._state = 0;
            }
            AnimateRunner.chain = function(chain, callback) {
                function next() {
                    index !== chain.length ? chain[index](function(response) {
                        if (!1 !== response) {
                            index++;
                            next();
                        } else callback(!1);
                    }) : callback(!0);
                }
                var index = 0;
                next();
            };
            AnimateRunner.all = function(runners, callback) {
                function onProgress(response) {
                    status = status && response;
                    ++count === runners.length && callback(status);
                }
                var count = 0, status = !0;
                forEach(runners, function(runner) {
                    runner.done(onProgress);
                });
            };
            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },
                done: function(fn) {
                    2 === this._state ? fn() : this._doneCallbacks.push(fn);
                },
                progress: noop,
                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                !1 === status ? reject() : resolve();
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },
                catch: function(handler) {
                    return this.getPromise().catch(handler);
                },
                finally: function(handler) {
                    return this.getPromise().finally(handler);
                },
                pause: function() {
                    this.host.pause && this.host.pause();
                },
                resume: function() {
                    this.host.resume && this.host.resume();
                },
                end: function() {
                    this.host.end && this.host.end();
                    this._resolve(!0);
                },
                cancel: function() {
                    this.host.cancel && this.host.cancel();
                    this._resolve(!1);
                },
                complete: function(response) {
                    var self = this;
                    if (0 === self._state) {
                        self._state = 1;
                        self._tick(function() {
                            self._resolve(response);
                        });
                    }
                },
                _resolve: function(response) {
                    if (2 !== this._state) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = 2;
                    }
                }
            };
            return AnimateRunner;
        } ];
    }, $CoreAnimateCssProvider = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function($$rAF, $q, $$AnimateRunner) {
            return function(element, initialOptions) {
                function run() {
                    $$rAF(function() {
                        applyAnimationContents();
                        closed || runner.complete();
                        closed = !0;
                    });
                    return runner;
                }
                function applyAnimationContents() {
                    if (options.addClass) {
                        element.addClass(options.addClass);
                        options.addClass = null;
                    }
                    if (options.removeClass) {
                        element.removeClass(options.removeClass);
                        options.removeClass = null;
                    }
                    if (options.to) {
                        element.css(options.to);
                        options.to = null;
                    }
                }
                var options = initialOptions || {};
                options.$$prepared || (options = copy(options));
                options.cleanupStyles && (options.from = options.to = null);
                if (options.from) {
                    element.css(options.from);
                    options.from = null;
                }
                var closed, runner = new $$AnimateRunner();
                return {
                    start: run,
                    end: run
                };
            };
        } ];
    }, $compileMinErr = minErr("$compile");
    $CompileProvider.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i, $controllerMinErr = minErr("$controller"), CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/, $$ForceReflowProvider = function() {
        this.$get = [ "$document", function($document) {
            return function(domNode) {
                domNode ? !domNode.nodeType && domNode instanceof jqLite && (domNode = domNode[0]) : domNode = $document[0].body;
                return domNode.offsetWidth + 1;
            };
        } ];
    }, APPLICATION_JSON = "application/json", CONTENT_TYPE_APPLICATION_JSON = {
        "Content-Type": APPLICATION_JSON + ";charset=utf-8"
    }, JSON_START = /^\[|^\{(?!\{)/, JSON_ENDS = {
        "[": /]$/,
        "{": /}$/
    }, JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/, $httpMinErr = minErr("$http"), $httpMinErrLegacyFn = function(method) {
        return function() {
            throw $httpMinErr("legacy", "The method `{0}` on the promise returned from `$http` has been disabled.", method);
        };
    }, $interpolateMinErr = angular.$interpolateMinErr = minErr("$interpolate");
    $interpolateMinErr.throwNoconcat = function(text) {
        throw $interpolateMinErr("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce", text);
    };
    $interpolateMinErr.interr = function(text, err) {
        return $interpolateMinErr("interr", "Can't interpolate: {0}\n{1}", text, err.toString());
    };
    var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
        http: 80,
        https: 443,
        ftp: 21
    }, $locationMinErr = minErr("$location"), locationPrototype = {
        $$html5: !1,
        $$replace: !1,
        absUrl: locationGetter("$$absUrl"),
        url: function(url) {
            if (isUndefined(url)) return this.$$url;
            var match = PATH_MATCH.exec(url);
            (match[1] || "" === url) && this.path(decodeURIComponent(match[1]));
            (match[2] || match[1] || "" === url) && this.search(match[3] || "");
            this.hash(match[5] || "");
            return this;
        },
        protocol: locationGetter("$$protocol"),
        host: locationGetter("$$host"),
        port: locationGetter("$$port"),
        path: locationGetterSetter("$$path", function(path) {
            path = null !== path ? path.toString() : "";
            return "/" == path.charAt(0) ? path : "/" + path;
        }),
        search: function(search, paramValue) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (isString(search) || isNumber(search)) {
                    search = search.toString();
                    this.$$search = parseKeyValue(search);
                } else {
                    if (!isObject(search)) throw $locationMinErr("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                    search = copy(search, {});
                    forEach(search, function(value, key) {
                        null == value && delete search[key];
                    });
                    this.$$search = search;
                }
                break;

              default:
                isUndefined(paramValue) || null === paramValue ? delete this.$$search[search] : this.$$search[search] = paramValue;
            }
            this.$$compose();
            return this;
        },
        hash: locationGetterSetter("$$hash", function(hash) {
            return null !== hash ? hash.toString() : "";
        }),
        replace: function() {
            this.$$replace = !0;
            return this;
        }
    };
    forEach([ LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url ], function(Location) {
        Location.prototype = Object.create(locationPrototype);
        Location.prototype.state = function(state) {
            if (!arguments.length) return this.$$state;
            if (Location !== LocationHtml5Url || !this.$$html5) throw $locationMinErr("nostate", "History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");
            this.$$state = isUndefined(state) ? null : state;
            return this;
        };
    });
    var $parseMinErr = minErr("$parse"), CALL = Function.prototype.call, APPLY = Function.prototype.apply, BIND = Function.prototype.bind, OPERATORS = createMap();
    forEach("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(operator) {
        OPERATORS[operator] = !0;
    });
    var ESCAPE = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    }, Lexer = function(options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function(text) {
            this.text = text;
            this.index = 0;
            this.tokens = [];
            for (;this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                if ('"' === ch || "'" === ch) this.readString(ch); else if (this.isNumber(ch) || "." === ch && this.isNumber(this.peek())) this.readNumber(); else if (this.isIdent(ch)) this.readIdent(); else if (this.is(ch, "(){}[].,;:?")) {
                    this.tokens.push({
                        index: this.index,
                        text: ch
                    });
                    this.index++;
                } else if (this.isWhitespace(ch)) this.index++; else {
                    var ch2 = ch + this.peek(), ch3 = ch2 + this.peek(2), op1 = OPERATORS[ch], op2 = OPERATORS[ch2], op3 = OPERATORS[ch3];
                    if (op1 || op2 || op3) {
                        var token = op3 ? ch3 : op2 ? ch2 : ch;
                        this.tokens.push({
                            index: this.index,
                            text: token,
                            operator: !0
                        });
                        this.index += token.length;
                    } else this.throwError("Unexpected next character ", this.index, this.index + 1);
                }
            }
            return this.tokens;
        },
        is: function(ch, chars) {
            return -1 !== chars.indexOf(ch);
        },
        peek: function(i) {
            var num = i || 1;
            return this.index + num < this.text.length && this.text.charAt(this.index + num);
        },
        isNumber: function(ch) {
            return "0" <= ch && ch <= "9" && "string" == typeof ch;
        },
        isWhitespace: function(ch) {
            return " " === ch || "\r" === ch || "\t" === ch || "\n" === ch || "\v" === ch || " " === ch;
        },
        isIdent: function(ch) {
            return "a" <= ch && ch <= "z" || "A" <= ch && ch <= "Z" || "_" === ch || "$" === ch;
        },
        isExpOperator: function(ch) {
            return "-" === ch || "+" === ch || this.isNumber(ch);
        },
        throwError: function(error, start, end) {
            end = end || this.index;
            var colStr = isDefined(start) ? "s " + start + "-" + this.index + " [" + this.text.substring(start, end) + "]" : " " + end;
            throw $parseMinErr("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", error, colStr, this.text);
        },
        readNumber: function() {
            for (var number = "", start = this.index; this.index < this.text.length; ) {
                var ch = lowercase(this.text.charAt(this.index));
                if ("." == ch || this.isNumber(ch)) number += ch; else {
                    var peekCh = this.peek();
                    if ("e" == ch && this.isExpOperator(peekCh)) number += ch; else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && "e" == number.charAt(number.length - 1)) number += ch; else {
                        if (!this.isExpOperator(ch) || peekCh && this.isNumber(peekCh) || "e" != number.charAt(number.length - 1)) break;
                        this.throwError("Invalid exponent");
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: number,
                constant: !0,
                value: Number(number)
            });
        },
        readIdent: function() {
            for (var start = this.index; this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                if (!this.isIdent(ch) && !this.isNumber(ch)) break;
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: this.text.slice(start, this.index),
                identifier: !0
            });
        },
        readString: function(quote) {
            var start = this.index;
            this.index++;
            for (var string = "", rawString = quote, escape = !1; this.index < this.text.length; ) {
                var ch = this.text.charAt(this.index);
                rawString += ch;
                if (escape) {
                    if ("u" === ch) {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        hex.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + hex + "]");
                        this.index += 4;
                        string += String.fromCharCode(parseInt(hex, 16));
                    } else {
                        string += ESCAPE[ch] || ch;
                    }
                    escape = !1;
                } else if ("\\" === ch) escape = !0; else {
                    if (ch === quote) {
                        this.index++;
                        this.tokens.push({
                            index: start,
                            text: rawString,
                            constant: !0,
                            value: string
                        });
                        return;
                    }
                    string += ch;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", start);
        }
    };
    var AST = function(lexer, options) {
        this.lexer = lexer;
        this.options = options;
    };
    AST.Program = "Program";
    AST.ExpressionStatement = "ExpressionStatement";
    AST.AssignmentExpression = "AssignmentExpression";
    AST.ConditionalExpression = "ConditionalExpression";
    AST.LogicalExpression = "LogicalExpression";
    AST.BinaryExpression = "BinaryExpression";
    AST.UnaryExpression = "UnaryExpression";
    AST.CallExpression = "CallExpression";
    AST.MemberExpression = "MemberExpression";
    AST.Identifier = "Identifier";
    AST.Literal = "Literal";
    AST.ArrayExpression = "ArrayExpression";
    AST.Property = "Property";
    AST.ObjectExpression = "ObjectExpression";
    AST.ThisExpression = "ThisExpression";
    AST.NGValueParameter = "NGValueParameter";
    AST.prototype = {
        ast: function(text) {
            this.text = text;
            this.tokens = this.lexer.lex(text);
            var value = this.program();
            0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
            return value;
        },
        program: function() {
            for (var body = []; ;) {
                this.tokens.length > 0 && !this.peek("}", ")", ";", "]") && body.push(this.expressionStatement());
                if (!this.expect(";")) return {
                    type: AST.Program,
                    body: body
                };
            }
        },
        expressionStatement: function() {
            return {
                type: AST.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            for (var left = this.expression(); this.expect("|"); ) left = this.filter(left);
            return left;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var result = this.ternary();
            this.expect("=") && (result = {
                type: AST.AssignmentExpression,
                left: result,
                right: this.assignment(),
                operator: "="
            });
            return result;
        },
        ternary: function() {
            var alternate, consequent, test = this.logicalOR();
            if (this.expect("?")) {
                alternate = this.expression();
                if (this.consume(":")) {
                    consequent = this.expression();
                    return {
                        type: AST.ConditionalExpression,
                        test: test,
                        alternate: alternate,
                        consequent: consequent
                    };
                }
            }
            return test;
        },
        logicalOR: function() {
            for (var left = this.logicalAND(); this.expect("||"); ) left = {
                type: AST.LogicalExpression,
                operator: "||",
                left: left,
                right: this.logicalAND()
            };
            return left;
        },
        logicalAND: function() {
            for (var left = this.equality(); this.expect("&&"); ) left = {
                type: AST.LogicalExpression,
                operator: "&&",
                left: left,
                right: this.equality()
            };
            return left;
        },
        equality: function() {
            for (var token, left = this.relational(); token = this.expect("==", "!=", "===", "!=="); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.relational()
            };
            return left;
        },
        relational: function() {
            for (var token, left = this.additive(); token = this.expect("<", ">", "<=", ">="); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.additive()
            };
            return left;
        },
        additive: function() {
            for (var token, left = this.multiplicative(); token = this.expect("+", "-"); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.multiplicative()
            };
            return left;
        },
        multiplicative: function() {
            for (var token, left = this.unary(); token = this.expect("*", "/", "%"); ) left = {
                type: AST.BinaryExpression,
                operator: token.text,
                left: left,
                right: this.unary()
            };
            return left;
        },
        unary: function() {
            var token;
            return (token = this.expect("+", "-", "!")) ? {
                type: AST.UnaryExpression,
                operator: token.text,
                prefix: !0,
                argument: this.unary()
            } : this.primary();
        },
        primary: function() {
            var primary;
            if (this.expect("(")) {
                primary = this.filterChain();
                this.consume(")");
            } else this.expect("[") ? primary = this.arrayDeclaration() : this.expect("{") ? primary = this.object() : this.constants.hasOwnProperty(this.peek().text) ? primary = copy(this.constants[this.consume().text]) : this.peek().identifier ? primary = this.identifier() : this.peek().constant ? primary = this.constant() : this.throwError("not a primary expression", this.peek());
            for (var next; next = this.expect("(", "[", "."); ) if ("(" === next.text) {
                primary = {
                    type: AST.CallExpression,
                    callee: primary,
                    arguments: this.parseArguments()
                };
                this.consume(")");
            } else if ("[" === next.text) {
                primary = {
                    type: AST.MemberExpression,
                    object: primary,
                    property: this.expression(),
                    computed: !0
                };
                this.consume("]");
            } else "." === next.text ? primary = {
                type: AST.MemberExpression,
                object: primary,
                property: this.identifier(),
                computed: !1
            } : this.throwError("IMPOSSIBLE");
            return primary;
        },
        filter: function(baseExpression) {
            for (var args = [ baseExpression ], result = {
                type: AST.CallExpression,
                callee: this.identifier(),
                arguments: args,
                filter: !0
            }; this.expect(":"); ) args.push(this.expression());
            return result;
        },
        parseArguments: function() {
            var args = [];
            if (")" !== this.peekToken().text) do {
                args.push(this.expression());
            } while (this.expect(","));
            return args;
        },
        identifier: function() {
            var token = this.consume();
            token.identifier || this.throwError("is not a valid identifier", token);
            return {
                type: AST.Identifier,
                name: token.text
            };
        },
        constant: function() {
            return {
                type: AST.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var elements = [];
            if ("]" !== this.peekToken().text) do {
                if (this.peek("]")) break;
                elements.push(this.expression());
            } while (this.expect(","));
            this.consume("]");
            return {
                type: AST.ArrayExpression,
                elements: elements
            };
        },
        object: function() {
            var property, properties = [];
            if ("}" !== this.peekToken().text) do {
                if (this.peek("}")) break;
                property = {
                    type: AST.Property,
                    kind: "init"
                };
                this.peek().constant ? property.key = this.constant() : this.peek().identifier ? property.key = this.identifier() : this.throwError("invalid key", this.peek());
                this.consume(":");
                property.value = this.expression();
                properties.push(property);
            } while (this.expect(","));
            this.consume("}");
            return {
                type: AST.ObjectExpression,
                properties: properties
            };
        },
        throwError: function(msg, token) {
            throw $parseMinErr("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        consume: function(e1) {
            if (0 === this.tokens.length) throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            var token = this.expect(e1);
            token || this.throwError("is unexpected, expecting [" + e1 + "]", this.peek());
            return token;
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            return this.tokens[0];
        },
        peek: function(e1, e2, e3, e4) {
            return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function(i, e1, e2, e3, e4) {
            if (this.tokens.length > i) {
                var token = this.tokens[i], t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) return token;
            }
            return !1;
        },
        expect: function(e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            if (token) {
                this.tokens.shift();
                return token;
            }
            return !1;
        },
        constants: {
            true: {
                type: AST.Literal,
                value: !0
            },
            false: {
                type: AST.Literal,
                value: !1
            },
            null: {
                type: AST.Literal,
                value: null
            },
            undefined: {
                type: AST.Literal,
                value: undefined
            },
            this: {
                type: AST.ThisExpression
            }
        }
    };
    ASTCompiler.prototype = {
        compile: function(expression, expensiveChecks) {
            var self = this, ast = this.astBuilder.ast(expression);
            this.state = {
                nextId: 0,
                filters: {},
                expensiveChecks: expensiveChecks,
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            findConstantAndWatchExpressions(ast, self.$filter);
            var assignable, extra = "";
            this.stage = "assign";
            if (assignable = assignableAST(ast)) {
                this.state.computing = "assign";
                var result = this.nextId();
                this.recurse(assignable, result);
                this.return_(result);
                extra = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            }
            var toWatch = getInputs(ast.body);
            self.stage = "inputs";
            forEach(toWatch, function(watch, key) {
                var fnKey = "fn" + key;
                self.state[fnKey] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                self.state.computing = fnKey;
                var intoId = self.nextId();
                self.recurse(watch, intoId);
                self.return_(intoId);
                self.state.inputs.push(fnKey);
                watch.watchId = key;
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(ast);
            var fnString = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + extra + this.watchFns() + "return fn;", fn = new Function("$filter", "ensureSafeMemberName", "ensureSafeObject", "ensureSafeFunction", "getStringValue", "ensureSafeAssignContext", "ifDefined", "plus", "text", fnString)(this.$filter, ensureSafeMemberName, ensureSafeObject, ensureSafeFunction, getStringValue, ensureSafeAssignContext, ifDefined, plusFn, expression);
            this.state = this.stage = undefined;
            fn.literal = isLiteral(ast);
            fn.constant = isConstant(ast);
            return fn;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var result = [], fns = this.state.inputs, self = this;
            forEach(fns, function(name) {
                result.push("var " + name + "=" + self.generateFunction(name, "s"));
            });
            fns.length && result.push("fn.inputs=[" + fns.join(",") + "];");
            return result.join("");
        },
        generateFunction: function(name, params) {
            return "function(" + params + "){" + this.varsPrefix(name) + this.body(name) + "};";
        },
        filterPrefix: function() {
            var parts = [], self = this;
            forEach(this.state.filters, function(id, filter) {
                parts.push(id + "=$filter(" + self.escape(filter) + ")");
            });
            return parts.length ? "var " + parts.join(",") + ";" : "";
        },
        varsPrefix: function(section) {
            return this.state[section].vars.length ? "var " + this.state[section].vars.join(",") + ";" : "";
        },
        body: function(section) {
            return this.state[section].body.join("");
        },
        recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var left, right, args, expression, self = this;
            recursionFn = recursionFn || noop;
            if (skipWatchIdCheck || !isDefined(ast.watchId)) switch (ast.type) {
              case AST.Program:
                forEach(ast.body, function(expression, pos) {
                    self.recurse(expression.expression, undefined, undefined, function(expr) {
                        right = expr;
                    });
                    pos !== ast.body.length - 1 ? self.current().body.push(right, ";") : self.return_(right);
                });
                break;

              case AST.Literal:
                expression = this.escape(ast.value);
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.UnaryExpression:
                this.recurse(ast.argument, undefined, undefined, function(expr) {
                    right = expr;
                });
                expression = ast.operator + "(" + this.ifDefined(right, 0) + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.BinaryExpression:
                this.recurse(ast.left, undefined, undefined, function(expr) {
                    left = expr;
                });
                this.recurse(ast.right, undefined, undefined, function(expr) {
                    right = expr;
                });
                expression = "+" === ast.operator ? this.plus(left, right) : "-" === ast.operator ? this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0) : "(" + left + ")" + ast.operator + "(" + right + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.LogicalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.left, intoId);
                self.if_("&&" === ast.operator ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
                recursionFn(intoId);
                break;

              case AST.ConditionalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.test, intoId);
                self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
                recursionFn(intoId);
                break;

              case AST.Identifier:
                intoId = intoId || this.nextId();
                if (nameId) {
                    nameId.context = "inputs" === self.stage ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", ast.name) + "?l:s");
                    nameId.computed = !1;
                    nameId.name = ast.name;
                }
                ensureSafeMemberName(ast.name);
                self.if_("inputs" === self.stage || self.not(self.getHasOwnProperty("l", ast.name)), function() {
                    self.if_("inputs" === self.stage || "s", function() {
                        create && 1 !== create && self.if_(self.not(self.nonComputedMember("s", ast.name)), self.lazyAssign(self.nonComputedMember("s", ast.name), "{}"));
                        self.assign(intoId, self.nonComputedMember("s", ast.name));
                    });
                }, intoId && self.lazyAssign(intoId, self.nonComputedMember("l", ast.name)));
                (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) && self.addEnsureSafeObject(intoId);
                recursionFn(intoId);
                break;

              case AST.MemberExpression:
                left = nameId && (nameId.context = this.nextId()) || this.nextId();
                intoId = intoId || this.nextId();
                self.recurse(ast.object, left, undefined, function() {
                    self.if_(self.notNull(left), function() {
                        if (ast.computed) {
                            right = self.nextId();
                            self.recurse(ast.property, right);
                            self.getStringValue(right);
                            self.addEnsureSafeMemberName(right);
                            create && 1 !== create && self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), "{}"));
                            expression = self.ensureSafeObject(self.computedMember(left, right));
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = !0;
                                nameId.name = right;
                            }
                        } else {
                            ensureSafeMemberName(ast.property.name);
                            create && 1 !== create && self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), "{}"));
                            expression = self.nonComputedMember(left, ast.property.name);
                            (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) && (expression = self.ensureSafeObject(expression));
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = !1;
                                nameId.name = ast.property.name;
                            }
                        }
                    }, function() {
                        self.assign(intoId, "undefined");
                    });
                    recursionFn(intoId);
                }, !!create);
                break;

              case AST.CallExpression:
                intoId = intoId || this.nextId();
                if (ast.filter) {
                    right = self.filter(ast.callee.name);
                    args = [];
                    forEach(ast.arguments, function(expr) {
                        var argument = self.nextId();
                        self.recurse(expr, argument);
                        args.push(argument);
                    });
                    expression = right + "(" + args.join(",") + ")";
                    self.assign(intoId, expression);
                    recursionFn(intoId);
                } else {
                    right = self.nextId();
                    left = {};
                    args = [];
                    self.recurse(ast.callee, right, left, function() {
                        self.if_(self.notNull(right), function() {
                            self.addEnsureSafeFunction(right);
                            forEach(ast.arguments, function(expr) {
                                self.recurse(expr, self.nextId(), undefined, function(argument) {
                                    args.push(self.ensureSafeObject(argument));
                                });
                            });
                            if (left.name) {
                                self.state.expensiveChecks || self.addEnsureSafeObject(left.context);
                                expression = self.member(left.context, left.name, left.computed) + "(" + args.join(",") + ")";
                            } else expression = right + "(" + args.join(",") + ")";
                            expression = self.ensureSafeObject(expression);
                            self.assign(intoId, expression);
                        }, function() {
                            self.assign(intoId, "undefined");
                        });
                        recursionFn(intoId);
                    });
                }
                break;

              case AST.AssignmentExpression:
                right = this.nextId();
                left = {};
                if (!isAssignable(ast.left)) throw $parseMinErr("lval", "Trying to assign a value to a non l-value");
                this.recurse(ast.left, undefined, left, function() {
                    self.if_(self.notNull(left.context), function() {
                        self.recurse(ast.right, right);
                        self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
                        self.addEnsureSafeAssignContext(left.context);
                        expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                        self.assign(intoId, expression);
                        recursionFn(intoId || expression);
                    });
                }, 1);
                break;

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    self.recurse(expr, self.nextId(), undefined, function(argument) {
                        args.push(argument);
                    });
                });
                expression = "[" + args.join(",") + "]";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.ObjectExpression:
                args = [];
                forEach(ast.properties, function(property) {
                    self.recurse(property.value, self.nextId(), undefined, function(expr) {
                        args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : "" + property.key.value) + ":" + expr);
                    });
                });
                expression = "{" + args.join(",") + "}";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.ThisExpression:
                this.assign(intoId, "s");
                recursionFn("s");
                break;

              case AST.NGValueParameter:
                this.assign(intoId, "v");
                recursionFn("v");
            } else {
                intoId = intoId || this.nextId();
                this.if_("i", this.lazyAssign(intoId, this.computedMember("i", ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, !0));
            }
        },
        getHasOwnProperty: function(element, property) {
            var key = element + "." + property, own = this.current().own;
            own.hasOwnProperty(key) || (own[key] = this.nextId(!1, element + "&&(" + this.escape(property) + " in " + element + ")"));
            return own[key];
        },
        assign: function(id, value) {
            if (id) {
                this.current().body.push(id, "=", value, ";");
                return id;
            }
        },
        filter: function(filterName) {
            this.state.filters.hasOwnProperty(filterName) || (this.state.filters[filterName] = this.nextId(!0));
            return this.state.filters[filterName];
        },
        ifDefined: function(id, defaultValue) {
            return "ifDefined(" + id + "," + this.escape(defaultValue) + ")";
        },
        plus: function(left, right) {
            return "plus(" + left + "," + right + ")";
        },
        return_: function(id) {
            this.current().body.push("return ", id, ";");
        },
        if_: function(test, alternate, consequent) {
            if (!0 === test) alternate(); else {
                var body = this.current().body;
                body.push("if(", test, "){");
                alternate();
                body.push("}");
                if (consequent) {
                    body.push("else{");
                    consequent();
                    body.push("}");
                }
            }
        },
        not: function(expression) {
            return "!(" + expression + ")";
        },
        notNull: function(expression) {
            return expression + "!=null";
        },
        nonComputedMember: function(left, right) {
            return left + "." + right;
        },
        computedMember: function(left, right) {
            return left + "[" + right + "]";
        },
        member: function(left, right, computed) {
            return computed ? this.computedMember(left, right) : this.nonComputedMember(left, right);
        },
        addEnsureSafeObject: function(item) {
            this.current().body.push(this.ensureSafeObject(item), ";");
        },
        addEnsureSafeMemberName: function(item) {
            this.current().body.push(this.ensureSafeMemberName(item), ";");
        },
        addEnsureSafeFunction: function(item) {
            this.current().body.push(this.ensureSafeFunction(item), ";");
        },
        addEnsureSafeAssignContext: function(item) {
            this.current().body.push(this.ensureSafeAssignContext(item), ";");
        },
        ensureSafeObject: function(item) {
            return "ensureSafeObject(" + item + ",text)";
        },
        ensureSafeMemberName: function(item) {
            return "ensureSafeMemberName(" + item + ",text)";
        },
        ensureSafeFunction: function(item) {
            return "ensureSafeFunction(" + item + ",text)";
        },
        getStringValue: function(item) {
            this.assign(item, "getStringValue(" + item + ",text)");
        },
        ensureSafeAssignContext: function(item) {
            return "ensureSafeAssignContext(" + item + ",text)";
        },
        lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var self = this;
            return function() {
                self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
            };
        },
        lazyAssign: function(id, value) {
            var self = this;
            return function() {
                self.assign(id, value);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(c) {
            return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(value) {
            if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (isNumber(value)) return value.toString();
            if (!0 === value) return "true";
            if (!1 === value) return "false";
            if (null === value) return "null";
            if (void 0 === value) return "undefined";
            throw $parseMinErr("esc", "IMPOSSIBLE");
        },
        nextId: function(skip, init) {
            var id = "v" + this.state.nextId++;
            skip || this.current().vars.push(id + (init ? "=" + init : ""));
            return id;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    };
    ASTInterpreter.prototype = {
        compile: function(expression, expensiveChecks) {
            var self = this, ast = this.astBuilder.ast(expression);
            this.expression = expression;
            this.expensiveChecks = expensiveChecks;
            findConstantAndWatchExpressions(ast, self.$filter);
            var assignable, assign;
            (assignable = assignableAST(ast)) && (assign = this.recurse(assignable));
            var inputs, toWatch = getInputs(ast.body);
            if (toWatch) {
                inputs = [];
                forEach(toWatch, function(watch, key) {
                    var input = self.recurse(watch);
                    watch.input = input;
                    inputs.push(input);
                    watch.watchId = key;
                });
            }
            var expressions = [];
            forEach(ast.body, function(expression) {
                expressions.push(self.recurse(expression.expression));
            });
            var fn = 0 === ast.body.length ? function() {} : 1 === ast.body.length ? expressions[0] : function(scope, locals) {
                var lastValue;
                forEach(expressions, function(exp) {
                    lastValue = exp(scope, locals);
                });
                return lastValue;
            };
            assign && (fn.assign = function(scope, value, locals) {
                return assign(scope, locals, value);
            });
            inputs && (fn.inputs = inputs);
            fn.literal = isLiteral(ast);
            fn.constant = isConstant(ast);
            return fn;
        },
        recurse: function(ast, context, create) {
            var left, right, args, self = this;
            if (ast.input) return this.inputs(ast.input, ast.watchId);
            switch (ast.type) {
              case AST.Literal:
                return this.value(ast.value, context);

              case AST.UnaryExpression:
                right = this.recurse(ast.argument);
                return this["unary" + ast.operator](right, context);

              case AST.BinaryExpression:
              case AST.LogicalExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.ConditionalExpression:
                return this["ternary?:"](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);

              case AST.Identifier:
                ensureSafeMemberName(ast.name, self.expression);
                return self.identifier(ast.name, self.expensiveChecks || isPossiblyDangerousMemberName(ast.name), context, create, self.expression);

              case AST.MemberExpression:
                left = this.recurse(ast.object, !1, !!create);
                if (!ast.computed) {
                    ensureSafeMemberName(ast.property.name, self.expression);
                    right = ast.property.name;
                }
                ast.computed && (right = this.recurse(ast.property));
                return ast.computed ? this.computedMember(left, right, context, create, self.expression) : this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);

              case AST.CallExpression:
                args = [];
                forEach(ast.arguments, function(expr) {
                    args.push(self.recurse(expr));
                });
                ast.filter && (right = this.$filter(ast.callee.name));
                ast.filter || (right = this.recurse(ast.callee, !0));
                return ast.filter ? function(scope, locals, assign, inputs) {
                    for (var values = [], i = 0; i < args.length; ++i) values.push(args[i](scope, locals, assign, inputs));
                    var value = right.apply(undefined, values, inputs);
                    return context ? {
                        context: undefined,
                        name: undefined,
                        value: value
                    } : value;
                } : function(scope, locals, assign, inputs) {
                    var value, rhs = right(scope, locals, assign, inputs);
                    if (null != rhs.value) {
                        ensureSafeObject(rhs.context, self.expression);
                        ensureSafeFunction(rhs.value, self.expression);
                        for (var values = [], i = 0; i < args.length; ++i) values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
                        value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.AssignmentExpression:
                left = this.recurse(ast.left, !0, 1);
                right = this.recurse(ast.right);
                return function(scope, locals, assign, inputs) {
                    var lhs = left(scope, locals, assign, inputs), rhs = right(scope, locals, assign, inputs);
                    ensureSafeObject(lhs.value, self.expression);
                    ensureSafeAssignContext(lhs.context);
                    lhs.context[lhs.name] = rhs;
                    return context ? {
                        value: rhs
                    } : rhs;
                };

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    args.push(self.recurse(expr));
                });
                return function(scope, locals, assign, inputs) {
                    for (var value = [], i = 0; i < args.length; ++i) value.push(args[i](scope, locals, assign, inputs));
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ObjectExpression:
                args = [];
                forEach(ast.properties, function(property) {
                    args.push({
                        key: property.key.type === AST.Identifier ? property.key.name : "" + property.key.value,
                        value: self.recurse(property.value)
                    });
                });
                return function(scope, locals, assign, inputs) {
                    for (var value = {}, i = 0; i < args.length; ++i) value[args[i].key] = args[i].value(scope, locals, assign, inputs);
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ThisExpression:
                return function(scope) {
                    return context ? {
                        value: scope
                    } : scope;
                };

              case AST.NGValueParameter:
                return function(scope, locals, assign, inputs) {
                    return context ? {
                        value: assign
                    } : assign;
                };
            }
        },
        "unary+": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                arg = isDefined(arg) ? +arg : 0;
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary-": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                arg = isDefined(arg) ? -arg : 0;
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary!": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = !argument(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary+": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs), rhs = right(scope, locals, assign, inputs), arg = plusFn(lhs, rhs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary-": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs), rhs = right(scope, locals, assign, inputs), arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary*": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary/": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary%": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary===": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary&&": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary||": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "ternary?:": function(test, alternate, consequent, context) {
            return function(scope, locals, assign, inputs) {
                var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        value: function(value, context) {
            return function() {
                return context ? {
                    context: undefined,
                    name: undefined,
                    value: value
                } : value;
            };
        },
        identifier: function(name, expensiveChecks, context, create, expression) {
            return function(scope, locals, assign, inputs) {
                var base = locals && name in locals ? locals : scope;
                create && 1 !== create && base && !base[name] && (base[name] = {});
                var value = base ? base[name] : undefined;
                expensiveChecks && ensureSafeObject(value, expression);
                return context ? {
                    context: base,
                    name: name,
                    value: value
                } : value;
            };
        },
        computedMember: function(left, right, context, create, expression) {
            return function(scope, locals, assign, inputs) {
                var rhs, value, lhs = left(scope, locals, assign, inputs);
                if (null != lhs) {
                    rhs = right(scope, locals, assign, inputs);
                    rhs = getStringValue(rhs);
                    ensureSafeMemberName(rhs, expression);
                    create && 1 !== create && lhs && !lhs[rhs] && (lhs[rhs] = {});
                    value = lhs[rhs];
                    ensureSafeObject(value, expression);
                }
                return context ? {
                    context: lhs,
                    name: rhs,
                    value: value
                } : value;
            };
        },
        nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                create && 1 !== create && lhs && !lhs[right] && (lhs[right] = {});
                var value = null != lhs ? lhs[right] : undefined;
                (expensiveChecks || isPossiblyDangerousMemberName(right)) && ensureSafeObject(value, expression);
                return context ? {
                    context: lhs,
                    name: right,
                    value: value
                } : value;
            };
        },
        inputs: function(input, watchId) {
            return function(scope, value, locals, inputs) {
                return inputs ? inputs[watchId] : input(scope, value, locals);
            };
        }
    };
    var Parser = function(lexer, $filter, options) {
        this.lexer = lexer;
        this.$filter = $filter;
        this.options = options;
        this.ast = new AST(this.lexer);
        this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) : new ASTCompiler(this.ast, $filter);
    };
    Parser.prototype = {
        constructor: Parser,
        parse: function(text) {
            return this.astCompiler.compile(text, this.options.expensiveChecks);
        }
    };
    var objectValueOf = Object.prototype.valueOf, $sceMinErr = minErr("$sce"), SCE_CONTEXTS = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, $compileMinErr = minErr("$compile"), urlParsingNode = document.createElement("a"), originUrl = urlResolve(window.location.href);
    $$CookieReader.$inject = [ "$document" ];
    $FilterProvider.$inject = [ "$provide" ];
    var MAX_DIGITS = 22, DECIMAL_SEP = ".", ZERO_CHAR = "0";
    currencyFilter.$inject = [ "$locale" ];
    numberFilter.$inject = [ "$locale" ];
    var DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4),
        yy: dateGetter("FullYear", 2, 0, !0),
        y: dateGetter("FullYear", 1),
        MMMM: dateStrGetter("Month"),
        MMM: dateStrGetter("Month", !0),
        MM: dateGetter("Month", 2, 1),
        M: dateGetter("Month", 1, 1),
        dd: dateGetter("Date", 2),
        d: dateGetter("Date", 1),
        HH: dateGetter("Hours", 2),
        H: dateGetter("Hours", 1),
        hh: dateGetter("Hours", 2, -12),
        h: dateGetter("Hours", 1, -12),
        mm: dateGetter("Minutes", 2),
        m: dateGetter("Minutes", 1),
        ss: dateGetter("Seconds", 2),
        s: dateGetter("Seconds", 1),
        sss: dateGetter("Milliseconds", 3),
        EEEE: dateStrGetter("Day"),
        EEE: dateStrGetter("Day", !0),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1),
        G: eraGetter,
        GG: eraGetter,
        GGG: eraGetter,
        GGGG: longEraGetter
    }, DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/, NUMBER_STRING = /^\-?\d+$/;
    dateFilter.$inject = [ "$locale" ];
    var lowercaseFilter = valueFn(lowercase), uppercaseFilter = valueFn(uppercase);
    orderByFilter.$inject = [ "$parse" ];
    var htmlAnchorDirective = valueFn({
        restrict: "E",
        compile: function(element, attr) {
            if (!attr.href && !attr.xlinkHref) return function(scope, element) {
                if ("a" === element[0].nodeName.toLowerCase()) {
                    var href = "[object SVGAnimatedString]" === toString.call(element.prop("href")) ? "xlink:href" : "href";
                    element.on("click", function(event) {
                        element.attr(href) || event.preventDefault();
                    });
                }
            };
        }
    }), ngAttributeAliasDirectives = {};
    forEach(BOOLEAN_ATTR, function(propName, attrName) {
        function defaultLinkFn(scope, element, attr) {
            scope.$watch(attr[normalized], function(value) {
                attr.$set(attrName, !!value);
            });
        }
        if ("multiple" != propName) {
            var normalized = directiveNormalize("ng-" + attrName), linkFn = defaultLinkFn;
            "checked" === propName && (linkFn = function(scope, element, attr) {
                attr.ngModel !== attr[normalized] && defaultLinkFn(scope, element, attr);
            });
            ngAttributeAliasDirectives[normalized] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: linkFn
                };
            };
        }
    });
    forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function() {
            return {
                priority: 100,
                link: function(scope, element, attr) {
                    if ("ngPattern" === ngAttr && "/" == attr.ngPattern.charAt(0)) {
                        var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                        if (match) {
                            attr.$set("ngPattern", new RegExp(match[1], match[2]));
                            return;
                        }
                    }
                    scope.$watch(attr[ngAttr], function(value) {
                        attr.$set(ngAttr, value);
                    });
                }
            };
        };
    });
    forEach([ "src", "srcset", "href" ], function(attrName) {
        var normalized = directiveNormalize("ng-" + attrName);
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                priority: 99,
                link: function(scope, element, attr) {
                    var propName = attrName, name = attrName;
                    if ("href" === attrName && "[object SVGAnimatedString]" === toString.call(element.prop("href"))) {
                        name = "xlinkHref";
                        attr.$attr[name] = "xlink:href";
                        propName = null;
                    }
                    attr.$observe(normalized, function(value) {
                        if (value) {
                            attr.$set(name, value);
                            msie && propName && element.prop(propName, attr[name]);
                        } else "href" === attrName && attr.$set(name, null);
                    });
                }
            };
        };
    });
    var nullFormCtrl = {
        $addControl: noop,
        $$renameControl: nullFormRenameControl,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop
    }, SUBMITTED_CLASS = "ng-submitted";
    FormController.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ];
    var formDirectiveFactory = function(isNgForm) {
        return [ "$timeout", "$parse", function($timeout, $parse) {
            function getSetter(expression) {
                return "" === expression ? $parse('this[""]').assign : $parse(expression).assign || noop;
            }
            return {
                name: "form",
                restrict: isNgForm ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: FormController,
                compile: function(formElement, attr) {
                    formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                    var nameAttr = attr.name ? "name" : !(!isNgForm || !attr.ngForm) && "ngForm";
                    return {
                        pre: function(scope, formElement, attr, ctrls) {
                            var controller = ctrls[0];
                            if (!("action" in attr)) {
                                var handleFormSubmission = function(event) {
                                    scope.$apply(function() {
                                        controller.$commitViewValue();
                                        controller.$setSubmitted();
                                    });
                                    event.preventDefault();
                                };
                                addEventListenerFn(formElement[0], "submit", handleFormSubmission);
                                formElement.on("$destroy", function() {
                                    $timeout(function() {
                                        removeEventListenerFn(formElement[0], "submit", handleFormSubmission);
                                    }, 0, !1);
                                });
                            }
                            (ctrls[1] || controller.$$parentForm).$addControl(controller);
                            var setter = nameAttr ? getSetter(controller.$name) : noop;
                            if (nameAttr) {
                                setter(scope, controller);
                                attr.$observe(nameAttr, function(newValue) {
                                    if (controller.$name !== newValue) {
                                        setter(scope, undefined);
                                        controller.$$parentForm.$$renameControl(controller, newValue);
                                        setter = getSetter(controller.$name);
                                        setter(scope, controller);
                                    }
                                });
                            }
                            formElement.on("$destroy", function() {
                                controller.$$parentForm.$removeControl(controller);
                                setter(scope, undefined);
                                extend(controller, nullFormCtrl);
                            });
                        }
                    };
                }
            };
        } ];
    }, formDirective = formDirectiveFactory(), ngFormDirective = formDirectiveFactory(!0), ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i, EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i, NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/, DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/, DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, WEEK_REGEXP = /^(\d{4})-W(\d\d)$/, MONTH_REGEXP = /^(\d{4})-(\d\d)$/, TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, inputType = {
        text: textInputType,
        date: createDateInputType("date", DATE_REGEXP, createDateParser(DATE_REGEXP, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": createDateInputType("datetimelocal", DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [ "yyyy", "MM", "dd", "HH", "mm", "ss", "sss" ]), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: createDateInputType("time", TIME_REGEXP, createDateParser(TIME_REGEXP, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: createDateInputType("week", WEEK_REGEXP, weekParser, "yyyy-Www"),
        month: createDateInputType("month", MONTH_REGEXP, createDateParser(MONTH_REGEXP, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: numberInputType,
        url: urlInputType,
        email: emailInputType,
        radio: radioInputType,
        checkbox: checkboxInputType,
        hidden: noop,
        button: noop,
        submit: noop,
        reset: noop,
        file: noop
    }, inputDirective = [ "$browser", "$sniffer", "$filter", "$parse", function($browser, $sniffer, $filter, $parse) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(scope, element, attr, ctrls) {
                    ctrls[0] && (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                }
            }
        };
    } ], CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/, ngValueDirective = function() {
        return {
            restrict: "A",
            priority: 100,
            compile: function(tpl, tplAttr) {
                return CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue) ? function(scope, elm, attr) {
                    attr.$set("value", scope.$eval(attr.ngValue));
                } : function(scope, elm, attr) {
                    scope.$watch(attr.ngValue, function(value) {
                        attr.$set("value", value);
                    });
                };
            }
        };
    }, ngBindDirective = [ "$compile", function($compile) {
        return {
            restrict: "AC",
            compile: function(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBind);
                    element = element[0];
                    scope.$watch(attr.ngBind, function(value) {
                        element.textContent = isUndefined(value) ? "" : value;
                    });
                };
            }
        };
    } ], ngBindTemplateDirective = [ "$interpolate", "$compile", function($interpolate, $compile) {
        return {
            compile: function(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function(scope, element, attr) {
                    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                    $compile.$$addBindingInfo(element, interpolateFn.expressions);
                    element = element[0];
                    attr.$observe("ngBindTemplate", function(value) {
                        element.textContent = isUndefined(value) ? "" : value;
                    });
                };
            }
        };
    } ], ngBindHtmlDirective = [ "$sce", "$parse", "$compile", function($sce, $parse, $compile) {
        return {
            restrict: "A",
            compile: function(tElement, tAttrs) {
                var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml), ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function(value) {
                    return (value || "").toString();
                });
                $compile.$$addBindingClass(tElement);
                return function(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBindHtml);
                    scope.$watch(ngBindHtmlWatch, function() {
                        element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || "");
                    });
                };
            }
        };
    } ], ngChangeDirective = valueFn({
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function() {
                scope.$eval(attr.ngChange);
            });
        }
    }), ngClassDirective = classDirective("", !0), ngClassOddDirective = classDirective("Odd", 0), ngClassEvenDirective = classDirective("Even", 1), ngCloakDirective = ngDirective({
        compile: function(element, attr) {
            attr.$set("ngCloak", undefined);
            element.removeClass("ng-cloak");
        }
    }), ngControllerDirective = [ function() {
        return {
            restrict: "A",
            scope: !0,
            controller: "@",
            priority: 500
        };
    } ], ngEventDirectives = {}, forceAsyncEvents = {
        blur: !0,
        focus: !0
    };
    forEach("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(eventName) {
        var directiveName = directiveNormalize("ng-" + eventName);
        ngEventDirectives[directiveName] = [ "$parse", "$rootScope", function($parse, $rootScope) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr[directiveName], null, !0);
                    return function(scope, element) {
                        element.on(eventName, function(event) {
                            var callback = function() {
                                fn(scope, {
                                    $event: event
                                });
                            };
                            forceAsyncEvents[eventName] && $rootScope.$$phase ? scope.$evalAsync(callback) : scope.$apply(callback);
                        });
                    };
                }
            };
        } ];
    });
    var ngIfDirective = [ "$animate", function($animate) {
        return {
            multiElement: !0,
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function(value) {
                    if (value) childScope || $transclude(function(clone, newScope) {
                        childScope = newScope;
                        clone[clone.length++] = document.createComment(" end ngIf: " + $attr.ngIf + " ");
                        block = {
                            clone: clone
                        };
                        $animate.enter(clone, $element.parent(), $element);
                    }); else {
                        if (previousElements) {
                            previousElements.remove();
                            previousElements = null;
                        }
                        if (childScope) {
                            childScope.$destroy();
                            childScope = null;
                        }
                        if (block) {
                            previousElements = getBlockNodes(block.clone);
                            $animate.leave(previousElements).then(function() {
                                previousElements = null;
                            });
                            block = null;
                        }
                    }
                });
            }
        };
    } ], ngIncludeDirective = [ "$templateRequest", "$anchorScroll", "$animate", function($templateRequest, $anchorScroll, $animate) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: angular.noop,
            compile: function(element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || "", autoScrollExp = attr.autoscroll;
                return function(scope, $element, $attr, ctrl, $transclude) {
                    var currentScope, previousElement, currentElement, changeCounter = 0, cleanupLastIncludeContent = function() {
                        if (previousElement) {
                            previousElement.remove();
                            previousElement = null;
                        }
                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }
                        if (currentElement) {
                            $animate.leave(currentElement).then(function() {
                                previousElement = null;
                            });
                            previousElement = currentElement;
                            currentElement = null;
                        }
                    };
                    scope.$watch(srcExp, function(src) {
                        var afterAnimation = function() {
                            !isDefined(autoScrollExp) || autoScrollExp && !scope.$eval(autoScrollExp) || $anchorScroll();
                        }, thisChangeId = ++changeCounter;
                        if (src) {
                            $templateRequest(src, !0).then(function(response) {
                                if (!scope.$$destroyed && thisChangeId === changeCounter) {
                                    var newScope = scope.$new();
                                    ctrl.template = response;
                                    var clone = $transclude(newScope, function(clone) {
                                        cleanupLastIncludeContent();
                                        $animate.enter(clone, null, $element).then(afterAnimation);
                                    });
                                    currentScope = newScope;
                                    currentElement = clone;
                                    currentScope.$emit("$includeContentLoaded", src);
                                    scope.$eval(onloadExp);
                                }
                            }, function() {
                                if (!scope.$$destroyed && thisChangeId === changeCounter) {
                                    cleanupLastIncludeContent();
                                    scope.$emit("$includeContentError", src);
                                }
                            });
                            scope.$emit("$includeContentRequested", src);
                        } else {
                            cleanupLastIncludeContent();
                            ctrl.template = null;
                        }
                    });
                };
            }
        };
    } ], ngIncludeFillContentDirective = [ "$compile", function($compile) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(scope, $element, $attr, ctrl) {
                if (/SVG/.test($element[0].toString())) {
                    $element.empty();
                    $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope, function(clone) {
                        $element.append(clone);
                    }, {
                        futureParentElement: $element
                    });
                } else {
                    $element.html(ctrl.template);
                    $compile($element.contents())(scope);
                }
            }
        };
    } ], ngInitDirective = ngDirective({
        priority: 450,
        compile: function() {
            return {
                pre: function(scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    }), ngListDirective = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(scope, element, attr, ctrl) {
                var ngList = element.attr(attr.$attr.ngList) || ", ", trimValues = "false" !== attr.ngTrim, separator = trimValues ? trim(ngList) : ngList, parse = function(viewValue) {
                    if (!isUndefined(viewValue)) {
                        var list = [];
                        viewValue && forEach(viewValue.split(separator), function(value) {
                            value && list.push(trimValues ? trim(value) : value);
                        });
                        return list;
                    }
                };
                ctrl.$parsers.push(parse);
                ctrl.$formatters.push(function(value) {
                    return isArray(value) ? value.join(ngList) : undefined;
                });
                ctrl.$isEmpty = function(value) {
                    return !value || !value.length;
                };
            }
        };
    }, VALID_CLASS = "ng-valid", INVALID_CLASS = "ng-invalid", PRISTINE_CLASS = "ng-pristine", DIRTY_CLASS = "ng-dirty", PENDING_CLASS = "ng-pending", ngModelMinErr = minErr("ngModel"), NgModelController = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$rootScope", "$q", "$interpolate", function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = undefined;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = !0;
        this.$touched = !1;
        this.$pristine = !0;
        this.$dirty = !1;
        this.$valid = !0;
        this.$invalid = !1;
        this.$error = {};
        this.$$success = {};
        this.$pending = undefined;
        this.$name = $interpolate($attr.name || "", !1)($scope);
        this.$$parentForm = nullFormCtrl;
        var parserValid, parsedNgModel = $parse($attr.ngModel), parsedNgModelAssign = parsedNgModel.assign, ngModelGet = parsedNgModel, ngModelSet = parsedNgModelAssign, pendingDebounce = null, ctrl = this;
        this.$$setOptions = function(options) {
            ctrl.$options = options;
            if (options && options.getterSetter) {
                var invokeModelGetter = $parse($attr.ngModel + "()"), invokeModelSetter = $parse($attr.ngModel + "($$$p)");
                ngModelGet = function($scope) {
                    var modelValue = parsedNgModel($scope);
                    isFunction(modelValue) && (modelValue = invokeModelGetter($scope));
                    return modelValue;
                };
                ngModelSet = function($scope, newValue) {
                    isFunction(parsedNgModel($scope)) ? invokeModelSetter($scope, {
                        $$$p: ctrl.$modelValue
                    }) : parsedNgModelAssign($scope, ctrl.$modelValue);
                };
            } else if (!parsedNgModel.assign) throw ngModelMinErr("nonassign", "Expression '{0}' is non-assignable. Element: {1}", $attr.ngModel, startingTag($element));
        };
        this.$render = noop;
        this.$isEmpty = function(value) {
            return isUndefined(value) || "" === value || null === value || value !== value;
        };
        var currentValidationRunId = 0;
        addSetValidityMethod({
            ctrl: this,
            $element: $element,
            set: function(object, property) {
                object[property] = !0;
            },
            unset: function(object, property) {
                delete object[property];
            },
            $animate: $animate
        });
        this.$setPristine = function() {
            ctrl.$dirty = !1;
            ctrl.$pristine = !0;
            $animate.removeClass($element, DIRTY_CLASS);
            $animate.addClass($element, PRISTINE_CLASS);
        };
        this.$setDirty = function() {
            ctrl.$dirty = !0;
            ctrl.$pristine = !1;
            $animate.removeClass($element, PRISTINE_CLASS);
            $animate.addClass($element, DIRTY_CLASS);
            ctrl.$$parentForm.$setDirty();
        };
        this.$setUntouched = function() {
            ctrl.$touched = !1;
            ctrl.$untouched = !0;
            $animate.setClass($element, "ng-untouched", "ng-touched");
        };
        this.$setTouched = function() {
            ctrl.$touched = !0;
            ctrl.$untouched = !1;
            $animate.setClass($element, "ng-touched", "ng-untouched");
        };
        this.$rollbackViewValue = function() {
            $timeout.cancel(pendingDebounce);
            ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
            ctrl.$render();
        };
        this.$validate = function() {
            if (!isNumber(ctrl.$modelValue) || !isNaN(ctrl.$modelValue)) {
                var viewValue = ctrl.$$lastCommittedViewValue, modelValue = ctrl.$$rawModelValue, prevValid = ctrl.$valid, prevModelValue = ctrl.$modelValue, allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
                ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
                    if (!allowInvalid && prevValid !== allValid) {
                        ctrl.$modelValue = allValid ? modelValue : undefined;
                        ctrl.$modelValue !== prevModelValue && ctrl.$$writeModelToScope();
                    }
                });
            }
        };
        this.$$runValidators = function(modelValue, viewValue, doneCallback) {
            function setValidity(name, isValid) {
                localValidationRunId === currentValidationRunId && ctrl.$setValidity(name, isValid);
            }
            function validationDone(allValid) {
                localValidationRunId === currentValidationRunId && doneCallback(allValid);
            }
            currentValidationRunId++;
            var localValidationRunId = currentValidationRunId;
            !function() {
                var errorKey = ctrl.$$parserName || "parse";
                if (!isUndefined(parserValid)) {
                    if (!parserValid) {
                        forEach(ctrl.$validators, function(v, name) {
                            setValidity(name, null);
                        });
                        forEach(ctrl.$asyncValidators, function(v, name) {
                            setValidity(name, null);
                        });
                    }
                    setValidity(errorKey, parserValid);
                    return parserValid;
                }
                setValidity(errorKey, null);
                return !0;
            }() ? validationDone(!1) : function() {
                var syncValidatorsValid = !0;
                forEach(ctrl.$validators, function(validator, name) {
                    var result = validator(modelValue, viewValue);
                    syncValidatorsValid = syncValidatorsValid && result;
                    setValidity(name, result);
                });
                if (!syncValidatorsValid) {
                    forEach(ctrl.$asyncValidators, function(v, name) {
                        setValidity(name, null);
                    });
                    return !1;
                }
                return !0;
            }() ? function() {
                var validatorPromises = [], allValid = !0;
                forEach(ctrl.$asyncValidators, function(validator, name) {
                    var promise = validator(modelValue, viewValue);
                    if (!isPromiseLike(promise)) throw ngModelMinErr("nopromise", "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
                    setValidity(name, undefined);
                    validatorPromises.push(promise.then(function() {
                        setValidity(name, !0);
                    }, function(error) {
                        allValid = !1;
                        setValidity(name, !1);
                    }));
                });
                validatorPromises.length ? $q.all(validatorPromises).then(function() {
                    validationDone(allValid);
                }, noop) : validationDone(!0);
            }() : validationDone(!1);
        };
        this.$commitViewValue = function() {
            var viewValue = ctrl.$viewValue;
            $timeout.cancel(pendingDebounce);
            if (ctrl.$$lastCommittedViewValue !== viewValue || "" === viewValue && ctrl.$$hasNativeValidators) {
                ctrl.$$lastCommittedViewValue = viewValue;
                ctrl.$pristine && this.$setDirty();
                this.$$parseAndValidate();
            }
        };
        this.$$parseAndValidate = function() {
            function writeToModelIfNeeded() {
                ctrl.$modelValue !== prevModelValue && ctrl.$$writeModelToScope();
            }
            var viewValue = ctrl.$$lastCommittedViewValue, modelValue = viewValue;
            parserValid = !isUndefined(modelValue) || undefined;
            if (parserValid) for (var i = 0; i < ctrl.$parsers.length; i++) {
                modelValue = ctrl.$parsers[i](modelValue);
                if (isUndefined(modelValue)) {
                    parserValid = !1;
                    break;
                }
            }
            isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue) && (ctrl.$modelValue = ngModelGet($scope));
            var prevModelValue = ctrl.$modelValue, allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
            ctrl.$$rawModelValue = modelValue;
            if (allowInvalid) {
                ctrl.$modelValue = modelValue;
                writeToModelIfNeeded();
            }
            ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
                if (!allowInvalid) {
                    ctrl.$modelValue = allValid ? modelValue : undefined;
                    writeToModelIfNeeded();
                }
            });
        };
        this.$$writeModelToScope = function() {
            ngModelSet($scope, ctrl.$modelValue);
            forEach(ctrl.$viewChangeListeners, function(listener) {
                try {
                    listener();
                } catch (e) {
                    $exceptionHandler(e);
                }
            });
        };
        this.$setViewValue = function(value, trigger) {
            ctrl.$viewValue = value;
            ctrl.$options && !ctrl.$options.updateOnDefault || ctrl.$$debounceViewValueCommit(trigger);
        };
        this.$$debounceViewValueCommit = function(trigger) {
            var debounce, debounceDelay = 0, options = ctrl.$options;
            if (options && isDefined(options.debounce)) {
                debounce = options.debounce;
                isNumber(debounce) ? debounceDelay = debounce : isNumber(debounce[trigger]) ? debounceDelay = debounce[trigger] : isNumber(debounce.default) && (debounceDelay = debounce.default);
            }
            $timeout.cancel(pendingDebounce);
            debounceDelay ? pendingDebounce = $timeout(function() {
                ctrl.$commitViewValue();
            }, debounceDelay) : $rootScope.$$phase ? ctrl.$commitViewValue() : $scope.$apply(function() {
                ctrl.$commitViewValue();
            });
        };
        $scope.$watch(function() {
            var modelValue = ngModelGet($scope);
            if (modelValue !== ctrl.$modelValue && (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)) {
                ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
                parserValid = undefined;
                for (var formatters = ctrl.$formatters, idx = formatters.length, viewValue = modelValue; idx--; ) viewValue = formatters[idx](viewValue);
                if (ctrl.$viewValue !== viewValue) {
                    ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
                    ctrl.$render();
                    ctrl.$$runValidators(modelValue, viewValue, noop);
                }
            }
            return modelValue;
        });
    } ], ngModelDirective = [ "$rootScope", function($rootScope) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: NgModelController,
            priority: 1,
            compile: function(element) {
                element.addClass(PRISTINE_CLASS).addClass("ng-untouched").addClass(VALID_CLASS);
                return {
                    pre: function(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || modelCtrl.$$parentForm;
                        modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);
                        formCtrl.$addControl(modelCtrl);
                        attr.$observe("name", function(newValue) {
                            modelCtrl.$name !== newValue && modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                        });
                        scope.$on("$destroy", function() {
                            modelCtrl.$$parentForm.$removeControl(modelCtrl);
                        });
                    },
                    post: function(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0];
                        modelCtrl.$options && modelCtrl.$options.updateOn && element.on(modelCtrl.$options.updateOn, function(ev) {
                            modelCtrl.$$debounceViewValueCommit(ev && ev.type);
                        });
                        element.on("blur", function(ev) {
                            modelCtrl.$touched || ($rootScope.$$phase ? scope.$evalAsync(modelCtrl.$setTouched) : scope.$apply(modelCtrl.$setTouched));
                        });
                    }
                };
            }
        };
    } ], DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/, ngModelOptionsDirective = function() {
        return {
            restrict: "A",
            controller: [ "$scope", "$attrs", function($scope, $attrs) {
                var that = this;
                this.$options = copy($scope.$eval($attrs.ngModelOptions));
                if (isDefined(this.$options.updateOn)) {
                    this.$options.updateOnDefault = !1;
                    this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
                        that.$options.updateOnDefault = !0;
                        return " ";
                    }));
                } else this.$options.updateOnDefault = !0;
            } ]
        };
    }, ngNonBindableDirective = ngDirective({
        terminal: !0,
        priority: 1e3
    }), ngOptionsMinErr = minErr("ngOptions"), NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, ngOptionsDirective = [ "$compile", "$parse", function($compile, $parse) {
        function parseOptionsExpression(optionsExp, selectElement, scope) {
            function Option(selectValue, viewValue, label, group, disabled) {
                this.selectValue = selectValue;
                this.viewValue = viewValue;
                this.label = label;
                this.group = group;
                this.disabled = disabled;
            }
            function getOptionValuesKeys(optionValues) {
                var optionValuesKeys;
                if (!keyName && isArrayLike(optionValues)) optionValuesKeys = optionValues; else {
                    optionValuesKeys = [];
                    for (var itemKey in optionValues) optionValues.hasOwnProperty(itemKey) && "$" !== itemKey.charAt(0) && optionValuesKeys.push(itemKey);
                }
                return optionValuesKeys;
            }
            var match = optionsExp.match(NG_OPTIONS_REGEXP);
            if (!match) throw ngOptionsMinErr("iexp", "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
            var valueName = match[5] || match[7], keyName = match[6], selectAs = / as /.test(match[0]) && match[1], trackBy = match[9], valueFn = $parse(match[2] ? match[1] : valueName), selectAsFn = selectAs && $parse(selectAs), viewValueFn = selectAsFn || valueFn, trackByFn = trackBy && $parse(trackBy), getTrackByValueFn = trackBy ? function(value, locals) {
                return trackByFn(scope, locals);
            } : function(value) {
                return hashKey(value);
            }, getTrackByValue = function(value, key) {
                return getTrackByValueFn(value, getLocals(value, key));
            }, displayFn = $parse(match[2] || match[1]), groupByFn = $parse(match[3] || ""), disableWhenFn = $parse(match[4] || ""), valuesFn = $parse(match[8]), locals = {}, getLocals = keyName ? function(value, key) {
                locals[keyName] = key;
                locals[valueName] = value;
                return locals;
            } : function(value) {
                locals[valueName] = value;
                return locals;
            };
            return {
                trackBy: trackBy,
                getTrackByValue: getTrackByValue,
                getWatchables: $parse(valuesFn, function(optionValues) {
                    var watchedArray = [];
                    optionValues = optionValues || [];
                    for (var optionValuesKeys = getOptionValuesKeys(optionValues), optionValuesLength = optionValuesKeys.length, index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index], locals = (optionValues[key], 
                        getLocals(optionValues[key], key)), selectValue = getTrackByValueFn(optionValues[key], locals);
                        watchedArray.push(selectValue);
                        if (match[2] || match[1]) {
                            var label = displayFn(scope, locals);
                            watchedArray.push(label);
                        }
                        if (match[4]) {
                            var disableWhen = disableWhenFn(scope, locals);
                            watchedArray.push(disableWhen);
                        }
                    }
                    return watchedArray;
                }),
                getOptions: function() {
                    for (var optionItems = [], selectValueMap = {}, optionValues = valuesFn(scope) || [], optionValuesKeys = getOptionValuesKeys(optionValues), optionValuesLength = optionValuesKeys.length, index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index], value = optionValues[key], locals = getLocals(value, key), viewValue = viewValueFn(scope, locals), selectValue = getTrackByValueFn(viewValue, locals), label = displayFn(scope, locals), group = groupByFn(scope, locals), disabled = disableWhenFn(scope, locals), optionItem = new Option(selectValue, viewValue, label, group, disabled);
                        optionItems.push(optionItem);
                        selectValueMap[selectValue] = optionItem;
                    }
                    return {
                        items: optionItems,
                        selectValueMap: selectValueMap,
                        getOptionFromViewValue: function(value) {
                            return selectValueMap[getTrackByValue(value)];
                        },
                        getViewValueFromOption: function(option) {
                            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
                        }
                    };
                }
            };
        }
        function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
            function updateOptionElement(option, element) {
                option.element = element;
                element.disabled = option.disabled;
                if (option.label !== element.label) {
                    element.label = option.label;
                    element.textContent = option.label;
                }
                option.value !== element.value && (element.value = option.selectValue);
            }
            function addOrReuseElement(parent, current, type, templateElement) {
                var element;
                if (current && lowercase(current.nodeName) === type) element = current; else {
                    element = templateElement.cloneNode(!1);
                    current ? parent.insertBefore(element, current) : parent.appendChild(element);
                }
                return element;
            }
            function removeExcessElements(current) {
                for (var next; current; ) {
                    next = current.nextSibling;
                    jqLiteRemove(current);
                    current = next;
                }
            }
            function skipEmptyAndUnknownOptions(current) {
                var emptyOption_ = emptyOption && emptyOption[0], unknownOption_ = unknownOption && unknownOption[0];
                if (emptyOption_ || unknownOption_) for (;current && (current === emptyOption_ || current === unknownOption_ || current.nodeType === NODE_TYPE_COMMENT || "option" === nodeName_(current) && "" === current.value); ) current = current.nextSibling;
                return current;
            }
            function updateOptions() {
                var previousValue = options && selectCtrl.readValue();
                options = ngOptions.getOptions();
                var groupMap = {}, currentElement = selectElement[0].firstChild;
                providedEmptyOption && selectElement.prepend(emptyOption);
                currentElement = skipEmptyAndUnknownOptions(currentElement);
                options.items.forEach(function(option) {
                    var group, groupElement, optionElement;
                    if (option.group) {
                        group = groupMap[option.group];
                        if (!group) {
                            groupElement = addOrReuseElement(selectElement[0], currentElement, "optgroup", optGroupTemplate);
                            currentElement = groupElement.nextSibling;
                            groupElement.label = option.group;
                            group = groupMap[option.group] = {
                                groupElement: groupElement,
                                currentOptionElement: groupElement.firstChild
                            };
                        }
                        optionElement = addOrReuseElement(group.groupElement, group.currentOptionElement, "option", optionTemplate);
                        updateOptionElement(option, optionElement);
                        group.currentOptionElement = optionElement.nextSibling;
                    } else {
                        optionElement = addOrReuseElement(selectElement[0], currentElement, "option", optionTemplate);
                        updateOptionElement(option, optionElement);
                        currentElement = optionElement.nextSibling;
                    }
                });
                Object.keys(groupMap).forEach(function(key) {
                    removeExcessElements(groupMap[key].currentOptionElement);
                });
                removeExcessElements(currentElement);
                ngModelCtrl.$render();
                if (!ngModelCtrl.$isEmpty(previousValue)) {
                    var nextValue = selectCtrl.readValue();
                    if (ngOptions.trackBy || multiple ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                        ngModelCtrl.$setViewValue(nextValue);
                        ngModelCtrl.$render();
                    }
                }
            }
            var ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                for (var emptyOption, selectCtrl = ctrls[0], multiple = attr.multiple, i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) if ("" === children[i].value) {
                    emptyOption = children.eq(i);
                    break;
                }
                var providedEmptyOption = !!emptyOption, unknownOption = jqLite(optionTemplate.cloneNode(!1));
                unknownOption.val("?");
                var options, ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope), renderEmptyOption = function() {
                    providedEmptyOption || selectElement.prepend(emptyOption);
                    selectElement.val("");
                    emptyOption.prop("selected", !0);
                    emptyOption.attr("selected", !0);
                }, removeEmptyOption = function() {
                    providedEmptyOption || emptyOption.remove();
                }, renderUnknownOption = function() {
                    selectElement.prepend(unknownOption);
                    selectElement.val("?");
                    unknownOption.prop("selected", !0);
                    unknownOption.attr("selected", !0);
                }, removeUnknownOption = function() {
                    unknownOption.remove();
                };
                if (multiple) {
                    ngModelCtrl.$isEmpty = function(value) {
                        return !value || 0 === value.length;
                    };
                    selectCtrl.writeValue = function(value) {
                        options.items.forEach(function(option) {
                            option.element.selected = !1;
                        });
                        value && value.forEach(function(item) {
                            var option = options.getOptionFromViewValue(item);
                            option && !option.disabled && (option.element.selected = !0);
                        });
                    };
                    selectCtrl.readValue = function() {
                        var selectedValues = selectElement.val() || [], selections = [];
                        forEach(selectedValues, function(value) {
                            var option = options.selectValueMap[value];
                            option && !option.disabled && selections.push(options.getViewValueFromOption(option));
                        });
                        return selections;
                    };
                    ngOptions.trackBy && scope.$watchCollection(function() {
                        if (isArray(ngModelCtrl.$viewValue)) return ngModelCtrl.$viewValue.map(function(value) {
                            return ngOptions.getTrackByValue(value);
                        });
                    }, function() {
                        ngModelCtrl.$render();
                    });
                } else {
                    selectCtrl.writeValue = function(value) {
                        var option = options.getOptionFromViewValue(value);
                        if (option && !option.disabled) {
                            if (selectElement[0].value !== option.selectValue) {
                                removeUnknownOption();
                                removeEmptyOption();
                                selectElement[0].value = option.selectValue;
                                option.element.selected = !0;
                                option.element.setAttribute("selected", "selected");
                            }
                        } else if (null === value || providedEmptyOption) {
                            removeUnknownOption();
                            renderEmptyOption();
                        } else {
                            removeEmptyOption();
                            renderUnknownOption();
                        }
                    };
                    selectCtrl.readValue = function() {
                        var selectedOption = options.selectValueMap[selectElement.val()];
                        if (selectedOption && !selectedOption.disabled) {
                            removeEmptyOption();
                            removeUnknownOption();
                            return options.getViewValueFromOption(selectedOption);
                        }
                        return null;
                    };
                    ngOptions.trackBy && scope.$watch(function() {
                        return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
                    }, function() {
                        ngModelCtrl.$render();
                    });
                }
                if (providedEmptyOption) {
                    emptyOption.remove();
                    $compile(emptyOption)(scope);
                    emptyOption.removeClass("ng-scope");
                } else emptyOption = jqLite(optionTemplate.cloneNode(!1));
                updateOptions();
                scope.$watchCollection(ngOptions.getWatchables, updateOptions);
            }
        }
        var optionTemplate = document.createElement("option"), optGroupTemplate = document.createElement("optgroup");
        return {
            restrict: "A",
            terminal: !0,
            require: [ "select", "?ngModel" ],
            link: {
                pre: function(scope, selectElement, attr, ctrls) {
                    ctrls[0].registerOption = noop;
                },
                post: ngOptionsPostLink
            }
        };
    } ], ngPluralizeDirective = [ "$locale", "$interpolate", "$log", function($locale, $interpolate, $log) {
        var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
        return {
            link: function(scope, element, attr) {
                function updateElementText(newText) {
                    element.text(newText || "");
                }
                var lastCount, numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + "-" + offset + endSymbol, watchRemover = angular.noop;
                forEach(attr, function(expression, attributeName) {
                    var tmpMatch = IS_WHEN.exec(attributeName);
                    if (tmpMatch) {
                        var whenKey = (tmpMatch[1] ? "-" : "") + lowercase(tmpMatch[2]);
                        whens[whenKey] = element.attr(attr.$attr[attributeName]);
                    }
                });
                forEach(whens, function(expression, key) {
                    whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                });
                scope.$watch(numberExp, function(newVal) {
                    var count = parseFloat(newVal), countIsNaN = isNaN(count);
                    countIsNaN || count in whens || (count = $locale.pluralCat(count - offset));
                    if (count !== lastCount && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
                        watchRemover();
                        var whenExpFn = whensExpFns[count];
                        if (isUndefined(whenExpFn)) {
                            null != newVal && $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
                            watchRemover = noop;
                            updateElementText();
                        } else watchRemover = scope.$watch(whenExpFn, updateElementText);
                        lastCount = count;
                    }
                });
            }
        };
    } ], ngRepeatDirective = [ "$parse", "$animate", function($parse, $animate) {
        var ngRepeatMinErr = minErr("ngRepeat"), updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
            scope[valueIdentifier] = value;
            keyIdentifier && (scope[keyIdentifier] = key);
            scope.$index = index;
            scope.$first = 0 === index;
            scope.$last = index === arrayLength - 1;
            scope.$middle = !(scope.$first || scope.$last);
            scope.$odd = !(scope.$even = 0 == (1 & index));
        }, getBlockStart = function(block) {
            return block.clone[0];
        }, getBlockEnd = function(block) {
            return block.clone[block.clone.length - 1];
        };
        return {
            restrict: "A",
            multiElement: !0,
            transclude: "element",
            priority: 1e3,
            terminal: !0,
            $$tlb: !0,
            compile: function($element, $attr) {
                var expression = $attr.ngRepeat, ngRepeatEndComment = document.createComment(" end ngRepeat: " + expression + " "), match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!match) throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                var lhs = match[1], rhs = match[2], aliasAs = match[3], trackByExp = match[4];
                match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
                if (!match) throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                var valueIdentifier = match[3] || match[1], keyIdentifier = match[2];
                if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) throw ngRepeatMinErr("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
                var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, hashFnLocals = {
                    $id: hashKey
                };
                if (trackByExp) trackByExpGetter = $parse(trackByExp); else {
                    trackByIdArrayFn = function(key, value) {
                        return hashKey(value);
                    };
                    trackByIdObjFn = function(key) {
                        return key;
                    };
                }
                return function($scope, $element, $attr, ctrl, $transclude) {
                    trackByExpGetter && (trackByIdExpFn = function(key, value, index) {
                        keyIdentifier && (hashFnLocals[keyIdentifier] = key);
                        hashFnLocals[valueIdentifier] = value;
                        hashFnLocals.$index = index;
                        return trackByExpGetter($scope, hashFnLocals);
                    });
                    var lastBlockMap = createMap();
                    $scope.$watchCollection(rhs, function(collection) {
                        var index, length, nextNode, collectionLength, key, value, trackById, trackByIdFn, collectionKeys, block, nextBlockOrder, elementsToRemove, previousNode = $element[0], nextBlockMap = createMap();
                        aliasAs && ($scope[aliasAs] = collection);
                        if (isArrayLike(collection)) {
                            collectionKeys = collection;
                            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                        } else {
                            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                            collectionKeys = [];
                            for (var itemKey in collection) hasOwnProperty.call(collection, itemKey) && "$" !== itemKey.charAt(0) && collectionKeys.push(itemKey);
                        }
                        collectionLength = collectionKeys.length;
                        nextBlockOrder = new Array(collectionLength);
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            trackById = trackByIdFn(key, value, index);
                            if (lastBlockMap[trackById]) {
                                block = lastBlockMap[trackById];
                                delete lastBlockMap[trackById];
                                nextBlockMap[trackById] = block;
                                nextBlockOrder[index] = block;
                            } else {
                                if (nextBlockMap[trackById]) {
                                    forEach(nextBlockOrder, function(block) {
                                        block && block.scope && (lastBlockMap[block.id] = block);
                                    });
                                    throw ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                                }
                                nextBlockOrder[index] = {
                                    id: trackById,
                                    scope: undefined,
                                    clone: undefined
                                };
                                nextBlockMap[trackById] = !0;
                            }
                        }
                        for (var blockKey in lastBlockMap) {
                            block = lastBlockMap[blockKey];
                            elementsToRemove = getBlockNodes(block.clone);
                            $animate.leave(elementsToRemove);
                            if (elementsToRemove[0].parentNode) for (index = 0, length = elementsToRemove.length; index < length; index++) elementsToRemove[index].$$NG_REMOVED = !0;
                            block.scope.$destroy();
                        }
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            block = nextBlockOrder[index];
                            if (block.scope) {
                                nextNode = previousNode;
                                do {
                                    nextNode = nextNode.nextSibling;
                                } while (nextNode && nextNode.$$NG_REMOVED);
                                getBlockStart(block) != nextNode && $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
                                previousNode = getBlockEnd(block);
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            } else $transclude(function(clone, scope) {
                                block.scope = scope;
                                var endNode = ngRepeatEndComment.cloneNode(!1);
                                clone[clone.length++] = endNode;
                                $animate.enter(clone, null, jqLite(previousNode));
                                previousNode = endNode;
                                block.clone = clone;
                                nextBlockMap[block.id] = block;
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            });
                        }
                        lastBlockMap = nextBlockMap;
                    });
                };
            }
        };
    } ], ngShowDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngShow, function(value) {
                    $animate[value ? "removeClass" : "addClass"](element, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ngHideDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngHide, function(value) {
                    $animate[value ? "addClass" : "removeClass"](element, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ngStyleDirective = ngDirective(function(scope, element, attr) {
        scope.$watch(attr.ngStyle, function(newStyles, oldStyles) {
            oldStyles && newStyles !== oldStyles && forEach(oldStyles, function(val, style) {
                element.css(style, "");
            });
            newStyles && element.css(newStyles);
        }, !0);
    }), ngSwitchDirective = [ "$animate", function($animate) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function() {
                this.cases = {};
            } ],
            link: function(scope, element, attr, ngSwitchController) {
                var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [], spliceFactory = function(array, index) {
                    return function() {
                        array.splice(index, 1);
                    };
                };
                scope.$watch(watchExpr, function(value) {
                    var i, ii;
                    for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) $animate.cancel(previousLeaveAnimations[i]);
                    previousLeaveAnimations.length = 0;
                    for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                        var selected = getBlockNodes(selectedElements[i].clone);
                        selectedScopes[i].$destroy();
                        (previousLeaveAnimations[i] = $animate.leave(selected)).then(spliceFactory(previousLeaveAnimations, i));
                    }
                    selectedElements.length = 0;
                    selectedScopes.length = 0;
                    (selectedTranscludes = ngSwitchController.cases["!" + value] || ngSwitchController.cases["?"]) && forEach(selectedTranscludes, function(selectedTransclude) {
                        selectedTransclude.transclude(function(caseElement, selectedScope) {
                            selectedScopes.push(selectedScope);
                            var anchor = selectedTransclude.element;
                            caseElement[caseElement.length++] = document.createComment(" end ngSwitchWhen: ");
                            var block = {
                                clone: caseElement
                            };
                            selectedElements.push(block);
                            $animate.enter(caseElement, anchor.parent(), anchor);
                        });
                    });
                });
            }
        };
    } ], ngSwitchWhenDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(scope, element, attrs, ctrl, $transclude) {
            ctrl.cases["!" + attrs.ngSwitchWhen] = ctrl.cases["!" + attrs.ngSwitchWhen] || [];
            ctrl.cases["!" + attrs.ngSwitchWhen].push({
                transclude: $transclude,
                element: element
            });
        }
    }), ngSwitchDefaultDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(scope, element, attr, ctrl, $transclude) {
            ctrl.cases["?"] = ctrl.cases["?"] || [];
            ctrl.cases["?"].push({
                transclude: $transclude,
                element: element
            });
        }
    }), ngTranscludeDirective = ngDirective({
        restrict: "EAC",
        link: function($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) throw minErr("ngTransclude")("orphan", "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}", startingTag($element));
            $transclude(function(clone) {
                $element.empty();
                $element.append(clone);
            });
        }
    }), scriptDirective = [ "$templateCache", function($templateCache) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(element, attr) {
                if ("text/ng-template" == attr.type) {
                    var templateUrl = attr.id, text = element[0].text;
                    $templateCache.put(templateUrl, text);
                }
            }
        };
    } ], noopNgModelController = {
        $setViewValue: noop,
        $render: noop
    }, SelectController = [ "$element", "$scope", "$attrs", function($element, $scope, $attrs) {
        var self = this, optionsMap = new HashMap();
        self.ngModelCtrl = noopNgModelController;
        self.unknownOption = jqLite(document.createElement("option"));
        self.renderUnknownOption = function(val) {
            var unknownVal = "? " + hashKey(val) + " ?";
            self.unknownOption.val(unknownVal);
            $element.prepend(self.unknownOption);
            $element.val(unknownVal);
        };
        $scope.$on("$destroy", function() {
            self.renderUnknownOption = noop;
        });
        self.removeUnknownOption = function() {
            self.unknownOption.parent() && self.unknownOption.remove();
        };
        self.readValue = function() {
            self.removeUnknownOption();
            return $element.val();
        };
        self.writeValue = function(value) {
            if (self.hasOption(value)) {
                self.removeUnknownOption();
                $element.val(value);
                "" === value && self.emptyOption.prop("selected", !0);
            } else if (null == value && self.emptyOption) {
                self.removeUnknownOption();
                $element.val("");
            } else self.renderUnknownOption(value);
        };
        self.addOption = function(value, element) {
            assertNotHasOwnProperty(value, '"option value"');
            "" === value && (self.emptyOption = element);
            var count = optionsMap.get(value) || 0;
            optionsMap.put(value, count + 1);
            self.ngModelCtrl.$render();
            chromeHack(element);
        };
        self.removeOption = function(value) {
            var count = optionsMap.get(value);
            if (count) if (1 === count) {
                optionsMap.remove(value);
                "" === value && (self.emptyOption = undefined);
            } else optionsMap.put(value, count - 1);
        };
        self.hasOption = function(value) {
            return !!optionsMap.get(value);
        };
        self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
            if (interpolateValueFn) {
                var oldVal;
                optionAttrs.$observe("value", function(newVal) {
                    isDefined(oldVal) && self.removeOption(oldVal);
                    oldVal = newVal;
                    self.addOption(newVal, optionElement);
                });
            } else interpolateTextFn ? optionScope.$watch(interpolateTextFn, function(newVal, oldVal) {
                optionAttrs.$set("value", newVal);
                oldVal !== newVal && self.removeOption(oldVal);
                self.addOption(newVal, optionElement);
            }) : self.addOption(optionAttrs.value, optionElement);
            optionElement.on("$destroy", function() {
                self.removeOption(optionAttrs.value);
                self.ngModelCtrl.$render();
            });
        };
    } ], selectDirective = function() {
        function selectPreLink(scope, element, attr, ctrls) {
            var ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                var selectCtrl = ctrls[0];
                selectCtrl.ngModelCtrl = ngModelCtrl;
                element.on("change", function() {
                    scope.$apply(function() {
                        ngModelCtrl.$setViewValue(selectCtrl.readValue());
                    });
                });
                if (attr.multiple) {
                    selectCtrl.readValue = function() {
                        var array = [];
                        forEach(element.find("option"), function(option) {
                            option.selected && array.push(option.value);
                        });
                        return array;
                    };
                    selectCtrl.writeValue = function(value) {
                        var items = new HashMap(value);
                        forEach(element.find("option"), function(option) {
                            option.selected = isDefined(items.get(option.value));
                        });
                    };
                    var lastView, lastViewRef = NaN;
                    scope.$watch(function() {
                        if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                            lastView = shallowCopy(ngModelCtrl.$viewValue);
                            ngModelCtrl.$render();
                        }
                        lastViewRef = ngModelCtrl.$viewValue;
                    });
                    ngModelCtrl.$isEmpty = function(value) {
                        return !value || 0 === value.length;
                    };
                }
            }
        }
        function selectPostLink(scope, element, attrs, ctrls) {
            var ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                var selectCtrl = ctrls[0];
                ngModelCtrl.$render = function() {
                    selectCtrl.writeValue(ngModelCtrl.$viewValue);
                };
            }
        }
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: SelectController,
            priority: 1,
            link: {
                pre: selectPreLink,
                post: selectPostLink
            }
        };
    }, optionDirective = [ "$interpolate", function($interpolate) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(element, attr) {
                if (isDefined(attr.value)) var interpolateValueFn = $interpolate(attr.value, !0); else {
                    var interpolateTextFn = $interpolate(element.text(), !0);
                    interpolateTextFn || attr.$set("value", element.text());
                }
                return function(scope, element, attr) {
                    var parent = element.parent(), selectCtrl = parent.data("$selectController") || parent.parent().data("$selectController");
                    selectCtrl && selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
                };
            }
        };
    } ], styleDirective = valueFn({
        restrict: "E",
        terminal: !1
    }), requiredDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    attr.required = !0;
                    ctrl.$validators.required = function(modelValue, viewValue) {
                        return !attr.required || !ctrl.$isEmpty(viewValue);
                    };
                    attr.$observe("required", function() {
                        ctrl.$validate();
                    });
                }
            }
        };
    }, patternDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var regexp, patternExp = attr.ngPattern || attr.pattern;
                    attr.$observe("pattern", function(regex) {
                        isString(regex) && regex.length > 0 && (regex = new RegExp("^" + regex + "$"));
                        if (regex && !regex.test) throw minErr("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", patternExp, regex, startingTag(elm));
                        regexp = regex || undefined;
                        ctrl.$validate();
                    });
                    ctrl.$validators.pattern = function(modelValue, viewValue) {
                        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
                    };
                }
            }
        };
    }, maxlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var maxlength = -1;
                    attr.$observe("maxlength", function(value) {
                        var intVal = toInt(value);
                        maxlength = isNaN(intVal) ? -1 : intVal;
                        ctrl.$validate();
                    });
                    ctrl.$validators.maxlength = function(modelValue, viewValue) {
                        return maxlength < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlength;
                    };
                }
            }
        };
    }, minlengthDirective = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (ctrl) {
                    var minlength = 0;
                    attr.$observe("minlength", function(value) {
                        minlength = toInt(value) || 0;
                        ctrl.$validate();
                    });
                    ctrl.$validators.minlength = function(modelValue, viewValue) {
                        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
                    };
                }
            }
        };
    };
    if (window.angular.bootstrap) console.log("WARNING: Tried to load angular more than once."); else {
        !function() {
            var originalCleanData;
            if (!bindJQueryFired) {
                var jqName = jq();
                jQuery = isUndefined(jqName) ? window.jQuery : jqName ? window[jqName] : undefined;
                if (jQuery && jQuery.fn.on) {
                    jqLite = jQuery;
                    extend(jQuery.fn, {
                        scope: JQLitePrototype.scope,
                        isolateScope: JQLitePrototype.isolateScope,
                        controller: JQLitePrototype.controller,
                        injector: JQLitePrototype.injector,
                        inheritedData: JQLitePrototype.inheritedData
                    });
                    originalCleanData = jQuery.cleanData;
                    jQuery.cleanData = function(elems) {
                        var events;
                        if (skipDestroyOnNextJQueryCleanData) skipDestroyOnNextJQueryCleanData = !1; else for (var elem, i = 0; null != (elem = elems[i]); i++) {
                            events = jQuery._data(elem, "events");
                            events && events.$destroy && jQuery(elem).triggerHandler("$destroy");
                        }
                        originalCleanData(elems);
                    };
                } else jqLite = JQLite;
                angular.element = jqLite;
                bindJQueryFired = !0;
            }
        }();
        !function(angular) {
            extend(angular, {
                bootstrap: bootstrap,
                copy: copy,
                extend: extend,
                merge: merge,
                equals: equals,
                element: jqLite,
                forEach: forEach,
                injector: createInjector,
                noop: noop,
                bind: bind,
                toJson: toJson,
                fromJson: fromJson,
                identity: identity,
                isUndefined: isUndefined,
                isDefined: isDefined,
                isString: isString,
                isFunction: isFunction,
                isObject: isObject,
                isNumber: isNumber,
                isElement: isElement,
                isArray: isArray,
                version: version,
                isDate: isDate,
                lowercase: lowercase,
                uppercase: uppercase,
                callbacks: {
                    counter: 0
                },
                getTestability: getTestability,
                $$minErr: minErr,
                $$csp: csp,
                reloadWithDebugInfo: reloadWithDebugInfo
            });
            angularModule = setupModuleLoader(window);
            angularModule("ng", [ "ngLocale" ], [ "$provide", function($provide) {
                $provide.provider({
                    $$sanitizeUri: $$SanitizeUriProvider
                });
                $provide.provider("$compile", $CompileProvider).directive({
                    a: htmlAnchorDirective,
                    input: inputDirective,
                    textarea: inputDirective,
                    form: formDirective,
                    script: scriptDirective,
                    select: selectDirective,
                    style: styleDirective,
                    option: optionDirective,
                    ngBind: ngBindDirective,
                    ngBindHtml: ngBindHtmlDirective,
                    ngBindTemplate: ngBindTemplateDirective,
                    ngClass: ngClassDirective,
                    ngClassEven: ngClassEvenDirective,
                    ngClassOdd: ngClassOddDirective,
                    ngCloak: ngCloakDirective,
                    ngController: ngControllerDirective,
                    ngForm: ngFormDirective,
                    ngHide: ngHideDirective,
                    ngIf: ngIfDirective,
                    ngInclude: ngIncludeDirective,
                    ngInit: ngInitDirective,
                    ngNonBindable: ngNonBindableDirective,
                    ngPluralize: ngPluralizeDirective,
                    ngRepeat: ngRepeatDirective,
                    ngShow: ngShowDirective,
                    ngStyle: ngStyleDirective,
                    ngSwitch: ngSwitchDirective,
                    ngSwitchWhen: ngSwitchWhenDirective,
                    ngSwitchDefault: ngSwitchDefaultDirective,
                    ngOptions: ngOptionsDirective,
                    ngTransclude: ngTranscludeDirective,
                    ngModel: ngModelDirective,
                    ngList: ngListDirective,
                    ngChange: ngChangeDirective,
                    pattern: patternDirective,
                    ngPattern: patternDirective,
                    required: requiredDirective,
                    ngRequired: requiredDirective,
                    minlength: minlengthDirective,
                    ngMinlength: minlengthDirective,
                    maxlength: maxlengthDirective,
                    ngMaxlength: maxlengthDirective,
                    ngValue: ngValueDirective,
                    ngModelOptions: ngModelOptionsDirective
                }).directive({
                    ngInclude: ngIncludeFillContentDirective
                }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
                $provide.provider({
                    $anchorScroll: $AnchorScrollProvider,
                    $animate: $AnimateProvider,
                    $animateCss: $CoreAnimateCssProvider,
                    $$animateJs: $$CoreAnimateJsProvider,
                    $$animateQueue: $$CoreAnimateQueueProvider,
                    $$AnimateRunner: $$AnimateRunnerFactoryProvider,
                    $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
                    $browser: $BrowserProvider,
                    $cacheFactory: $CacheFactoryProvider,
                    $controller: $ControllerProvider,
                    $document: $DocumentProvider,
                    $exceptionHandler: $ExceptionHandlerProvider,
                    $filter: $FilterProvider,
                    $$forceReflow: $$ForceReflowProvider,
                    $interpolate: $InterpolateProvider,
                    $interval: $IntervalProvider,
                    $http: $HttpProvider,
                    $httpParamSerializer: $HttpParamSerializerProvider,
                    $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
                    $httpBackend: $HttpBackendProvider,
                    $xhrFactory: $xhrFactoryProvider,
                    $location: $LocationProvider,
                    $log: $LogProvider,
                    $parse: $ParseProvider,
                    $rootScope: $RootScopeProvider,
                    $q: $QProvider,
                    $$q: $$QProvider,
                    $sce: $SceProvider,
                    $sceDelegate: $SceDelegateProvider,
                    $sniffer: $SnifferProvider,
                    $templateCache: $TemplateCacheProvider,
                    $templateRequest: $TemplateRequestProvider,
                    $$testability: $$TestabilityProvider,
                    $timeout: $TimeoutProvider,
                    $window: $WindowProvider,
                    $$rAF: $$RAFProvider,
                    $$jqLite: $$jqLiteProvider,
                    $$HashMap: $$HashMapProvider,
                    $$cookieReader: $$CookieReaderProvider
                });
            } ]);
        }(angular);
        angular.module("ngLocale", [], [ "$provide", function($provide) {
            function getDecimals(n) {
                n += "";
                var i = n.indexOf(".");
                return -1 == i ? 0 : n.length - i - 1;
            }
            function getVF(n, opt_precision) {
                var v = opt_precision;
                undefined === v && (v = Math.min(getDecimals(n), 3));
                var base = Math.pow(10, v);
                return {
                    v: v,
                    f: (n * base | 0) % base
                };
            }
            var PLURAL_CATEGORY = {
                ZERO: "zero",
                ONE: "one",
                TWO: "two",
                FEW: "few",
                MANY: "many",
                OTHER: "other"
            };
            $provide.value("$locale", {
                DATETIME_FORMATS: {
                    AMPMS: [ "AM", "PM" ],
                    DAY: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                    ERANAMES: [ "Before Christ", "Anno Domini" ],
                    ERAS: [ "BC", "AD" ],
                    FIRSTDAYOFWEEK: 6,
                    MONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    SHORTDAY: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                    SHORTMONTH: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                    STANDALONEMONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    WEEKENDRANGE: [ 5, 6 ],
                    fullDate: "EEEE, MMMM d, y",
                    longDate: "MMMM d, y",
                    medium: "MMM d, y h:mm:ss a",
                    mediumDate: "MMM d, y",
                    mediumTime: "h:mm:ss a",
                    short: "M/d/yy h:mm a",
                    shortDate: "M/d/yy",
                    shortTime: "h:mm a"
                },
                NUMBER_FORMATS: {
                    CURRENCY_SYM: "$",
                    DECIMAL_SEP: ".",
                    GROUP_SEP: ",",
                    PATTERNS: [ {
                        gSize: 3,
                        lgSize: 3,
                        maxFrac: 3,
                        minFrac: 0,
                        minInt: 1,
                        negPre: "-",
                        negSuf: "",
                        posPre: "",
                        posSuf: ""
                    }, {
                        gSize: 3,
                        lgSize: 3,
                        maxFrac: 2,
                        minFrac: 2,
                        minInt: 1,
                        negPre: "-¤",
                        negSuf: "",
                        posPre: "¤",
                        posSuf: ""
                    } ]
                },
                id: "en-us",
                pluralCat: function(n, opt_precision) {
                    var i = 0 | n, vf = getVF(n, opt_precision);
                    return 1 == i && 0 == vf.v ? PLURAL_CATEGORY.ONE : PLURAL_CATEGORY.OTHER;
                }
            });
        } ]);
        jqLite(document).ready(function() {
            angularInit(document, bootstrap);
        });
    }
}(window, document);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

!function(window, angular, undefined) {
    "use strict";
    function assertArg(arg, name, reason) {
        if (!arg) throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        return arg;
    }
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        isArray(a) && (a = a.join(" "));
        isArray(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function packageStyles(options) {
        var styles = {};
        if (options && (options.to || options.from)) {
            styles.to = options.to;
            styles.from = options.from;
        }
        return styles;
    }
    function pendClasses(classes, fix, isPrefix) {
        var className = "";
        classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
        forEach(classes, function(klass, i) {
            if (klass && klass.length > 0) {
                className += i > 0 ? " " : "";
                className += isPrefix ? fix + klass : klass + fix;
            }
        });
        return className;
    }
    function removeFromArray(arr, val) {
        var index = arr.indexOf(val);
        val >= 0 && arr.splice(index, 1);
    }
    function stripCommentsFromElement(element) {
        if (element instanceof jqLite) switch (element.length) {
          case 0:
            return [];

          case 1:
            if (element[0].nodeType === ELEMENT_NODE) return element;
            break;

          default:
            return jqLite(extractElementNode(element));
        }
        if (element.nodeType === ELEMENT_NODE) return jqLite(element);
    }
    function extractElementNode(element) {
        if (!element[0]) return element;
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType == ELEMENT_NODE) return elm;
        }
    }
    function $$addClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.addClass(elm, className);
        });
    }
    function $$removeClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.removeClass(elm, className);
        });
    }
    function applyAnimationClassesFactory($$jqLite) {
        return function(element, options) {
            if (options.addClass) {
                $$addClass($$jqLite, element, options.addClass);
                options.addClass = null;
            }
            if (options.removeClass) {
                $$removeClass($$jqLite, element, options.removeClass);
                options.removeClass = null;
            }
        };
    }
    function prepareAnimationOptions(options) {
        options = options || {};
        if (!options.$$prepared) {
            var domOperation = options.domOperation || noop;
            options.domOperation = function() {
                options.$$domOperationFired = !0;
                domOperation();
                domOperation = noop;
            };
            options.$$prepared = !0;
        }
        return options;
    }
    function applyAnimationStyles(element, options) {
        applyAnimationFromStyles(element, options);
        applyAnimationToStyles(element, options);
    }
    function applyAnimationFromStyles(element, options) {
        if (options.from) {
            element.css(options.from);
            options.from = null;
        }
    }
    function applyAnimationToStyles(element, options) {
        if (options.to) {
            element.css(options.to);
            options.to = null;
        }
    }
    function mergeAnimationOptions(element, target, newOptions) {
        var toAdd = (target.addClass || "") + " " + (newOptions.addClass || ""), toRemove = (target.removeClass || "") + " " + (newOptions.removeClass || ""), classes = resolveElementClasses(element.attr("class"), toAdd, toRemove);
        if (newOptions.preparationClasses) {
            target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
            delete newOptions.preparationClasses;
        }
        var realDomOperation = target.domOperation !== noop ? target.domOperation : null;
        extend(target, newOptions);
        realDomOperation && (target.domOperation = realDomOperation);
        classes.addClass ? target.addClass = classes.addClass : target.addClass = null;
        classes.removeClass ? target.removeClass = classes.removeClass : target.removeClass = null;
        return target;
    }
    function resolveElementClasses(existing, toAdd, toRemove) {
        function splitClassesToLookup(classes) {
            isString(classes) && (classes = classes.split(" "));
            var obj = {};
            forEach(classes, function(klass) {
                klass.length && (obj[klass] = !0);
            });
            return obj;
        }
        var flags = {};
        existing = splitClassesToLookup(existing);
        toAdd = splitClassesToLookup(toAdd);
        forEach(toAdd, function(value, key) {
            flags[key] = 1;
        });
        toRemove = splitClassesToLookup(toRemove);
        forEach(toRemove, function(value, key) {
            flags[key] = 1 === flags[key] ? null : -1;
        });
        var classes = {
            addClass: "",
            removeClass: ""
        };
        forEach(flags, function(val, klass) {
            var prop, allow;
            if (1 === val) {
                prop = "addClass";
                allow = !existing[klass];
            } else if (-1 === val) {
                prop = "removeClass";
                allow = existing[klass];
            }
            if (allow) {
                classes[prop].length && (classes[prop] += " ");
                classes[prop] += klass;
            }
        });
        return classes;
    }
    function getDomNode(element) {
        return element instanceof angular.element ? element[0] : element;
    }
    function applyGeneratedPreparationClasses(element, event, options) {
        var classes = "";
        event && (classes = pendClasses(event, EVENT_CLASS_PREFIX, !0));
        options.addClass && (classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX)));
        options.removeClass && (classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX)));
        if (classes.length) {
            options.preparationClasses = classes;
            element.addClass(classes);
        }
    }
    function clearGeneratedClasses(element, options) {
        if (options.preparationClasses) {
            element.removeClass(options.preparationClasses);
            options.preparationClasses = null;
        }
        if (options.activeClasses) {
            element.removeClass(options.activeClasses);
            options.activeClasses = null;
        }
    }
    function blockTransitions(node, duration) {
        var value = duration ? "-" + duration + "s" : "";
        applyInlineStyle(node, [ TRANSITION_DELAY_PROP, value ]);
        return [ TRANSITION_DELAY_PROP, value ];
    }
    function blockKeyframeAnimations(node, applyBlock) {
        var value = applyBlock ? "paused" : "", key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
        applyInlineStyle(node, [ key, value ]);
        return [ key, value ];
    }
    function applyInlineStyle(node, styleTuple) {
        var prop = styleTuple[0], value = styleTuple[1];
        node.style[prop] = value;
    }
    function concatWithSpace(a, b) {
        return a ? b ? a + " " + b : a : b;
    }
    function getCssKeyframeDurationStyle(duration) {
        return [ ANIMATION_DURATION_PROP, duration + "s" ];
    }
    function getCssDelayStyle(delay, isKeyframeAnimation) {
        return [ isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP, delay + "s" ];
    }
    function computeCssStyles($window, element, properties) {
        var styles = Object.create(null), detectedStyles = $window.getComputedStyle(element) || {};
        forEach(properties, function(formalStyleName, actualStyleName) {
            var val = detectedStyles[formalStyleName];
            if (val) {
                var c = val.charAt(0);
                ("-" === c || "+" === c || c >= 0) && (val = parseMaxTime(val));
                0 === val && (val = null);
                styles[actualStyleName] = val;
            }
        });
        return styles;
    }
    function parseMaxTime(str) {
        var maxValue = 0, values = str.split(/\s*,\s*/);
        forEach(values, function(value) {
            "s" == value.charAt(value.length - 1) && (value = value.substring(0, value.length - 1));
            value = parseFloat(value) || 0;
            maxValue = maxValue ? Math.max(value, maxValue) : value;
        });
        return maxValue;
    }
    function truthyTimingValue(val) {
        return 0 === val || null != val;
    }
    function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
        var style = TRANSITION_PROP, value = duration + "s";
        applyOnlyDuration ? style += DURATION_KEY : value += " linear all";
        return [ style, value ];
    }
    function createLocalCacheLookup() {
        var cache = Object.create(null);
        return {
            flush: function() {
                cache = Object.create(null);
            },
            count: function(key) {
                var entry = cache[key];
                return entry ? entry.total : 0;
            },
            get: function(key) {
                var entry = cache[key];
                return entry && entry.value;
            },
            put: function(key, value) {
                cache[key] ? cache[key].total++ : cache[key] = {
                    total: 1,
                    value: value
                };
            }
        };
    }
    function registerRestorableStyles(backup, node, properties) {
        forEach(properties, function(prop) {
            backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
        });
    }
    var TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT, noop = angular.noop, copy = angular.copy, extend = angular.extend, jqLite = angular.element, forEach = angular.forEach, isArray = angular.isArray, isString = angular.isString, isObject = angular.isObject, isUndefined = angular.isUndefined, isDefined = angular.isDefined, isFunction = angular.isFunction, isElement = angular.isElement, ELEMENT_NODE = 1, ADD_CLASS_SUFFIX = "-add", REMOVE_CLASS_SUFFIX = "-remove", EVENT_CLASS_PREFIX = "ng-", NG_ANIMATE_CLASSNAME = "ng-animate", NG_ANIMATE_CHILDREN_DATA = "$$ngAnimateChildren";
    if (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {
        "-webkit-";
        TRANSITION_PROP = "WebkitTransition";
        TRANSITIONEND_EVENT = "webkitTransitionEnd transitionend";
    } else {
        TRANSITION_PROP = "transition";
        TRANSITIONEND_EVENT = "transitionend";
    }
    if (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {
        "-webkit-";
        ANIMATION_PROP = "WebkitAnimation";
        ANIMATIONEND_EVENT = "webkitAnimationEnd animationend";
    } else {
        ANIMATION_PROP = "animation";
        ANIMATIONEND_EVENT = "animationend";
    }
    var DURATION_KEY = "Duration", TIMING_KEY = "TimingFunction", ANIMATION_PLAYSTATE_KEY = "PlayState", ANIMATION_DELAY_PROP = ANIMATION_PROP + "Delay", ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY, TRANSITION_DELAY_PROP = TRANSITION_PROP + "Delay", TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY, ngMinErr = angular.$$minErr("ng"), $$rAFSchedulerFactory = [ "$$rAF", function($$rAF) {
        function scheduler(tasks) {
            queue = queue.concat(tasks);
            nextTick();
        }
        function nextTick() {
            if (queue.length) {
                for (var items = queue.shift(), i = 0; i < items.length; i++) items[i]();
                cancelFn || $$rAF(function() {
                    cancelFn || nextTick();
                });
            }
        }
        var queue, cancelFn;
        queue = scheduler.queue = [];
        scheduler.waitUntilQuiet = function(fn) {
            cancelFn && cancelFn();
            cancelFn = $$rAF(function() {
                cancelFn = null;
                fn();
                nextTick();
            });
        };
        return scheduler;
    } ], $$AnimateChildrenDirective = [ function() {
        return function(scope, element, attrs) {
            var val = attrs.ngAnimateChildren;
            angular.isString(val) && 0 === val.length ? element.data(NG_ANIMATE_CHILDREN_DATA, !0) : attrs.$observe("ngAnimateChildren", function(value) {
                value = "on" === value || "true" === value;
                element.data(NG_ANIMATE_CHILDREN_DATA, value);
            });
        };
    } ], ANIMATE_TIMER_KEY = "$$animateCss", ONE_SECOND = 1e3, ELAPSED_TIME_MAX_DECIMAL_PLACES = 3, CLOSING_TIME_BUFFER = 1.5, DETECT_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        transitionProperty: TRANSITION_PROP + "Property",
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP,
        animationIterationCount: ANIMATION_PROP + "IterationCount"
    }, DETECT_STAGGER_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP
    }, $AnimateCssProvider = [ "$animateProvider", function($animateProvider) {
        var gcsLookup = createLocalCacheLookup(), gcsStaggerLookup = createLocalCacheLookup();
        this.$get = [ "$window", "$$jqLite", "$$AnimateRunner", "$timeout", "$$forceReflow", "$sniffer", "$$rAFScheduler", "$$animateQueue", function($window, $$jqLite, $$AnimateRunner, $timeout, $$forceReflow, $sniffer, $$rAFScheduler, $$animateQueue) {
            function gcsHashFn(node, extraClasses) {
                var KEY = "$$ngAnimateParentKey", parentNode = node.parentNode;
                return (parentNode[KEY] || (parentNode[KEY] = ++parentCounter)) + "-" + node.getAttribute("class") + "-" + extraClasses;
            }
            function computeCachedCssStyles(node, className, cacheKey, properties) {
                var timings = gcsLookup.get(cacheKey);
                if (!timings) {
                    timings = computeCssStyles($window, node, properties);
                    "infinite" === timings.animationIterationCount && (timings.animationIterationCount = 1);
                }
                gcsLookup.put(cacheKey, timings);
                return timings;
            }
            function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
                var stagger;
                if (gcsLookup.count(cacheKey) > 0) {
                    stagger = gcsStaggerLookup.get(cacheKey);
                    if (!stagger) {
                        var staggerClassName = pendClasses(className, "-stagger");
                        $$jqLite.addClass(node, staggerClassName);
                        stagger = computeCssStyles($window, node, properties);
                        stagger.animationDuration = Math.max(stagger.animationDuration, 0);
                        stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);
                        $$jqLite.removeClass(node, staggerClassName);
                        gcsStaggerLookup.put(cacheKey, stagger);
                    }
                }
                return stagger || {};
            }
            function waitUntilQuiet(callback) {
                rafWaitQueue.push(callback);
                $$rAFScheduler.waitUntilQuiet(function() {
                    gcsLookup.flush();
                    gcsStaggerLookup.flush();
                    for (var pageWidth = $$forceReflow(), i = 0; i < rafWaitQueue.length; i++) rafWaitQueue[i](pageWidth);
                    rafWaitQueue.length = 0;
                });
            }
            function computeTimings(node, className, cacheKey) {
                var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES), aD = timings.animationDelay, tD = timings.transitionDelay;
                timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;
                timings.maxDuration = Math.max(timings.animationDuration * timings.animationIterationCount, timings.transitionDuration);
                return timings;
            }
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite), parentCounter = 0, rafWaitQueue = [];
            return function(element, initialOptions) {
                function endFn() {
                    close();
                }
                function cancelFn() {
                    close(!0);
                }
                function close(rejected) {
                    if (!(animationClosed || animationCompleted && animationPaused)) {
                        animationClosed = !0;
                        animationPaused = !1;
                        options.$$skipPreparationClasses || $$jqLite.removeClass(element, preparationClasses);
                        $$jqLite.removeClass(element, activeClasses);
                        blockKeyframeAnimations(node, !1);
                        blockTransitions(node, !1);
                        forEach(temporaryStyles, function(entry) {
                            node.style[entry[0]] = "";
                        });
                        applyAnimationClasses(element, options);
                        applyAnimationStyles(element, options);
                        Object.keys(restoreStyles).length && forEach(restoreStyles, function(value, prop) {
                            value ? node.style.setProperty(prop, value) : node.style.removeProperty(prop);
                        });
                        options.onDone && options.onDone();
                        events && events.length && element.off(events.join(" "), onAnimationProgress);
                        runner && runner.complete(!rejected);
                    }
                }
                function applyBlocking(duration) {
                    flags.blockTransition && blockTransitions(node, duration);
                    flags.blockKeyframeAnimation && blockKeyframeAnimations(node, !!duration);
                }
                function closeAndReturnNoopAnimator() {
                    runner = new $$AnimateRunner({
                        end: endFn,
                        cancel: cancelFn
                    });
                    waitUntilQuiet(noop);
                    close();
                    return {
                        $$willAnimate: !1,
                        start: function() {
                            return runner;
                        },
                        end: endFn
                    };
                }
                function onAnimationProgress(event) {
                    event.stopPropagation();
                    var ev = event.originalEvent || event, timeStamp = ev.$manualTimeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
                    if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                        animationCompleted = !0;
                        close();
                    }
                }
                function start() {
                    function triggerAnimationStart() {
                        if (!animationClosed) {
                            applyBlocking(!1);
                            forEach(temporaryStyles, function(entry) {
                                var key = entry[0], value = entry[1];
                                node.style[key] = value;
                            });
                            applyAnimationClasses(element, options);
                            $$jqLite.addClass(element, activeClasses);
                            if (flags.recalculateTimingStyles) {
                                fullClassName = node.className + " " + preparationClasses;
                                cacheKey = gcsHashFn(node, fullClassName);
                                timings = computeTimings(node, fullClassName, cacheKey);
                                relativeDelay = timings.maxDelay;
                                maxDelay = Math.max(relativeDelay, 0);
                                maxDuration = timings.maxDuration;
                                if (0 === maxDuration) {
                                    close();
                                    return;
                                }
                                flags.hasTransitions = timings.transitionDuration > 0;
                                flags.hasAnimations = timings.animationDuration > 0;
                            }
                            if (flags.applyAnimationDelay) {
                                relativeDelay = "boolean" != typeof options.delay && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;
                                maxDelay = Math.max(relativeDelay, 0);
                                timings.animationDelay = relativeDelay;
                                delayStyle = getCssDelayStyle(relativeDelay, !0);
                                temporaryStyles.push(delayStyle);
                                node.style[delayStyle[0]] = delayStyle[1];
                            }
                            maxDelayTime = maxDelay * ONE_SECOND;
                            maxDurationTime = maxDuration * ONE_SECOND;
                            if (options.easing) {
                                var easeProp, easeVal = options.easing;
                                if (flags.hasTransitions) {
                                    easeProp = TRANSITION_PROP + TIMING_KEY;
                                    temporaryStyles.push([ easeProp, easeVal ]);
                                    node.style[easeProp] = easeVal;
                                }
                                if (flags.hasAnimations) {
                                    easeProp = ANIMATION_PROP + TIMING_KEY;
                                    temporaryStyles.push([ easeProp, easeVal ]);
                                    node.style[easeProp] = easeVal;
                                }
                            }
                            timings.transitionDuration && events.push(TRANSITIONEND_EVENT);
                            timings.animationDuration && events.push(ANIMATIONEND_EVENT);
                            startTime = Date.now();
                            var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime, endTime = startTime + timerTime, animationsData = element.data(ANIMATE_TIMER_KEY) || [], setupFallbackTimer = !0;
                            if (animationsData.length) {
                                var currentTimerData = animationsData[0];
                                setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
                                setupFallbackTimer ? $timeout.cancel(currentTimerData.timer) : animationsData.push(close);
                            }
                            if (setupFallbackTimer) {
                                var timer = $timeout(onAnimationExpired, timerTime, !1);
                                animationsData[0] = {
                                    timer: timer,
                                    expectedEndTime: endTime
                                };
                                animationsData.push(close);
                                element.data(ANIMATE_TIMER_KEY, animationsData);
                            }
                            events.length && element.on(events.join(" "), onAnimationProgress);
                            if (options.to) {
                                options.cleanupStyles && registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
                                applyAnimationToStyles(element, options);
                            }
                        }
                    }
                    function onAnimationExpired() {
                        var animationsData = element.data(ANIMATE_TIMER_KEY);
                        if (animationsData) {
                            for (var i = 1; i < animationsData.length; i++) animationsData[i]();
                            element.removeData(ANIMATE_TIMER_KEY);
                        }
                    }
                    if (!animationClosed) if (node.parentNode) {
                        var playPause = function(playAnimation) {
                            if (animationCompleted) {
                                if (animationPaused && playAnimation) {
                                    animationPaused = !1;
                                    close();
                                }
                            } else {
                                animationPaused = !playAnimation;
                                if (timings.animationDuration) {
                                    var value = blockKeyframeAnimations(node, animationPaused);
                                    animationPaused ? temporaryStyles.push(value) : removeFromArray(temporaryStyles, value);
                                }
                            }
                        }, maxStagger = itemIndex > 0 && (timings.transitionDuration && 0 === stagger.transitionDuration || timings.animationDuration && 0 === stagger.animationDuration) && Math.max(stagger.animationDelay, stagger.transitionDelay);
                        maxStagger ? $timeout(triggerAnimationStart, Math.floor(maxStagger * itemIndex * ONE_SECOND), !1) : triggerAnimationStart();
                        runnerHost.resume = function() {
                            playPause(!0);
                        };
                        runnerHost.pause = function() {
                            playPause(!1);
                        };
                    } else close();
                }
                var options = initialOptions || {};
                options.$$prepared || (options = prepareAnimationOptions(copy(options)));
                var restoreStyles = {}, node = getDomNode(element);
                if (!node || !node.parentNode || !$$animateQueue.enabled()) return closeAndReturnNoopAnimator();
                var animationClosed, animationPaused, animationCompleted, runner, runnerHost, maxDelay, maxDelayTime, maxDuration, maxDurationTime, startTime, temporaryStyles = [], classes = element.attr("class"), styles = packageStyles(options), events = [];
                if (0 === options.duration || !$sniffer.animations && !$sniffer.transitions) return closeAndReturnNoopAnimator();
                var method = options.event && isArray(options.event) ? options.event.join(" ") : options.event, isStructural = method && options.structural, structuralClassName = "", addRemoveClassName = "";
                isStructural ? structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, !0) : method && (structuralClassName = method);
                options.addClass && (addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX));
                if (options.removeClass) {
                    addRemoveClassName.length && (addRemoveClassName += " ");
                    addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
                }
                options.applyClassesEarly && addRemoveClassName.length && applyAnimationClasses(element, options);
                var preparationClasses = [ structuralClassName, addRemoveClassName ].join(" ").trim(), fullClassName = classes + " " + preparationClasses, activeClasses = pendClasses(preparationClasses, "-active"), hasToStyles = styles.to && Object.keys(styles.to).length > 0;
                if (!((options.keyframeStyle || "").length > 0 || hasToStyles || preparationClasses)) return closeAndReturnNoopAnimator();
                var cacheKey, stagger;
                if (options.stagger > 0) {
                    var staggerVal = parseFloat(options.stagger);
                    stagger = {
                        transitionDelay: staggerVal,
                        animationDelay: staggerVal,
                        transitionDuration: 0,
                        animationDuration: 0
                    };
                } else {
                    cacheKey = gcsHashFn(node, fullClassName);
                    stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
                }
                options.$$skipPreparationClasses || $$jqLite.addClass(element, preparationClasses);
                var applyOnlyDuration;
                if (options.transitionStyle) {
                    var transitionStyle = [ TRANSITION_PROP, options.transitionStyle ];
                    applyInlineStyle(node, transitionStyle);
                    temporaryStyles.push(transitionStyle);
                }
                if (options.duration >= 0) {
                    applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
                    var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);
                    applyInlineStyle(node, durationStyle);
                    temporaryStyles.push(durationStyle);
                }
                if (options.keyframeStyle) {
                    var keyframeStyle = [ ANIMATION_PROP, options.keyframeStyle ];
                    applyInlineStyle(node, keyframeStyle);
                    temporaryStyles.push(keyframeStyle);
                }
                var itemIndex = stagger ? options.staggerIndex >= 0 ? options.staggerIndex : gcsLookup.count(cacheKey) : 0, isFirst = 0 === itemIndex;
                isFirst && !options.skipBlocking && blockTransitions(node, 9999);
                var timings = computeTimings(node, fullClassName, cacheKey), relativeDelay = timings.maxDelay;
                maxDelay = Math.max(relativeDelay, 0);
                maxDuration = timings.maxDuration;
                var flags = {};
                flags.hasTransitions = timings.transitionDuration > 0;
                flags.hasAnimations = timings.animationDuration > 0;
                flags.hasTransitionAll = flags.hasTransitions && "all" == timings.transitionProperty;
                flags.applyTransitionDuration = hasToStyles && (flags.hasTransitions && !flags.hasTransitionAll || flags.hasAnimations && !flags.hasTransitions);
                flags.applyAnimationDuration = options.duration && flags.hasAnimations;
                flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
                flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
                flags.recalculateTimingStyles = addRemoveClassName.length > 0;
                if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
                    maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;
                    if (flags.applyTransitionDuration) {
                        flags.hasTransitions = !0;
                        timings.transitionDuration = maxDuration;
                        applyOnlyDuration = node.style[TRANSITION_PROP + "Property"].length > 0;
                        temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
                    }
                    if (flags.applyAnimationDuration) {
                        flags.hasAnimations = !0;
                        timings.animationDuration = maxDuration;
                        temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
                    }
                }
                if (0 === maxDuration && !flags.recalculateTimingStyles) return closeAndReturnNoopAnimator();
                if (null != options.delay) {
                    var delayStyle;
                    if ("boolean" != typeof options.delay) {
                        delayStyle = parseFloat(options.delay);
                        maxDelay = Math.max(delayStyle, 0);
                    }
                    flags.applyTransitionDelay && temporaryStyles.push(getCssDelayStyle(delayStyle));
                    flags.applyAnimationDelay && temporaryStyles.push(getCssDelayStyle(delayStyle, !0));
                }
                null == options.duration && timings.transitionDuration > 0 && (flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst);
                maxDelayTime = maxDelay * ONE_SECOND;
                maxDurationTime = maxDuration * ONE_SECOND;
                if (!options.skipBlocking) {
                    flags.blockTransition = timings.transitionDuration > 0;
                    flags.blockKeyframeAnimation = timings.animationDuration > 0 && stagger.animationDelay > 0 && 0 === stagger.animationDuration;
                }
                if (options.from) {
                    options.cleanupStyles && registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
                    applyAnimationFromStyles(element, options);
                }
                flags.blockTransition || flags.blockKeyframeAnimation ? applyBlocking(maxDuration) : options.skipBlocking || blockTransitions(node, !1);
                return {
                    $$willAnimate: !0,
                    end: endFn,
                    start: function() {
                        if (!animationClosed) {
                            runnerHost = {
                                end: endFn,
                                cancel: cancelFn,
                                resume: null,
                                pause: null
                            };
                            runner = new $$AnimateRunner(runnerHost);
                            waitUntilQuiet(start);
                            return runner;
                        }
                    }
                };
            };
        } ];
    } ], $$AnimateCssDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        function isDocumentFragment(node) {
            return node.parentNode && 11 === node.parentNode.nodeType;
        }
        $$animationProvider.drivers.push("$$animateCssDriver");
        var NG_ANIMATE_SHIM_CLASS_NAME = "ng-animate-shim", NG_OUT_ANCHOR_CLASS_NAME = "ng-anchor-out";
        this.$get = [ "$animateCss", "$rootScope", "$$AnimateRunner", "$rootElement", "$sniffer", "$$jqLite", "$document", function($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {
            function filterCssClasses(classes) {
                return classes.replace(/\bng-\S+\b/g, "");
            }
            function getUniqueValues(a, b) {
                isString(a) && (a = a.split(" "));
                isString(b) && (b = b.split(" "));
                return a.filter(function(val) {
                    return -1 === b.indexOf(val);
                }).join(" ");
            }
            function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
                function calculateAnchorStyles(anchor) {
                    var styles = {}, coords = getDomNode(anchor).getBoundingClientRect();
                    forEach([ "width", "height", "top", "left" ], function(key) {
                        var value = coords[key];
                        switch (key) {
                          case "top":
                            value += bodyNode.scrollTop;
                            break;

                          case "left":
                            value += bodyNode.scrollLeft;
                        }
                        styles[key] = Math.floor(value) + "px";
                    });
                    return styles;
                }
                function getClassVal(element) {
                    return element.attr("class") || "";
                }
                function prepareInAnimation() {
                    var endingClasses = filterCssClasses(getClassVal(inAnchor)), toAdd = getUniqueValues(endingClasses, startingClasses), toRemove = getUniqueValues(startingClasses, endingClasses), animator = $animateCss(clone, {
                        to: calculateAnchorStyles(inAnchor),
                        addClass: "ng-anchor-in " + toAdd,
                        removeClass: NG_OUT_ANCHOR_CLASS_NAME + " " + toRemove,
                        delay: !0
                    });
                    return animator.$$willAnimate ? animator : null;
                }
                function end() {
                    clone.remove();
                    outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                    inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                }
                var clone = jqLite(getDomNode(outAnchor).cloneNode(!0)), startingClasses = filterCssClasses(getClassVal(clone));
                outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                clone.addClass("ng-anchor");
                rootBodyElement.append(clone);
                var animatorIn, animatorOut = function() {
                    var animator = $animateCss(clone, {
                        addClass: NG_OUT_ANCHOR_CLASS_NAME,
                        delay: !0,
                        from: calculateAnchorStyles(outAnchor)
                    });
                    return animator.$$willAnimate ? animator : null;
                }();
                if (!animatorOut) {
                    animatorIn = prepareInAnimation();
                    if (!animatorIn) return end();
                }
                var startingAnimator = animatorOut || animatorIn;
                return {
                    start: function() {
                        function endFn() {
                            currentAnimation && currentAnimation.end();
                        }
                        var runner, currentAnimation = startingAnimator.start();
                        currentAnimation.done(function() {
                            currentAnimation = null;
                            if (!animatorIn) {
                                animatorIn = prepareInAnimation();
                                if (animatorIn) {
                                    currentAnimation = animatorIn.start();
                                    currentAnimation.done(function() {
                                        currentAnimation = null;
                                        end();
                                        runner.complete();
                                    });
                                    return currentAnimation;
                                }
                            }
                            end();
                            runner.complete();
                        });
                        runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        return runner;
                    }
                };
            }
            function prepareFromToAnchorAnimation(from, to, classes, anchors) {
                var fromAnimation = prepareRegularAnimation(from), toAnimation = prepareRegularAnimation(to), anchorAnimations = [];
                forEach(anchors, function(anchor) {
                    var outElement = anchor.out, inElement = anchor.in, animator = prepareAnchoredAnimation(classes, outElement, inElement);
                    animator && anchorAnimations.push(animator);
                });
                if (fromAnimation || toAnimation || 0 !== anchorAnimations.length) return {
                    start: function() {
                        function endFn() {
                            forEach(animationRunners, function(runner) {
                                runner.end();
                            });
                        }
                        var animationRunners = [];
                        fromAnimation && animationRunners.push(fromAnimation.start());
                        toAnimation && animationRunners.push(toAnimation.start());
                        forEach(anchorAnimations, function(animation) {
                            animationRunners.push(animation.start());
                        });
                        var runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        $$AnimateRunner.all(animationRunners, function(status) {
                            runner.complete(status);
                        });
                        return runner;
                    }
                };
            }
            function prepareRegularAnimation(animationDetails) {
                var element = animationDetails.element, options = animationDetails.options || {};
                if (animationDetails.structural) {
                    options.event = animationDetails.event;
                    options.structural = !0;
                    options.applyClassesEarly = !0;
                    "leave" === animationDetails.event && (options.onDone = options.domOperation);
                }
                options.preparationClasses && (options.event = concatWithSpace(options.event, options.preparationClasses));
                var animator = $animateCss(element, options);
                return animator.$$willAnimate ? animator : null;
            }
            if (!$sniffer.animations && !$sniffer.transitions) return noop;
            var bodyNode = $document[0].body, rootNode = getDomNode($rootElement), rootBodyElement = jqLite(isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode);
            applyAnimationClassesFactory($$jqLite);
            return function(animationDetails) {
                return animationDetails.from && animationDetails.to ? prepareFromToAnchorAnimation(animationDetails.from, animationDetails.to, animationDetails.classes, animationDetails.anchors) : prepareRegularAnimation(animationDetails);
            };
        } ];
    } ], $$AnimateJsProvider = [ "$animateProvider", function($animateProvider) {
        this.$get = [ "$injector", "$$AnimateRunner", "$$jqLite", function($injector, $$AnimateRunner, $$jqLite) {
            function lookupAnimations(classes) {
                classes = isArray(classes) ? classes : classes.split(" ");
                for (var matches = [], flagMap = {}, i = 0; i < classes.length; i++) {
                    var klass = classes[i], animationFactory = $animateProvider.$$registeredAnimations[klass];
                    if (animationFactory && !flagMap[klass]) {
                        matches.push($injector.get(animationFactory));
                        flagMap[klass] = !0;
                    }
                }
                return matches;
            }
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, classes, options) {
                function applyOptions() {
                    options.domOperation();
                    applyAnimationClasses(element, options);
                }
                function close() {
                    animationClosed = !0;
                    applyOptions();
                    applyAnimationStyles(element, options);
                }
                function executeAnimationFn(fn, element, event, options, onDone) {
                    var args;
                    switch (event) {
                      case "animate":
                        args = [ element, options.from, options.to, onDone ];
                        break;

                      case "setClass":
                        args = [ element, classesToAdd, classesToRemove, onDone ];
                        break;

                      case "addClass":
                        args = [ element, classesToAdd, onDone ];
                        break;

                      case "removeClass":
                        args = [ element, classesToRemove, onDone ];
                        break;

                      default:
                        args = [ element, onDone ];
                    }
                    args.push(options);
                    var value = fn.apply(fn, args);
                    if (value) {
                        isFunction(value.start) && (value = value.start());
                        if (value instanceof $$AnimateRunner) value.done(onDone); else if (isFunction(value)) return value;
                    }
                    return noop;
                }
                function groupEventedAnimations(element, event, options, animations, fnName) {
                    var operations = [];
                    forEach(animations, function(ani) {
                        var animation = ani[fnName];
                        animation && operations.push(function() {
                            var runner, endProgressCb, resolved = !1, onAnimationComplete = function(rejected) {
                                if (!resolved) {
                                    resolved = !0;
                                    (endProgressCb || noop)(rejected);
                                    runner.complete(!rejected);
                                }
                            };
                            runner = new $$AnimateRunner({
                                end: function() {
                                    onAnimationComplete();
                                },
                                cancel: function() {
                                    onAnimationComplete(!0);
                                }
                            });
                            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
                                onAnimationComplete(!1 === result);
                            });
                            return runner;
                        });
                    });
                    return operations;
                }
                function packageAnimations(element, event, options, animations, fnName) {
                    var operations = groupEventedAnimations(element, event, options, animations, fnName);
                    if (0 === operations.length) {
                        var a, b;
                        if ("beforeSetClass" === fnName) {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "beforeRemoveClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "beforeAddClass");
                        } else if ("setClass" === fnName) {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "removeClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "addClass");
                        }
                        a && (operations = operations.concat(a));
                        b && (operations = operations.concat(b));
                    }
                    if (0 !== operations.length) return function(callback) {
                        var runners = [];
                        operations.length && forEach(operations, function(animateFn) {
                            runners.push(animateFn());
                        });
                        runners.length ? $$AnimateRunner.all(runners, callback) : callback();
                        return function(reject) {
                            forEach(runners, function(runner) {
                                reject ? runner.cancel() : runner.end();
                            });
                        };
                    };
                }
                var animationClosed = !1;
                if (3 === arguments.length && isObject(classes)) {
                    options = classes;
                    classes = null;
                }
                options = prepareAnimationOptions(options);
                if (!classes) {
                    classes = element.attr("class") || "";
                    options.addClass && (classes += " " + options.addClass);
                    options.removeClass && (classes += " " + options.removeClass);
                }
                var before, after, classesToAdd = options.addClass, classesToRemove = options.removeClass, animations = lookupAnimations(classes);
                if (animations.length) {
                    var afterFn, beforeFn;
                    if ("leave" == event) {
                        beforeFn = "leave";
                        afterFn = "afterLeave";
                    } else {
                        beforeFn = "before" + event.charAt(0).toUpperCase() + event.substr(1);
                        afterFn = event;
                    }
                    "enter" !== event && "move" !== event && (before = packageAnimations(element, event, options, animations, beforeFn));
                    after = packageAnimations(element, event, options, animations, afterFn);
                }
                if (before || after) {
                    var runner;
                    return {
                        $$willAnimate: !0,
                        end: function() {
                            if (runner) runner.end(); else {
                                close();
                                runner = new $$AnimateRunner();
                                runner.complete(!0);
                            }
                            return runner;
                        },
                        start: function() {
                            function onComplete(success) {
                                close(success);
                                runner.complete(success);
                            }
                            function endAnimations(cancelled) {
                                if (!animationClosed) {
                                    (closeActiveAnimations || noop)(cancelled);
                                    onComplete(cancelled);
                                }
                            }
                            if (runner) return runner;
                            runner = new $$AnimateRunner();
                            var closeActiveAnimations, chain = [];
                            before && chain.push(function(fn) {
                                closeActiveAnimations = before(fn);
                            });
                            chain.length ? chain.push(function(fn) {
                                applyOptions();
                                fn(!0);
                            }) : applyOptions();
                            after && chain.push(function(fn) {
                                closeActiveAnimations = after(fn);
                            });
                            runner.setHost({
                                end: function() {
                                    endAnimations();
                                },
                                cancel: function() {
                                    endAnimations(!0);
                                }
                            });
                            $$AnimateRunner.chain(chain, onComplete);
                            return runner;
                        }
                    };
                }
            };
        } ];
    } ], $$AnimateJsDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateJsDriver");
        this.$get = [ "$$animateJs", "$$AnimateRunner", function($$animateJs, $$AnimateRunner) {
            function prepareAnimation(animationDetails) {
                var element = animationDetails.element, event = animationDetails.event, options = animationDetails.options, classes = animationDetails.classes;
                return $$animateJs(element, event, classes, options);
            }
            return function(animationDetails) {
                if (animationDetails.from && animationDetails.to) {
                    var fromAnimation = prepareAnimation(animationDetails.from), toAnimation = prepareAnimation(animationDetails.to);
                    if (!fromAnimation && !toAnimation) return;
                    return {
                        start: function() {
                            function endFnFactory() {
                                return function() {
                                    forEach(animationRunners, function(runner) {
                                        runner.end();
                                    });
                                };
                            }
                            function done(status) {
                                runner.complete(status);
                            }
                            var animationRunners = [];
                            fromAnimation && animationRunners.push(fromAnimation.start());
                            toAnimation && animationRunners.push(toAnimation.start());
                            $$AnimateRunner.all(animationRunners, done);
                            var runner = new $$AnimateRunner({
                                end: endFnFactory(),
                                cancel: endFnFactory()
                            });
                            return runner;
                        }
                    };
                }
                return prepareAnimation(animationDetails);
            };
        } ];
    } ], NG_ANIMATE_ATTR_NAME = "data-ng-animate", NG_ANIMATE_PIN_DATA = "$ngAnimatePin", $$AnimateQueueProvider = [ "$animateProvider", function($animateProvider) {
        function makeTruthyCssClassMap(classString) {
            if (!classString) return null;
            var keys = classString.split(ONE_SPACE), map = Object.create(null);
            forEach(keys, function(key) {
                map[key] = !0;
            });
            return map;
        }
        function hasMatchingClasses(newClassString, currentClassString) {
            if (newClassString && currentClassString) {
                var currentClassMap = makeTruthyCssClassMap(currentClassString);
                return newClassString.split(ONE_SPACE).some(function(className) {
                    return currentClassMap[className];
                });
            }
        }
        function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
            return rules[ruleType].some(function(fn) {
                return fn(element, currentAnimation, previousAnimation);
            });
        }
        function hasAnimationClasses(options, and) {
            options = options || {};
            var a = (options.addClass || "").length > 0, b = (options.removeClass || "").length > 0;
            return and ? a && b : a || b;
        }
        var PRE_DIGEST_STATE = 1, RUNNING_STATE = 2, ONE_SPACE = " ", rules = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };
        rules.join.push(function(element, newAnimation, currentAnimation) {
            return !newAnimation.structural && hasAnimationClasses(newAnimation.options);
        });
        rules.skip.push(function(element, newAnimation, currentAnimation) {
            return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);
        });
        rules.skip.push(function(element, newAnimation, currentAnimation) {
            return "leave" == currentAnimation.event && newAnimation.structural;
        });
        rules.skip.push(function(element, newAnimation, currentAnimation) {
            return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
        });
        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            return currentAnimation.structural && newAnimation.structural;
        });
        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
        });
        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            var nA = newAnimation.options.addClass, nR = newAnimation.options.removeClass, cA = currentAnimation.options.addClass, cR = currentAnimation.options.removeClass;
            return !(isUndefined(nA) && isUndefined(nR) || isUndefined(cA) && isUndefined(cR)) && (hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA));
        });
        this.$get = [ "$$rAF", "$rootScope", "$rootElement", "$document", "$$HashMap", "$$animation", "$$AnimateRunner", "$templateRequest", "$$jqLite", "$$forceReflow", function($$rAF, $rootScope, $rootElement, $document, $$HashMap, $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow) {
            function postDigestTaskFactory() {
                var postDigestCalled = !1;
                return function(fn) {
                    postDigestCalled ? fn() : $rootScope.$$postDigest(function() {
                        postDigestCalled = !0;
                        fn();
                    });
                };
            }
            function normalizeAnimationOptions(element, options) {
                return mergeAnimationOptions(element, options, {});
            }
            function findCallbacks(parent, element, event) {
                var targetNode = getDomNode(element), targetParentNode = getDomNode(parent), matches = [], entries = callbackRegistry[event];
                entries && forEach(entries, function(entry) {
                    contains.call(entry.node, targetNode) ? matches.push(entry.callback) : "leave" === event && contains.call(entry.node, targetParentNode) && matches.push(entry.callback);
                });
                return matches;
            }
            function queueAnimation(element, event, initialOptions) {
                function notifyProgress(runner, event, phase, data) {
                    runInNextPostDigestOrNow(function() {
                        var callbacks = findCallbacks(parent, element, event);
                        callbacks.length && $$rAF(function() {
                            forEach(callbacks, function(callback) {
                                callback(element, phase, data);
                            });
                        });
                    });
                    runner.progress(event, phase, data);
                }
                function close(reject) {
                    clearGeneratedClasses(element, options);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    runner.complete(!reject);
                }
                var node, parent, options = copy(initialOptions);
                element = stripCommentsFromElement(element);
                if (element) {
                    node = getDomNode(element);
                    parent = element.parent();
                }
                options = prepareAnimationOptions(options);
                var runner = new $$AnimateRunner(), runInNextPostDigestOrNow = postDigestTaskFactory();
                isArray(options.addClass) && (options.addClass = options.addClass.join(" "));
                options.addClass && !isString(options.addClass) && (options.addClass = null);
                isArray(options.removeClass) && (options.removeClass = options.removeClass.join(" "));
                options.removeClass && !isString(options.removeClass) && (options.removeClass = null);
                options.from && !isObject(options.from) && (options.from = null);
                options.to && !isObject(options.to) && (options.to = null);
                if (!node) {
                    close();
                    return runner;
                }
                var className = [ node.className, options.addClass, options.removeClass ].join(" ");
                if (!isAnimatableClassName(className)) {
                    close();
                    return runner;
                }
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0, skipAnimations = !animationsEnabled || $document[0].hidden || disabledElementsLookup.get(node), existingAnimation = !skipAnimations && activeAnimationsLookup.get(node) || {}, hasExistingAnimation = !!existingAnimation.state;
                skipAnimations || hasExistingAnimation && existingAnimation.state == PRE_DIGEST_STATE || (skipAnimations = !areAnimationsAllowed(element, parent, event));
                if (skipAnimations) {
                    close();
                    return runner;
                }
                isStructural && closeChildAnimations(element);
                var newAnimation = {
                    structural: isStructural,
                    element: element,
                    event: event,
                    close: close,
                    options: options,
                    runner: runner
                };
                if (hasExistingAnimation) {
                    if (isAllowed("skip", element, newAnimation, existingAnimation)) {
                        if (existingAnimation.state === RUNNING_STATE) {
                            close();
                            return runner;
                        }
                        mergeAnimationOptions(element, existingAnimation.options, options);
                        return existingAnimation.runner;
                    }
                    if (isAllowed("cancel", element, newAnimation, existingAnimation)) if (existingAnimation.state === RUNNING_STATE) existingAnimation.runner.end(); else {
                        if (!existingAnimation.structural) {
                            mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
                            return existingAnimation.runner;
                        }
                        existingAnimation.close();
                    } else {
                        if (isAllowed("join", element, newAnimation, existingAnimation)) {
                            if (existingAnimation.state !== RUNNING_STATE) {
                                applyGeneratedPreparationClasses(element, isStructural ? event : null, options);
                                event = newAnimation.event = existingAnimation.event;
                                options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
                                return existingAnimation.runner;
                            }
                            normalizeAnimationOptions(element, options);
                        }
                    }
                } else normalizeAnimationOptions(element, options);
                var isValidAnimation = newAnimation.structural;
                isValidAnimation || (isValidAnimation = "animate" === newAnimation.event && Object.keys(newAnimation.options.to || {}).length > 0 || hasAnimationClasses(newAnimation.options));
                if (!isValidAnimation) {
                    close();
                    clearElementAnimationState(element);
                    return runner;
                }
                var counter = (existingAnimation.counter || 0) + 1;
                newAnimation.counter = counter;
                markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);
                $rootScope.$$postDigest(function() {
                    var animationDetails = activeAnimationsLookup.get(node), animationCancelled = !animationDetails;
                    animationDetails = animationDetails || {};
                    var parentElement = element.parent() || [], isValidAnimation = parentElement.length > 0 && ("animate" === animationDetails.event || animationDetails.structural || hasAnimationClasses(animationDetails.options));
                    if (!animationCancelled && animationDetails.counter === counter && isValidAnimation) {
                        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, !0) ? "setClass" : animationDetails.event;
                        markElementAnimationState(element, RUNNING_STATE);
                        var realRunner = $$animation(element, event, animationDetails.options);
                        realRunner.done(function(status) {
                            close(!status);
                            var animationDetails = activeAnimationsLookup.get(node);
                            animationDetails && animationDetails.counter === counter && clearElementAnimationState(getDomNode(element));
                            notifyProgress(runner, event, "close", {});
                        });
                        runner.setHost(realRunner);
                        notifyProgress(runner, event, "start", {});
                    } else {
                        if (animationCancelled) {
                            applyAnimationClasses(element, options);
                            applyAnimationStyles(element, options);
                        }
                        if (animationCancelled || isStructural && animationDetails.event !== event) {
                            options.domOperation();
                            runner.end();
                        }
                        isValidAnimation || clearElementAnimationState(element);
                    }
                });
                return runner;
            }
            function closeChildAnimations(element) {
                var node = getDomNode(element), children = node.querySelectorAll("[" + NG_ANIMATE_ATTR_NAME + "]");
                forEach(children, function(child) {
                    var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME)), animationDetails = activeAnimationsLookup.get(child);
                    if (animationDetails) switch (state) {
                      case RUNNING_STATE:
                        animationDetails.runner.end();

                      case PRE_DIGEST_STATE:
                        activeAnimationsLookup.remove(child);
                    }
                });
            }
            function clearElementAnimationState(element) {
                var node = getDomNode(element);
                node.removeAttribute(NG_ANIMATE_ATTR_NAME);
                activeAnimationsLookup.remove(node);
            }
            function isMatchingElement(nodeOrElmA, nodeOrElmB) {
                return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
            }
            function areAnimationsAllowed(element, parentElement, event) {
                var animateChildren, bodyElement = jqLite($document[0].body), bodyElementDetected = isMatchingElement(element, bodyElement) || "HTML" === element[0].nodeName, rootElementDetected = isMatchingElement(element, $rootElement), parentAnimationDetected = !1, elementDisabled = disabledElementsLookup.get(getDomNode(element)), parentHost = element.data(NG_ANIMATE_PIN_DATA);
                parentHost && (parentElement = parentHost);
                for (;parentElement && parentElement.length; ) {
                    rootElementDetected || (rootElementDetected = isMatchingElement(parentElement, $rootElement));
                    var parentNode = parentElement[0];
                    if (parentNode.nodeType !== ELEMENT_NODE) break;
                    var details = activeAnimationsLookup.get(parentNode) || {};
                    if (!parentAnimationDetected) {
                        var parentElementDisabled = disabledElementsLookup.get(parentNode);
                        if (!0 === parentElementDisabled && !1 !== elementDisabled) {
                            elementDisabled = !0;
                            break;
                        }
                        !1 === parentElementDisabled && (elementDisabled = !1);
                        parentAnimationDetected = details.structural;
                    }
                    if (isUndefined(animateChildren) || !0 === animateChildren) {
                        var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
                        isDefined(value) && (animateChildren = value);
                    }
                    if (parentAnimationDetected && !1 === animateChildren) break;
                    bodyElementDetected || (bodyElementDetected = isMatchingElement(parentElement, bodyElement));
                    if (bodyElementDetected && rootElementDetected) break;
                    if (!rootElementDetected) {
                        parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
                        if (parentHost) {
                            parentElement = parentHost;
                            continue;
                        }
                    }
                    parentElement = parentElement.parent();
                }
                return (!parentAnimationDetected || animateChildren) && !0 !== elementDisabled && rootElementDetected && bodyElementDetected;
            }
            function markElementAnimationState(element, state, details) {
                details = details || {};
                details.state = state;
                var node = getDomNode(element);
                node.setAttribute(NG_ANIMATE_ATTR_NAME, state);
                var oldValue = activeAnimationsLookup.get(node), newValue = oldValue ? extend(oldValue, details) : details;
                activeAnimationsLookup.put(node, newValue);
            }
            var activeAnimationsLookup = new $$HashMap(), disabledElementsLookup = new $$HashMap(), animationsEnabled = null, deregisterWatch = $rootScope.$watch(function() {
                return 0 === $templateRequest.totalPendingRequests;
            }, function(isEmpty) {
                if (isEmpty) {
                    deregisterWatch();
                    $rootScope.$$postDigest(function() {
                        $rootScope.$$postDigest(function() {
                            null === animationsEnabled && (animationsEnabled = !0);
                        });
                    });
                }
            }), callbackRegistry = {}, classNameFilter = $animateProvider.classNameFilter(), isAnimatableClassName = classNameFilter ? function(className) {
                return classNameFilter.test(className);
            } : function() {
                return !0;
            }, applyAnimationClasses = applyAnimationClassesFactory($$jqLite), contains = Node.prototype.contains || function(arg) {
                return this === arg || !!(16 & this.compareDocumentPosition(arg));
            };
            return {
                on: function(event, container, callback) {
                    var node = extractElementNode(container);
                    callbackRegistry[event] = callbackRegistry[event] || [];
                    callbackRegistry[event].push({
                        node: node,
                        callback: callback
                    });
                },
                off: function(event, container, callback) {
                    var entries = callbackRegistry[event];
                    entries && (callbackRegistry[event] = 1 === arguments.length ? null : function(list, matchContainer, matchCallback) {
                        var containerNode = extractElementNode(matchContainer);
                        return list.filter(function(entry) {
                            return !(entry.node === containerNode && (!matchCallback || entry.callback === matchCallback));
                        });
                    }(entries, container, callback));
                },
                pin: function(element, parentElement) {
                    assertArg(isElement(element), "element", "not an element");
                    assertArg(isElement(parentElement), "parentElement", "not an element");
                    element.data(NG_ANIMATE_PIN_DATA, parentElement);
                },
                push: function(element, event, options, domOperation) {
                    options = options || {};
                    options.domOperation = domOperation;
                    return queueAnimation(element, event, options);
                },
                enabled: function(element, bool) {
                    var argCount = arguments.length;
                    if (0 === argCount) bool = !!animationsEnabled; else {
                        if (isElement(element)) {
                            var node = getDomNode(element), recordExists = disabledElementsLookup.get(node);
                            1 === argCount ? bool = !recordExists : disabledElementsLookup.put(node, !bool);
                        } else bool = animationsEnabled = !!element;
                    }
                    return bool;
                }
            };
        } ];
    } ], $$AnimationProvider = [ "$animateProvider", function($animateProvider) {
        function setRunner(element, runner) {
            element.data(RUNNER_STORAGE_KEY, runner);
        }
        function removeRunner(element) {
            element.removeData(RUNNER_STORAGE_KEY);
        }
        function getRunner(element) {
            return element.data(RUNNER_STORAGE_KEY);
        }
        var NG_ANIMATE_REF_ATTR = "ng-animate-ref", drivers = this.drivers = [], RUNNER_STORAGE_KEY = "$$animationRunner";
        this.$get = [ "$$jqLite", "$rootScope", "$injector", "$$AnimateRunner", "$$HashMap", "$$rAFScheduler", function($$jqLite, $rootScope, $injector, $$AnimateRunner, $$HashMap, $$rAFScheduler) {
            function sortAnimations(animations) {
                function processNode(entry) {
                    if (entry.processed) return entry;
                    entry.processed = !0;
                    var elementNode = entry.domNode, parentNode = elementNode.parentNode;
                    lookup.put(elementNode, entry);
                    for (var parentEntry; parentNode; ) {
                        parentEntry = lookup.get(parentNode);
                        if (parentEntry) {
                            parentEntry.processed || (parentEntry = processNode(parentEntry));
                            break;
                        }
                        parentNode = parentNode.parentNode;
                    }
                    (parentEntry || tree).children.push(entry);
                    return entry;
                }
                var i, tree = {
                    children: []
                }, lookup = new $$HashMap();
                for (i = 0; i < animations.length; i++) {
                    var animation = animations[i];
                    lookup.put(animation.domNode, animations[i] = {
                        domNode: animation.domNode,
                        fn: animation.fn,
                        children: []
                    });
                }
                for (i = 0; i < animations.length; i++) processNode(animations[i]);
                return function(tree) {
                    var i, result = [], queue = [];
                    for (i = 0; i < tree.children.length; i++) queue.push(tree.children[i]);
                    var remainingLevelEntries = queue.length, nextLevelEntries = 0, row = [];
                    for (i = 0; i < queue.length; i++) {
                        var entry = queue[i];
                        if (remainingLevelEntries <= 0) {
                            remainingLevelEntries = nextLevelEntries;
                            nextLevelEntries = 0;
                            result.push(row);
                            row = [];
                        }
                        row.push(entry.fn);
                        entry.children.forEach(function(childEntry) {
                            nextLevelEntries++;
                            queue.push(childEntry);
                        });
                        remainingLevelEntries--;
                    }
                    row.length && result.push(row);
                    return result;
                }(tree);
            }
            var animationQueue = [], applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, options) {
                function getAnchorNodes(node) {
                    var SELECTOR = "[" + NG_ANIMATE_REF_ATTR + "]", items = node.hasAttribute(NG_ANIMATE_REF_ATTR) ? [ node ] : node.querySelectorAll(SELECTOR), anchors = [];
                    forEach(items, function(node) {
                        var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
                        attr && attr.length && anchors.push(node);
                    });
                    return anchors;
                }
                function groupAnimations(animations) {
                    var preparedAnimations = [], refLookup = {};
                    forEach(animations, function(animation, index) {
                        var element = animation.element, node = getDomNode(element), event = animation.event, enterOrMove = [ "enter", "move" ].indexOf(event) >= 0, anchorNodes = animation.structural ? getAnchorNodes(node) : [];
                        if (anchorNodes.length) {
                            var direction = enterOrMove ? "to" : "from";
                            forEach(anchorNodes, function(anchor) {
                                var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
                                refLookup[key] = refLookup[key] || {};
                                refLookup[key][direction] = {
                                    animationID: index,
                                    element: jqLite(anchor)
                                };
                            });
                        } else preparedAnimations.push(animation);
                    });
                    var usedIndicesLookup = {}, anchorGroups = {};
                    forEach(refLookup, function(operations, key) {
                        var from = operations.from, to = operations.to;
                        if (from && to) {
                            var fromAnimation = animations[from.animationID], toAnimation = animations[to.animationID], lookupKey = from.animationID.toString();
                            if (!anchorGroups[lookupKey]) {
                                var group = anchorGroups[lookupKey] = {
                                    structural: !0,
                                    beforeStart: function() {
                                        fromAnimation.beforeStart();
                                        toAnimation.beforeStart();
                                    },
                                    close: function() {
                                        fromAnimation.close();
                                        toAnimation.close();
                                    },
                                    classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
                                    from: fromAnimation,
                                    to: toAnimation,
                                    anchors: []
                                };
                                if (group.classes.length) preparedAnimations.push(group); else {
                                    preparedAnimations.push(fromAnimation);
                                    preparedAnimations.push(toAnimation);
                                }
                            }
                            anchorGroups[lookupKey].anchors.push({
                                out: from.element,
                                in: to.element
                            });
                        } else {
                            var index = from ? from.animationID : to.animationID, indexKey = index.toString();
                            if (!usedIndicesLookup[indexKey]) {
                                usedIndicesLookup[indexKey] = !0;
                                preparedAnimations.push(animations[index]);
                            }
                        }
                    });
                    return preparedAnimations;
                }
                function cssClassesIntersection(a, b) {
                    a = a.split(" ");
                    b = b.split(" ");
                    for (var matches = [], i = 0; i < a.length; i++) {
                        var aa = a[i];
                        if ("ng-" !== aa.substring(0, 3)) for (var j = 0; j < b.length; j++) if (aa === b[j]) {
                            matches.push(aa);
                            break;
                        }
                    }
                    return matches.join(" ");
                }
                function invokeFirstDriver(animationDetails) {
                    for (var i = drivers.length - 1; i >= 0; i--) {
                        var driverName = drivers[i];
                        if ($injector.has(driverName)) {
                            var factory = $injector.get(driverName), driver = factory(animationDetails);
                            if (driver) return driver;
                        }
                    }
                }
                function beforeStart() {
                    element.addClass(NG_ANIMATE_CLASSNAME);
                    tempClasses && $$jqLite.addClass(element, tempClasses);
                }
                function updateAnimationRunners(animation, newRunner) {
                    function update(element) {
                        getRunner(element).setHost(newRunner);
                    }
                    if (animation.from && animation.to) {
                        update(animation.from.element);
                        update(animation.to.element);
                    } else update(animation.element);
                }
                function handleDestroyedElement() {
                    var runner = getRunner(element);
                    !runner || "leave" === event && options.$$domOperationFired || runner.end();
                }
                function close(rejected) {
                    element.off("$destroy", handleDestroyedElement);
                    removeRunner(element);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    tempClasses && $$jqLite.removeClass(element, tempClasses);
                    element.removeClass(NG_ANIMATE_CLASSNAME);
                    runner.complete(!rejected);
                }
                options = prepareAnimationOptions(options);
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0, runner = new $$AnimateRunner({
                    end: function() {
                        close();
                    },
                    cancel: function() {
                        close(!0);
                    }
                });
                if (!drivers.length) {
                    close();
                    return runner;
                }
                setRunner(element, runner);
                var classes = mergeClasses(element.attr("class"), mergeClasses(options.addClass, options.removeClass)), tempClasses = options.tempClasses;
                if (tempClasses) {
                    classes += " " + tempClasses;
                    options.tempClasses = null;
                }
                animationQueue.push({
                    element: element,
                    classes: classes,
                    event: event,
                    structural: isStructural,
                    options: options,
                    beforeStart: beforeStart,
                    close: close
                });
                element.on("$destroy", handleDestroyedElement);
                if (animationQueue.length > 1) return runner;
                $rootScope.$$postDigest(function() {
                    var animations = [];
                    forEach(animationQueue, function(entry) {
                        getRunner(entry.element) ? animations.push(entry) : entry.close();
                    });
                    animationQueue.length = 0;
                    var groupedAnimations = groupAnimations(animations), toBeSortedAnimations = [];
                    forEach(groupedAnimations, function(animationEntry) {
                        toBeSortedAnimations.push({
                            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
                            fn: function() {
                                animationEntry.beforeStart();
                                var startAnimationFn, closeFn = animationEntry.close;
                                if (getRunner(animationEntry.anchors ? animationEntry.from.element || animationEntry.to.element : animationEntry.element)) {
                                    var operation = invokeFirstDriver(animationEntry);
                                    operation && (startAnimationFn = operation.start);
                                }
                                if (startAnimationFn) {
                                    var animationRunner = startAnimationFn();
                                    animationRunner.done(function(status) {
                                        closeFn(!status);
                                    });
                                    updateAnimationRunners(animationEntry, animationRunner);
                                } else closeFn();
                            }
                        });
                    });
                    $$rAFScheduler(sortAnimations(toBeSortedAnimations));
                });
                return runner;
            };
        } ];
    } ];
    angular.module("ngAnimate", []).directive("ngAnimateChildren", $$AnimateChildrenDirective).factory("$$rAFScheduler", $$rAFSchedulerFactory).provider("$$animateQueue", $$AnimateQueueProvider).provider("$$animation", $$AnimationProvider).provider("$animateCss", $AnimateCssProvider).provider("$$animateCssDriver", $$AnimateCssDriverProvider).provider("$$animateJs", $$AnimateJsProvider).provider("$$animateJsDriver", $$AnimateJsDriverProvider);
}(window, window.angular);

!function(window, angular, undefined) {
    "use strict";
    function $AriaProvider() {
        function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {
            return function(scope, elem, attr) {
                var ariaCamelName = attr.$normalize(ariaAttr);
                !config[ariaCamelName] || isNodeOneOf(elem, nodeBlackList) || attr[ariaCamelName] || scope.$watch(attr[attrName], function(boolVal) {
                    boolVal = negate ? !boolVal : !!boolVal;
                    elem.attr(ariaAttr, boolVal);
                });
            };
        }
        var config = {
            ariaHidden: !0,
            ariaChecked: !0,
            ariaDisabled: !0,
            ariaRequired: !0,
            ariaInvalid: !0,
            ariaMultiline: !0,
            ariaValue: !0,
            tabindex: !0,
            bindKeypress: !0,
            bindRoleForClick: !0
        };
        this.config = function(newConfig) {
            config = angular.extend(config, newConfig);
        };
        this.$get = function() {
            return {
                config: function(key) {
                    return config[key];
                },
                $$watchExpr: watchExpr
            };
        };
    }
    var ngAriaModule = angular.module("ngAria", [ "ng" ]).provider("$aria", $AriaProvider), nodeBlackList = [ "BUTTON", "A", "INPUT", "TEXTAREA", "SELECT", "DETAILS", "SUMMARY" ], isNodeOneOf = function(elem, nodeTypeArray) {
        if (-1 !== nodeTypeArray.indexOf(elem[0].nodeName)) return !0;
    };
    ngAriaModule.directive("ngShow", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngShow", "aria-hidden", [], !0);
    } ]).directive("ngHide", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngHide", "aria-hidden", [], !1);
    } ]).directive("ngModel", [ "$aria", function($aria) {
        function shouldAttachAttr(attr, normalizedAttr, elem) {
            return $aria.config(normalizedAttr) && !elem.attr(attr);
        }
        function shouldAttachRole(role, elem) {
            return !elem.attr("role") && elem.attr("type") === role && "INPUT" !== elem[0].nodeName;
        }
        function getShape(attr, elem) {
            var type = attr.type, role = attr.role;
            return "checkbox" === (type || role) || "menuitemcheckbox" === role ? "checkbox" : "radio" === (type || role) || "menuitemradio" === role ? "radio" : "range" === type || "progressbar" === role || "slider" === role ? "range" : "textbox" === (type || role) || "TEXTAREA" === elem[0].nodeName ? "multiline" : "";
        }
        return {
            restrict: "A",
            require: "?ngModel",
            priority: 200,
            compile: function(elem, attr) {
                var shape = getShape(attr, elem);
                return {
                    pre: function(scope, elem, attr, ngModel) {
                        "checkbox" === shape && "checkbox" !== attr.type && (ngModel.$isEmpty = function(value) {
                            return !1 === value;
                        });
                    },
                    post: function(scope, elem, attr, ngModel) {
                        function ngAriaWatchModelValue() {
                            return ngModel.$modelValue;
                        }
                        function ngAriaCheckboxReaction() {
                            elem.attr("aria-checked", !ngModel.$isEmpty(ngModel.$viewValue));
                        }
                        var needsTabIndex = shouldAttachAttr("tabindex", "tabindex", elem) && !isNodeOneOf(elem, nodeBlackList);
                        switch (shape) {
                          case "radio":
                          case "checkbox":
                            shouldAttachRole(shape, elem) && elem.attr("role", shape);
                            shouldAttachAttr("aria-checked", "ariaChecked", elem) && scope.$watch(ngAriaWatchModelValue, "radio" === shape ? function() {
                                if (needsTabIndex) {
                                    needsTabIndex = !1;
                                    return function(newVal) {
                                        var boolVal = attr.value == ngModel.$viewValue;
                                        elem.attr("aria-checked", boolVal);
                                        elem.attr("tabindex", 0 - !boolVal);
                                    };
                                }
                                return function(newVal) {
                                    elem.attr("aria-checked", attr.value == ngModel.$viewValue);
                                };
                            }() : ngAriaCheckboxReaction);
                            needsTabIndex && elem.attr("tabindex", 0);
                            break;

                          case "range":
                            shouldAttachRole(shape, elem) && elem.attr("role", "slider");
                            if ($aria.config("ariaValue")) {
                                var needsAriaValuemin = !elem.attr("aria-valuemin") && (attr.hasOwnProperty("min") || attr.hasOwnProperty("ngMin")), needsAriaValuemax = !elem.attr("aria-valuemax") && (attr.hasOwnProperty("max") || attr.hasOwnProperty("ngMax")), needsAriaValuenow = !elem.attr("aria-valuenow");
                                needsAriaValuemin && attr.$observe("min", function(newVal) {
                                    elem.attr("aria-valuemin", newVal);
                                });
                                needsAriaValuemax && attr.$observe("max", function(newVal) {
                                    elem.attr("aria-valuemax", newVal);
                                });
                                needsAriaValuenow && scope.$watch(ngAriaWatchModelValue, function(newVal) {
                                    elem.attr("aria-valuenow", newVal);
                                });
                            }
                            needsTabIndex && elem.attr("tabindex", 0);
                            break;

                          case "multiline":
                            shouldAttachAttr("aria-multiline", "ariaMultiline", elem) && elem.attr("aria-multiline", !0);
                        }
                        ngModel.$validators.required && shouldAttachAttr("aria-required", "ariaRequired", elem) && scope.$watch(function() {
                            return ngModel.$error.required;
                        }, function(newVal) {
                            elem.attr("aria-required", !!newVal);
                        });
                        shouldAttachAttr("aria-invalid", "ariaInvalid", elem) && scope.$watch(function() {
                            return ngModel.$invalid;
                        }, function(newVal) {
                            elem.attr("aria-invalid", !!newVal);
                        });
                    }
                };
            }
        };
    } ]).directive("ngDisabled", [ "$aria", function($aria) {
        return $aria.$$watchExpr("ngDisabled", "aria-disabled", []);
    } ]).directive("ngMessages", function() {
        return {
            restrict: "A",
            require: "?ngMessages",
            link: function(scope, elem, attr, ngMessages) {
                elem.attr("aria-live") || elem.attr("aria-live", "assertive");
            }
        };
    }).directive("ngClick", [ "$aria", "$parse", function($aria, $parse) {
        return {
            restrict: "A",
            compile: function(elem, attr) {
                var fn = $parse(attr.ngClick, null, !0);
                return function(scope, elem, attr) {
                    if (!isNodeOneOf(elem, nodeBlackList)) {
                        $aria.config("bindRoleForClick") && !elem.attr("role") && elem.attr("role", "button");
                        $aria.config("tabindex") && !elem.attr("tabindex") && elem.attr("tabindex", 0);
                        $aria.config("bindKeypress") && !attr.ngKeypress && elem.on("keypress", function(event) {
                            function callback() {
                                fn(scope, {
                                    $event: event
                                });
                            }
                            var keyCode = event.which || event.keyCode;
                            32 !== keyCode && 13 !== keyCode || scope.$apply(callback);
                        });
                    }
                };
            }
        };
    } ]).directive("ngDblclick", [ "$aria", function($aria) {
        return function(scope, elem, attr) {
            !$aria.config("tabindex") || elem.attr("tabindex") || isNodeOneOf(elem, nodeBlackList) || elem.attr("tabindex", 0);
        };
    } ]);
}(window, window.angular);

!function(window, angular, undefined) {
    "use strict";
    !function() {
        angular.module("ngMaterial", [ "ng", "ngAnimate", "ngAria", "material.core", "material.core.gestures", "material.core.layout", "material.core.theming.palette", "material.core.theming", "material.core.animate", "material.components.autocomplete", "material.components.backdrop", "material.components.bottomSheet", "material.components.button", "material.components.card", "material.components.checkbox", "material.components.chips", "material.components.content", "material.components.datepicker", "material.components.dialog", "material.components.divider", "material.components.fabActions", "material.components.fabShared", "material.components.fabSpeedDial", "material.components.fabToolbar", "material.components.fabTrigger", "material.components.gridList", "material.components.icon", "material.components.input", "material.components.list", "material.components.menu", "material.components.menuBar", "material.components.progressCircular", "material.components.radioButton", "material.components.progressLinear", "material.components.showHide", "material.components.select", "material.components.slider", "material.components.sidenav", "material.components.sticky", "material.components.subheader", "material.components.switch", "material.components.swipe", "material.components.tabs", "material.components.toast", "material.components.toolbar", "material.components.virtualRepeat", "material.components.tooltip", "material.components.whiteframe" ]);
    }();
    !function() {
        function DetectNgTouch($log, $injector) {
            if ($injector.has("$swipe")) {
                $log.warn("You are using the ngTouch module. \nAngular Material already has mobile click, tap, and swipe support... \nngTouch is not supported with Angular Material!");
            }
        }
        function MdCoreConfigure($provide, $mdThemingProvider) {
            $provide.decorator("$$rAF", [ "$delegate", rAFDecorator ]);
            $mdThemingProvider.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("deep-orange").backgroundPalette("grey");
        }
        function rAFDecorator($delegate) {
            $delegate.throttle = function(cb) {
                var queuedArgs, alreadyQueued, queueCb, context;
                return function() {
                    queuedArgs = arguments;
                    context = this;
                    queueCb = cb;
                    if (!alreadyQueued) {
                        alreadyQueued = !0;
                        $delegate(function() {
                            queueCb.apply(context, Array.prototype.slice.call(queuedArgs));
                            alreadyQueued = !1;
                        });
                    }
                };
            };
            return $delegate;
        }
        angular.module("material.core", [ "ngAnimate", "material.core.animate", "material.core.layout", "material.core.gestures", "material.core.theming" ]).config(MdCoreConfigure).run(DetectNgTouch);
        DetectNgTouch.$inject = [ "$log", "$injector" ];
        MdCoreConfigure.$inject = [ "$provide", "$mdThemingProvider" ];
    }();
    !function() {
        function MdConstantFactory($sniffer) {
            function vendorProperty(name) {
                return webkit ? "webkit" + name.charAt(0).toUpperCase() + name.substring(1) : name;
            }
            var webkit = /webkit/i.test($sniffer.vendorPrefix);
            return {
                KEY_CODE: {
                    COMMA: 188,
                    ENTER: 13,
                    ESCAPE: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT_ARROW: 37,
                    UP_ARROW: 38,
                    RIGHT_ARROW: 39,
                    DOWN_ARROW: 40,
                    TAB: 9,
                    BACKSPACE: 8,
                    DELETE: 46
                },
                CSS: {
                    TRANSITIONEND: "transitionend" + (webkit ? " webkitTransitionEnd" : ""),
                    ANIMATIONEND: "animationend" + (webkit ? " webkitAnimationEnd" : ""),
                    TRANSFORM: vendorProperty("transform"),
                    TRANSFORM_ORIGIN: vendorProperty("transformOrigin"),
                    TRANSITION: vendorProperty("transition"),
                    TRANSITION_DURATION: vendorProperty("transitionDuration"),
                    ANIMATION_PLAY_STATE: vendorProperty("animationPlayState"),
                    ANIMATION_DURATION: vendorProperty("animationDuration"),
                    ANIMATION_NAME: vendorProperty("animationName"),
                    ANIMATION_TIMING: vendorProperty("animationTimingFunction"),
                    ANIMATION_DIRECTION: vendorProperty("animationDirection")
                },
                MEDIA: {
                    xs: "(max-width: 599px)",
                    "gt-xs": "(min-width: 600px)",
                    sm: "(min-width: 600px) and (max-width: 959px)",
                    "gt-sm": "(min-width: 960px)",
                    md: "(min-width: 960px) and (max-width: 1279px)",
                    "gt-md": "(min-width: 1280px)",
                    lg: "(min-width: 1280px) and (max-width: 1919px)",
                    "gt-lg": "(min-width: 1920px)",
                    xl: "(min-width: 1920px)"
                },
                MEDIA_PRIORITY: [ "xl", "gt-lg", "lg", "gt-md", "md", "gt-sm", "sm", "gt-xs", "xs" ]
            };
        }
        angular.module("material.core").factory("$mdConstant", MdConstantFactory);
        MdConstantFactory.$inject = [ "$sniffer" ];
    }();
    !function() {
        function MdIterator(items, reloop) {
            function getItems() {
                return [].concat(_items);
            }
            function count() {
                return _items.length;
            }
            function inRange(index) {
                return _items.length && index > -1 && index < _items.length;
            }
            function hasNext(item) {
                return !!item && inRange(indexOf(item) + 1);
            }
            function hasPrevious(item) {
                return !!item && inRange(indexOf(item) - 1);
            }
            function itemAt(index) {
                return inRange(index) ? _items[index] : null;
            }
            function findBy(key, val) {
                return _items.filter(function(item) {
                    return item[key] === val;
                });
            }
            function add(item, index) {
                if (!item) return -1;
                angular.isNumber(index) || (index = _items.length);
                _items.splice(index, 0, item);
                return indexOf(item);
            }
            function remove(item) {
                contains(item) && _items.splice(indexOf(item), 1);
            }
            function indexOf(item) {
                return _items.indexOf(item);
            }
            function contains(item) {
                return item && indexOf(item) > -1;
            }
            function first() {
                return _items.length ? _items[0] : null;
            }
            function last() {
                return _items.length ? _items[_items.length - 1] : null;
            }
            function findSubsequentItem(backwards, item, validate, limit) {
                validate = validate || trueFn;
                for (var curIndex = indexOf(item); ;) {
                    if (!inRange(curIndex)) return null;
                    var nextIndex = curIndex + (backwards ? -1 : 1), foundItem = null;
                    if (inRange(nextIndex)) foundItem = _items[nextIndex]; else if (reloop) {
                        foundItem = backwards ? last() : first();
                        nextIndex = indexOf(foundItem);
                    }
                    if (null === foundItem || nextIndex === limit) return null;
                    if (validate(foundItem)) return foundItem;
                    angular.isUndefined(limit) && (limit = nextIndex);
                    curIndex = nextIndex;
                }
            }
            var trueFn = function() {
                return !0;
            };
            items && !angular.isArray(items) && (items = Array.prototype.slice.call(items));
            reloop = !!reloop;
            var _items = items || [];
            return {
                items: getItems,
                count: count,
                inRange: inRange,
                contains: contains,
                indexOf: indexOf,
                itemAt: itemAt,
                findBy: findBy,
                add: add,
                remove: remove,
                first: first,
                last: last,
                next: angular.bind(null, findSubsequentItem, !1),
                previous: angular.bind(null, findSubsequentItem, !0),
                hasPrevious: hasPrevious,
                hasNext: hasNext
            };
        }
        angular.module("material.core").config([ "$provide", function($provide) {
            $provide.decorator("$mdUtil", [ "$delegate", function($delegate) {
                $delegate.iterator = MdIterator;
                return $delegate;
            } ]);
        } ]);
    }();
    !function() {
        function mdMediaFactory($mdConstant, $rootScope, $window) {
            function $mdMedia(query) {
                var validated = queries[query];
                angular.isUndefined(validated) && (validated = queries[query] = validate(query));
                var result = results[validated];
                angular.isUndefined(result) && (result = add(validated));
                return result;
            }
            function validate(query) {
                return $mdConstant.MEDIA[query] || ("(" !== query.charAt(0) ? "(" + query + ")" : query);
            }
            function add(query) {
                var result = mqls[query];
                result || (result = mqls[query] = $window.matchMedia(query));
                result.addListener(onQueryChange);
                return results[result.media] = !!result.matches;
            }
            function onQueryChange(query) {
                $rootScope.$evalAsync(function() {
                    results[query.media] = !!query.matches;
                });
            }
            function getQuery(name) {
                return mqls[name];
            }
            function getResponsiveAttribute(attrs, attrName) {
                for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
                    var mediaName = $mdConstant.MEDIA_PRIORITY[i];
                    if (mqls[queries[mediaName]].matches) {
                        var normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        if (attrs[normalizedName]) return attrs[normalizedName];
                    }
                }
                return attrs[getNormalizedName(attrs, attrName)];
            }
            function watchResponsiveAttributes(attrNames, attrs, watchFn) {
                var unwatchFns = [];
                attrNames.forEach(function(attrName) {
                    var normalizedName = getNormalizedName(attrs, attrName);
                    angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
                    for (var mediaName in $mdConstant.MEDIA) {
                        normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
                    }
                });
                return function() {
                    unwatchFns.forEach(function(fn) {
                        fn();
                    });
                };
            }
            function getNormalizedName(attrs, attrName) {
                return normalizeCache[attrName] || (normalizeCache[attrName] = attrs.$normalize(attrName));
            }
            var queries = {}, mqls = {}, results = {}, normalizeCache = {};
            $mdMedia.getResponsiveAttribute = getResponsiveAttribute;
            $mdMedia.getQuery = getQuery;
            $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;
            return $mdMedia;
        }
        angular.module("material.core").factory("$mdMedia", mdMediaFactory);
        mdMediaFactory.$inject = [ "$mdConstant", "$rootScope", "$window" ];
    }();
    !function() {
        function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log, $rootElement, $window) {
            function getNode(el) {
                return el[0] || el;
            }
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), usesStandardSymbols = "{{" === startSymbol && "}}" === endSymbol, hasComputedStyle = function(target, key, expectedVal) {
                var hasValue = !1;
                if (target && target.length) {
                    var computedStyles = $window.getComputedStyle(target[0]);
                    hasValue = angular.isDefined(computedStyles[key]) && (!expectedVal || computedStyles[key] == expectedVal);
                }
                return hasValue;
            }, $mdUtil = {
                dom: {},
                now: window.performance ? angular.bind(window.performance, window.performance.now) : Date.now || function() {
                    return new Date().getTime();
                },
                clientRect: function(element, offsetParent, isOffsetRect) {
                    var node = getNode(element);
                    offsetParent = getNode(offsetParent || node.offsetParent || document.body);
                    var nodeRect = node.getBoundingClientRect(), offsetRect = isOffsetRect ? offsetParent.getBoundingClientRect() : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                    return {
                        left: nodeRect.left - offsetRect.left,
                        top: nodeRect.top - offsetRect.top,
                        width: nodeRect.width,
                        height: nodeRect.height
                    };
                },
                offsetRect: function(element, offsetParent) {
                    return $mdUtil.clientRect(element, offsetParent, !0);
                },
                nodesToArray: function(nodes) {
                    nodes = nodes || [];
                    for (var results = [], i = 0; i < nodes.length; ++i) results.push(nodes.item(i));
                    return results;
                },
                scrollTop: function(element) {
                    element = angular.element(element || $document[0].body);
                    var body = element[0] == $document[0].body ? $document[0].body : undefined;
                    return (body ? body.scrollTop + body.parentElement.scrollTop : 0) || Math.abs(element[0].getBoundingClientRect().top);
                },
                findFocusTarget: function(containerEl, attributeVal) {
                    function scanForFocusable(target, selector) {
                        var elFound, items = target[0].querySelectorAll(selector);
                        if (items && items.length) {
                            var EXP_ATTR = /\s*\[?([\-a-z]*)\]?\s*/i, matches = EXP_ATTR.exec(selector), attribute = matches ? matches[1] : null;
                            items.length && angular.forEach(items, function(it) {
                                it = angular.element(it);
                                var focusExpression = it[0].getAttribute(attribute);
                                (!focusExpression || !$mdUtil.validateScope(it) || !1 !== it.scope().$eval(focusExpression)) && (elFound = it);
                            });
                        }
                        return elFound;
                    }
                    var elToFocus;
                    elToFocus = scanForFocusable(containerEl, attributeVal || "[md-autofocus]");
                    if (!elToFocus && "[md-autofocus]" != attributeVal) {
                        elToFocus = scanForFocusable(containerEl, "[md-auto-focus]");
                        elToFocus || (elToFocus = scanForFocusable(containerEl, "[md-autofocus]"));
                    }
                    return elToFocus;
                },
                disableScrollAround: function(element, parent) {
                    function applyStyles(el, styles) {
                        for (var key in styles) el.style[key] = styles[key];
                    }
                    $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;
                    ++$mdUtil.disableScrollAround._count;
                    if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;
                    element = angular.element(element);
                    var body = $document[0].body, restoreBody = function() {
                        var htmlNode = body.parentNode, restoreHtmlStyle = htmlNode.getAttribute("style") || "", restoreBodyStyle = body.getAttribute("style") || "", scrollOffset = $mdUtil.scrollTop(body), clientWidth = body.clientWidth;
                        if (body.scrollHeight > body.clientHeight + 1) {
                            applyStyles(body, {
                                position: "fixed",
                                width: "100%",
                                top: -scrollOffset + "px"
                            });
                            applyStyles(htmlNode, {
                                overflowY: "scroll"
                            });
                        }
                        body.clientWidth < clientWidth && applyStyles(body, {
                            overflow: "hidden"
                        });
                        return function() {
                            body.setAttribute("style", restoreBodyStyle);
                            htmlNode.setAttribute("style", restoreHtmlStyle);
                            body.scrollTop = scrollOffset;
                            htmlNode.scrollTop = scrollOffset;
                        };
                    }(), restoreElement = function(element) {
                        function disableKeyNav(e) {}
                        function preventDefault(e) {
                            e.preventDefault();
                        }
                        element = angular.element(element || body)[0];
                        var scrollMask = angular.element('<div class="md-scroll-mask" style="z-index: 50">  <div class="md-scroll-mask-bar"></div></div>');
                        element.appendChild(scrollMask[0]);
                        scrollMask.on("wheel", preventDefault);
                        scrollMask.on("touchmove", preventDefault);
                        $document.on("keydown", disableKeyNav);
                        return function() {
                            scrollMask.off("wheel");
                            scrollMask.off("touchmove");
                            scrollMask[0].parentNode.removeChild(scrollMask[0]);
                            $document.off("keydown", disableKeyNav);
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        };
                    }(parent);
                    return $mdUtil.disableScrollAround._enableScrolling = function() {
                        if (!--$mdUtil.disableScrollAround._count) {
                            restoreBody();
                            restoreElement();
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        }
                    };
                },
                enableScrolling: function() {
                    var method = this.disableScrollAround._enableScrolling;
                    method && method();
                },
                floatingScrollbars: function() {
                    if (this.floatingScrollbars.cached === undefined) {
                        var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60px;"></div></div>');
                        $document[0].body.appendChild(tempNode[0]);
                        this.floatingScrollbars.cached = tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth;
                        tempNode.remove();
                    }
                    return this.floatingScrollbars.cached;
                },
                forceFocus: function(element) {
                    var node = element[0] || element;
                    document.addEventListener("click", function focusOnClick(ev) {
                        if (ev.target === node && ev.$focus) {
                            node.focus();
                            ev.stopImmediatePropagation();
                            ev.preventDefault();
                            node.removeEventListener("click", focusOnClick);
                        }
                    }, !0);
                    var newEvent = document.createEvent("MouseEvents");
                    newEvent.initMouseEvent("click", !1, !0, window, {}, 0, 0, 0, 0, !1, !1, !1, !1, 0, null);
                    newEvent.$material = !0;
                    newEvent.$focus = !0;
                    node.dispatchEvent(newEvent);
                },
                createBackdrop: function(scope, addClass) {
                    return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [ addClass ]))(scope);
                },
                supplant: function(template, values, pattern) {
                    pattern = pattern || /\{([^\{\}]*)\}/g;
                    return template.replace(pattern, function(a, b) {
                        var p = b.split("."), r = values;
                        try {
                            for (var s in p) p.hasOwnProperty(s) && (r = r[p[s]]);
                        } catch (e) {
                            r = a;
                        }
                        return "string" == typeof r || "number" == typeof r ? r : a;
                    });
                },
                fakeNgModel: function() {
                    return {
                        $fake: !0,
                        $setTouched: angular.noop,
                        $setViewValue: function(value) {
                            this.$viewValue = value;
                            this.$render(value);
                            this.$viewChangeListeners.forEach(function(cb) {
                                cb();
                            });
                        },
                        $isEmpty: function(value) {
                            return 0 === ("" + value).length;
                        },
                        $parsers: [],
                        $formatters: [],
                        $viewChangeListeners: [],
                        $render: angular.noop
                    };
                },
                debounce: function(func, wait, scope, invokeApply) {
                    var timer;
                    return function() {
                        var context = scope, args = Array.prototype.slice.call(arguments);
                        $timeout.cancel(timer);
                        timer = $timeout(function() {
                            timer = undefined;
                            func.apply(context, args);
                        }, wait || 10, invokeApply);
                    };
                },
                throttle: function(func, delay) {
                    var recent;
                    return function() {
                        var context = this, args = arguments, now = $mdUtil.now();
                        if (!recent || now - recent > delay) {
                            func.apply(context, args);
                            recent = now;
                        }
                    };
                },
                time: function(cb) {
                    var start = $mdUtil.now();
                    cb();
                    return $mdUtil.now() - start;
                },
                valueOnUse: function(scope, key, getter) {
                    var value = null, args = Array.prototype.slice.call(arguments), params = args.length > 3 ? args.slice(3) : [];
                    Object.defineProperty(scope, key, {
                        get: function() {
                            null === value && (value = getter.apply(scope, params));
                            return value;
                        }
                    });
                },
                nextUid: function() {
                    return "" + nextUniqueId++;
                },
                validateScope: function(element) {
                    var hasScope = element && angular.isDefined(element.scope());
                    hasScope || $log.warn("element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!");
                    return hasScope;
                },
                disconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && !scope.$$destroyed) {
                        var parent = scope.$parent;
                        scope.$$disconnected = !0;
                        parent.$$childHead === scope && (parent.$$childHead = scope.$$nextSibling);
                        parent.$$childTail === scope && (parent.$$childTail = scope.$$prevSibling);
                        scope.$$prevSibling && (scope.$$prevSibling.$$nextSibling = scope.$$nextSibling);
                        scope.$$nextSibling && (scope.$$nextSibling.$$prevSibling = scope.$$prevSibling);
                        scope.$$nextSibling = scope.$$prevSibling = null;
                    }
                },
                reconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && scope.$$disconnected) {
                        var child = scope, parent = child.$parent;
                        child.$$disconnected = !1;
                        child.$$prevSibling = parent.$$childTail;
                        if (parent.$$childHead) {
                            parent.$$childTail.$$nextSibling = child;
                            parent.$$childTail = child;
                        } else parent.$$childHead = parent.$$childTail = child;
                    }
                },
                getClosest: function(el, tagName, onlyParent) {
                    el instanceof angular.element && (el = el[0]);
                    tagName = tagName.toUpperCase();
                    onlyParent && (el = el.parentNode);
                    if (!el) return null;
                    do {
                        if (el.nodeName === tagName) return el;
                    } while (el = el.parentNode);
                    return null;
                },
                elementContains: function(node, child) {
                    return (window.Node && window.Node.prototype && Node.prototype.contains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {
                        return node === child || !!(16 & this.compareDocumentPosition(arg));
                    }))(child);
                },
                extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {
                    function scanTree(element) {
                        return scanLevel(element) || (scanDeep ? scanChildren(element) : null);
                    }
                    function scanLevel(element) {
                        if (element) for (var i = 0, len = element.length; i < len; i++) if (element[i].nodeName.toLowerCase() === nodeName) return element[i];
                        return null;
                    }
                    function scanChildren(element) {
                        var found;
                        if (element) for (var i = 0, len = element.length; i < len; i++) {
                            var target = element[i];
                            if (!found) for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) found = found || scanTree([ target.childNodes[j] ]);
                        }
                        return found;
                    }
                    var found = scanTree(element);
                    !found && warnNotFound && $log.warn($mdUtil.supplant("Unable to find node '{0}' in element '{1}'.", [ nodeName, element[0].outerHTML ]));
                    return angular.element(found || element);
                },
                initOptionalProperties: function(scope, attr, defaults) {
                    defaults = defaults || {};
                    angular.forEach(scope.$$isolateBindings, function(binding, key) {
                        if (binding.optional && angular.isUndefined(scope[key])) {
                            var attrIsDefined = angular.isDefined(attr[binding.attrName]);
                            scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;
                        }
                    });
                },
                nextTick: function(callback, digest, scope) {
                    function processQueue() {
                        var skip = scope && scope.$$destroyed, queue = skip ? [] : nextTick.queue, digest = skip ? null : nextTick.digest;
                        nextTick.queue = [];
                        nextTick.timeout = null;
                        nextTick.digest = !1;
                        queue.forEach(function(callback) {
                            callback();
                        });
                        digest && $rootScope.$digest();
                    }
                    var nextTick = $mdUtil.nextTick, timeout = nextTick.timeout, queue = nextTick.queue || [];
                    queue.push(callback);
                    null == digest && (digest = !0);
                    nextTick.digest = nextTick.digest || digest;
                    nextTick.queue = queue;
                    return timeout || (nextTick.timeout = $timeout(processQueue, 0, !1));
                },
                processTemplate: function(template) {
                    return usesStandardSymbols ? template : template && angular.isString(template) ? template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol) : template;
                },
                getParentWithPointerEvents: function(element) {
                    for (var parent = element.parent(); hasComputedStyle(parent, "pointer-events", "none"); ) parent = parent.parent();
                    return parent;
                },
                getNearestContentElement: function(element) {
                    for (var current = element.parent()[0]; current && current !== $rootElement[0] && current !== document.body && "MD-CONTENT" !== current.nodeName.toUpperCase(); ) current = current.parentNode;
                    return current;
                },
                hasComputedStyle: hasComputedStyle
            };
            $mdUtil.dom.animator = $$mdAnimate($mdUtil);
            return $mdUtil;
        }
        var nextUniqueId = 0;
        angular.module("material.core").factory("$mdUtil", UtilFactory);
        UtilFactory.$inject = [ "$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log", "$rootElement", "$window" ];
        angular.element.prototype.focus = angular.element.prototype.focus || function() {
            this.length && this[0].focus();
            return this;
        };
        angular.element.prototype.blur = angular.element.prototype.blur || function() {
            this.length && this[0].blur();
            return this;
        };
    }();
    !function() {
        function AriaService($$rAF, $log, $window) {
            function expect(element, attrName, defaultValue) {
                var node = angular.element(element)[0] || element;
                if (node && (!node.hasAttribute(attrName) || 0 === node.getAttribute(attrName).length) && !childHasAttribute(node, attrName)) {
                    defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : "";
                    defaultValue.length ? element.attr(attrName, defaultValue) : $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);
                }
            }
            function expectAsync(element, attrName, defaultValueGetter) {
                $$rAF(function() {
                    expect(element, attrName, defaultValueGetter());
                });
            }
            function expectWithText(element, attrName) {
                expectAsync(element, attrName, function() {
                    return getText(element);
                });
            }
            function getText(element) {
                return element.text().trim();
            }
            function childHasAttribute(node, attrName) {
                var hasChildren = node.hasChildNodes(), hasAttr = !1;
                if (hasChildren) for (var children = node.childNodes, i = 0; i < children.length; i++) {
                    var child = children[i];
                    1 === child.nodeType && child.hasAttribute(attrName) && (function(el) {
                        return "none" === (el.currentStyle ? el.currentStyle : $window.getComputedStyle(el)).display;
                    }(child) || (hasAttr = !0));
                }
                return hasAttr;
            }
            return {
                expect: expect,
                expectAsync: expectAsync,
                expectWithText: expectWithText
            };
        }
        angular.module("material.core").service("$mdAria", AriaService);
        AriaService.$inject = [ "$$rAF", "$log", "$window" ];
    }();
    !function() {
        function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
            this.compile = function(options) {
                var templateUrl = options.templateUrl, template = options.template || "", controller = options.controller, controllerAs = options.controllerAs, resolve = angular.extend({}, options.resolve || {}), locals = angular.extend({}, options.locals || {}), transformTemplate = options.transformTemplate || angular.identity, bindToController = options.bindToController;
                angular.forEach(resolve, function(value, key) {
                    angular.isString(value) ? resolve[key] = $injector.get(value) : resolve[key] = $injector.invoke(value);
                });
                angular.extend(resolve, locals);
                resolve.$template = templateUrl ? $http.get(templateUrl, {
                    cache: $templateCache
                }).then(function(response) {
                    return response.data;
                }) : $q.when(template);
                return $q.all(resolve).then(function(locals) {
                    var compiledData, template = transformTemplate(locals.$template, options), element = options.element || angular.element("<div>").html(template.trim()).contents(), linkFn = $compile(element);
                    return compiledData = {
                        locals: locals,
                        element: element,
                        link: function(scope) {
                            locals.$scope = scope;
                            if (controller) {
                                var invokeCtrl = $controller(controller, locals, !0);
                                bindToController && angular.extend(invokeCtrl.instance, locals);
                                var ctrl = invokeCtrl();
                                element.data("$ngControllerController", ctrl);
                                element.children().data("$ngControllerController", ctrl);
                                controllerAs && (scope[controllerAs] = ctrl);
                                compiledData.controller = ctrl;
                            }
                            return linkFn(scope);
                        }
                    };
                });
            };
        }
        angular.module("material.core").service("$mdCompiler", mdCompilerService);
        mdCompilerService.$inject = [ "$q", "$http", "$injector", "$compile", "$controller", "$templateCache" ];
    }();
    !function() {
        function MdGestureProvider() {}
        function MdGesture($$MdGestureHandler, $$rAF, $timeout) {
            function checkDistanceAndEmit(eventName) {
                return function(ev, pointer) {
                    pointer.distance < this.state.options.maxDistance && this.dispatchEvent(ev, eventName, pointer);
                };
            }
            function register(element, handlerName, options) {
                var handler = HANDLERS[handlerName.replace(/^\$md./, "")];
                if (!handler) throw new Error("Failed to register element with handler " + handlerName + ". Available handlers: " + Object.keys(HANDLERS).join(", "));
                return handler.registerElement(element, options);
            }
            function addHandler(name, definition) {
                var handler = new $$MdGestureHandler(name);
                angular.extend(handler, definition);
                HANDLERS[name] = handler;
                return self;
            }
            var userAgent = navigator.userAgent || navigator.vendor || window.opera, isIos = userAgent.match(/ipad|iphone|ipod/i), isAndroid = userAgent.match(/android/i), hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery, self = {
                handler: addHandler,
                register: register,
                isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack
            };
            if (self.isHijackingClicks) {
                self.handler("click", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("click")
                });
                self.handler("focus", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: function(ev, pointer) {
                        if (pointer.distance < this.state.options.maxDistance && function(element) {
                            var focusableElements = [ "INPUT", "SELECT", "BUTTON", "TEXTAREA", "VIDEO", "AUDIO" ];
                            return "-1" != element.getAttribute("tabindex") && !element.hasAttribute("DISABLED") && (element.hasAttribute("tabindex") || element.hasAttribute("href") || -1 != focusableElements.indexOf(element.nodeName));
                        }(ev.target)) {
                            this.dispatchEvent(ev, "focus", pointer);
                            ev.target.focus();
                        }
                    }
                });
                self.handler("mouseup", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("mouseup")
                });
                self.handler("mousedown", {
                    onStart: function(ev) {
                        this.dispatchEvent(ev, "mousedown");
                    }
                });
            }
            return self.handler("press", {
                onStart: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressdown");
                },
                onEnd: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressup");
                }
            }).handler("hold", {
                options: {
                    maxDistance: 6,
                    delay: 500
                },
                onCancel: function() {
                    $timeout.cancel(this.state.timeout);
                },
                onStart: function(ev, pointer) {
                    if (!this.state.registeredParent) return this.cancel();
                    this.state.pos = {
                        x: pointer.x,
                        y: pointer.y
                    };
                    this.state.timeout = $timeout(angular.bind(this, function() {
                        this.dispatchEvent(ev, "$md.hold");
                        this.cancel();
                    }), this.state.options.delay, !1);
                },
                onMove: function(ev, pointer) {
                    ev.preventDefault();
                    var dx = this.state.pos.x - pointer.x, dy = this.state.pos.y - pointer.y;
                    Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance && this.cancel();
                },
                onEnd: function() {
                    this.onCancel();
                }
            }).handler("drag", {
                options: {
                    minDistance: 6,
                    horizontal: !0,
                    cancelMultiplier: 1.5
                },
                onStart: function(ev) {
                    this.state.registeredParent || this.cancel();
                },
                onMove: function(ev, pointer) {
                    var shouldStartDrag, shouldCancel;
                    ev.preventDefault();
                    if (this.state.dragPointer) this.dispatchDragMove(ev); else {
                        if (this.state.options.horizontal) {
                            shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        } else {
                            shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        }
                        if (shouldStartDrag) {
                            this.state.dragPointer = makeStartPointer(ev);
                            updatePointerState(ev, this.state.dragPointer);
                            this.dispatchEvent(ev, "$md.dragstart", this.state.dragPointer);
                        } else shouldCancel && this.cancel();
                    }
                },
                dispatchDragMove: $$rAF.throttle(function(ev) {
                    if (this.state.isRunning) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.drag", this.state.dragPointer);
                    }
                }),
                onEnd: function(ev, pointer) {
                    if (this.state.dragPointer) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.dragend", this.state.dragPointer);
                    }
                }
            }).handler("swipe", {
                options: {
                    minVelocity: .65,
                    minDistance: 10
                },
                onEnd: function(ev, pointer) {
                    var eventType;
                    if (Math.abs(pointer.velocityX) > this.state.options.minVelocity && Math.abs(pointer.distanceX) > this.state.options.minDistance) {
                        eventType = "left" == pointer.directionX ? "$md.swipeleft" : "$md.swiperight";
                        this.dispatchEvent(ev, eventType);
                    } else if (Math.abs(pointer.velocityY) > this.state.options.minVelocity && Math.abs(pointer.distanceY) > this.state.options.minDistance) {
                        eventType = "up" == pointer.directionY ? "$md.swipeup" : "$md.swipedown";
                        this.dispatchEvent(ev, eventType);
                    }
                }
            });
        }
        function GestureHandler(name) {
            this.name = name;
            this.state = {};
        }
        function MdGestureHandler() {
            function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj = new angular.element.Event(eventType);
                eventObj.$material = !0;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;
                angular.extend(eventObj, {
                    clientX: eventPointer.x,
                    clientY: eventPointer.y,
                    screenX: eventPointer.x,
                    screenY: eventPointer.y,
                    pageX: eventPointer.x,
                    pageY: eventPointer.y,
                    ctrlKey: srcEvent.ctrlKey,
                    altKey: srcEvent.altKey,
                    shiftKey: srcEvent.shiftKey,
                    metaKey: srcEvent.metaKey
                });
                angular.element(eventPointer.target).trigger(eventObj);
            }
            function nativeDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj;
                if ("click" === eventType || "mouseup" == eventType || "mousedown" == eventType) {
                    eventObj = document.createEvent("MouseEvents");
                    eventObj.initMouseEvent(eventType, !0, !0, window, srcEvent.detail, eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y, srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey, srcEvent.button, srcEvent.relatedTarget || null);
                } else {
                    eventObj = document.createEvent("CustomEvent");
                    eventObj.initCustomEvent(eventType, !0, !0, {});
                }
                eventObj.$material = !0;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;
                eventPointer.target.dispatchEvent(eventObj);
            }
            var hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery;
            GestureHandler.prototype = {
                options: {},
                dispatchEvent: hasJQuery ? jQueryDispatchEvent : nativeDispatchEvent,
                onStart: angular.noop,
                onMove: angular.noop,
                onEnd: angular.noop,
                onCancel: angular.noop,
                start: function(ev, pointer) {
                    if (!this.state.isRunning) {
                        var parentTarget = this.getNearestParent(ev.target), parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};
                        this.state = {
                            isRunning: !0,
                            options: angular.extend({}, this.options, parentTargetOptions),
                            registeredParent: parentTarget
                        };
                        this.onStart(ev, pointer);
                    }
                },
                move: function(ev, pointer) {
                    this.state.isRunning && this.onMove(ev, pointer);
                },
                end: function(ev, pointer) {
                    if (this.state.isRunning) {
                        this.onEnd(ev, pointer);
                        this.state.isRunning = !1;
                    }
                },
                cancel: function(ev, pointer) {
                    this.onCancel(ev, pointer);
                    this.state = {};
                },
                getNearestParent: function(node) {
                    for (var current = node; current; ) {
                        if ((current.$mdGesture || {})[this.name]) return current;
                        current = current.parentNode;
                    }
                    return null;
                },
                registerElement: function(element, options) {
                    function onDestroy() {
                        delete element[0].$mdGesture[self.name];
                        element.off("$destroy", onDestroy);
                    }
                    var self = this;
                    element[0].$mdGesture = element[0].$mdGesture || {};
                    element[0].$mdGesture[this.name] = options || {};
                    element.on("$destroy", onDestroy);
                    return onDestroy;
                }
            };
            return GestureHandler;
        }
        function attachToDocument($mdGesture, $$MdGestureHandler) {
            function mouseInputHijacker(ev) {
                if (!(!ev.clientX && !ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev))) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
            function clickHijacker(ev) {
                if (0 === ev.clientX && 0 === ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev)) {
                    lastLabelClickPos = null;
                    "label" == ev.target.tagName.toLowerCase() && (lastLabelClickPos = {
                        x: ev.x,
                        y: ev.y
                    });
                } else {
                    ev.preventDefault();
                    ev.stopPropagation();
                    lastLabelClickPos = null;
                }
            }
            function runHandlers(handlerEvent, event) {
                var handler;
                for (var name in HANDLERS) {
                    handler = HANDLERS[name];
                    if (handler instanceof $$MdGestureHandler) {
                        "start" === handlerEvent && handler.cancel();
                        handler[handlerEvent](event, pointer);
                    }
                }
            }
            function gestureStart(ev) {
                if (!pointer) {
                    var now = +Date.now();
                    if (!(lastPointer && !typesMatch(ev, lastPointer) && now - lastPointer.endTime < 1500)) {
                        pointer = makeStartPointer(ev);
                        runHandlers("start", ev);
                    }
                }
            }
            function gestureMove(ev) {
                if (pointer && typesMatch(ev, pointer)) {
                    updatePointerState(ev, pointer);
                    runHandlers("move", ev);
                }
            }
            function gestureEnd(ev) {
                if (pointer && typesMatch(ev, pointer)) {
                    updatePointerState(ev, pointer);
                    pointer.endTime = +Date.now();
                    runHandlers("end", ev);
                    lastPointer = pointer;
                    pointer = null;
                }
            }
            document.contains || (document.contains = function(node) {
                return document.body.contains(node);
            });
            if (!isInitialized && $mdGesture.isHijackingClicks) {
                document.addEventListener("click", clickHijacker, !0);
                document.addEventListener("mouseup", mouseInputHijacker, !0);
                document.addEventListener("mousedown", mouseInputHijacker, !0);
                document.addEventListener("focus", mouseInputHijacker, !0);
                isInitialized = !0;
            }
            angular.element(document).on("mousedown touchstart pointerdown", gestureStart).on("mousemove touchmove pointermove", gestureMove).on("mouseup mouseleave touchend touchcancel pointerup pointercancel", gestureEnd).on("$$mdGestureReset", function() {
                lastPointer = pointer = null;
            });
        }
        function makeStartPointer(ev) {
            var point = getEventPoint(ev), startPointer = {
                startTime: +Date.now(),
                target: ev.target,
                type: ev.type.charAt(0)
            };
            startPointer.startX = startPointer.x = point.pageX;
            startPointer.startY = startPointer.y = point.pageY;
            return startPointer;
        }
        function typesMatch(ev, pointer) {
            return ev && pointer && ev.type.charAt(0) === pointer.type;
        }
        function isInputEventFromLabelClick(event) {
            return lastLabelClickPos && lastLabelClickPos.x == event.x && lastLabelClickPos.y == event.y;
        }
        function updatePointerState(ev, pointer) {
            var point = getEventPoint(ev), x = pointer.x = point.pageX, y = pointer.y = point.pageY;
            pointer.distanceX = x - pointer.startX;
            pointer.distanceY = y - pointer.startY;
            pointer.distance = Math.sqrt(pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY);
            pointer.directionX = pointer.distanceX > 0 ? "right" : pointer.distanceX < 0 ? "left" : "";
            pointer.directionY = pointer.distanceY > 0 ? "down" : pointer.distanceY < 0 ? "up" : "";
            pointer.duration = +Date.now() - pointer.startTime;
            pointer.velocityX = pointer.distanceX / pointer.duration;
            pointer.velocityY = pointer.distanceY / pointer.duration;
        }
        function getEventPoint(ev) {
            ev = ev.originalEvent || ev;
            return ev.touches && ev.touches[0] || ev.changedTouches && ev.changedTouches[0] || ev;
        }
        var pointer, lastPointer, HANDLERS = {}, forceSkipClickHijack = !1, lastLabelClickPos = null, isInitialized = !1;
        angular.module("material.core.gestures", []).provider("$mdGesture", MdGestureProvider).factory("$$MdGestureHandler", MdGestureHandler).run(attachToDocument);
        MdGestureProvider.prototype = {
            skipClickHijack: function() {
                return forceSkipClickHijack = !0;
            },
            $get: [ "$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {
                return new MdGesture($$MdGestureHandler, $$rAF, $timeout);
            } ]
        };
        MdGesture.$inject = [ "$$MdGestureHandler", "$$rAF", "$timeout" ];
        attachToDocument.$inject = [ "$mdGesture", "$$MdGestureHandler" ];
    }();
    !function() {
        function InterimElementProvider() {
            function createInterimElementProvider(interimFactoryName) {
                function setDefaults(definition) {
                    providerConfig.optionsFactory = definition.options;
                    providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
                    return provider;
                }
                function addMethod(name, fn) {
                    customMethods[name] = fn;
                    return provider;
                }
                function addPreset(name, definition) {
                    definition = definition || {};
                    definition.methods = definition.methods || [];
                    definition.options = definition.options || function() {
                        return {};
                    };
                    if (/^cancel|hide|show$/.test(name)) throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");
                    if (definition.methods.indexOf("_options") > -1) throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");
                    providerConfig.presets[name] = {
                        methods: definition.methods.concat(EXPOSED_METHODS),
                        optionsFactory: definition.options,
                        argOption: definition.argOption
                    };
                    return provider;
                }
                function factory($$interimElement, $injector) {
                    function showInterimElement(opts) {
                        opts = opts || {};
                        opts._options && (opts = opts._options);
                        return interimElementService.show(angular.extend({}, defaultOptions, opts));
                    }
                    function destroyInterimElement(opts) {
                        return interimElementService.destroy(opts);
                    }
                    function invokeFactory(factory, defaultVal) {
                        var locals = {};
                        locals[interimFactoryName] = publicService;
                        return $injector.invoke(factory || function() {
                            return defaultVal;
                        }, {}, locals);
                    }
                    var defaultMethods, defaultOptions, interimElementService = $$interimElement(), publicService = {
                        hide: interimElementService.hide,
                        cancel: interimElementService.cancel,
                        show: showInterimElement,
                        destroy: destroyInterimElement
                    };
                    defaultMethods = providerConfig.methods || [];
                    defaultOptions = invokeFactory(providerConfig.optionsFactory, {});
                    angular.forEach(customMethods, function(fn, name) {
                        publicService[name] = fn;
                    });
                    angular.forEach(providerConfig.presets, function(definition, name) {
                        function Preset(opts) {
                            this._options = angular.extend({}, presetDefaults, opts);
                        }
                        var presetDefaults = invokeFactory(definition.optionsFactory, {}), presetMethods = (definition.methods || []).concat(defaultMethods);
                        angular.extend(presetDefaults, {
                            $type: name
                        });
                        angular.forEach(presetMethods, function(name) {
                            Preset.prototype[name] = function(value) {
                                this._options[name] = value;
                                return this;
                            };
                        });
                        if (definition.argOption) {
                            var methodName = "show" + name.charAt(0).toUpperCase() + name.slice(1);
                            publicService[methodName] = function(arg) {
                                var config = publicService[name](arg);
                                return publicService.show(config);
                            };
                        }
                        publicService[name] = function(arg) {
                            return arguments.length && definition.argOption && !angular.isObject(arg) && !angular.isArray(arg) ? new Preset()[definition.argOption](arg) : new Preset(arg);
                        };
                    });
                    return publicService;
                }
                var EXPOSED_METHODS = [ "onHide", "onShow", "onRemove" ], customMethods = {}, providerConfig = {
                    presets: {}
                }, provider = {
                    setDefaults: setDefaults,
                    addPreset: addPreset,
                    addMethod: addMethod,
                    $get: factory
                };
                provider.addPreset("build", {
                    methods: [ "controller", "controllerAs", "resolve", "template", "templateUrl", "themable", "transformTemplate", "parent" ]
                });
                factory.$inject = [ "$$interimElement", "$injector" ];
                return provider;
            }
            function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate, $mdUtil, $mdCompiler, $mdTheming, $injector) {
                return function() {
                    function show(options) {
                        options = options || {};
                        var interimElement = new InterimElement(options || {});
                        (!options.skipHide && stack.length ? service.hide() : $q.when(!0)).finally(function() {
                            stack.push(interimElement);
                            interimElement.show().catch(function(reason) {
                                return reason;
                            });
                        });
                        return interimElement.deferred.promise;
                    }
                    function hide(reason, options) {
                        function closeElement(interim) {
                            interim.remove(reason, !1, options || {}).catch(function(reason) {
                                return reason;
                            });
                            return interim.deferred.promise;
                        }
                        if (!stack.length) return $q.when(reason);
                        options = options || {};
                        if (options.closeAll) {
                            var promise = $q.all(stack.reverse().map(closeElement));
                            stack = [];
                            return promise;
                        }
                        return options.closeTo !== undefined ? $q.all(stack.splice(options.closeTo).map(closeElement)) : closeElement(stack.pop());
                    }
                    function cancel(reason, options) {
                        var interim = stack.shift();
                        if (!interim) return $q.when(reason);
                        interim.remove(reason, !0, options || {}).catch(function(reason) {
                            return reason;
                        });
                        return interim.deferred.promise;
                    }
                    function destroy(target) {
                        var interim = target ? null : stack.shift(), cntr = angular.element(target).length ? angular.element(target)[0].parentNode : null;
                        if (cntr) {
                            var filtered = stack.filter(function(entry) {
                                return entry.options.element[0] === cntr;
                            });
                            if (filtered.length > 0) {
                                interim = filtered[0];
                                stack.splice(stack.indexOf(interim), 1);
                            }
                        }
                        return interim ? interim.remove(SHOW_CANCELLED, !1, {
                            $destroy: !0
                        }) : $q.when(SHOW_CANCELLED);
                    }
                    function InterimElement(options) {
                        function createAndTransitionIn() {
                            return $q(function(resolve, reject) {
                                function rejectAll(fault) {
                                    self.deferred.reject(fault);
                                    reject(fault);
                                }
                                compileElement(options).then(function(compiledData) {
                                    element = linkElement(compiledData, options);
                                    showAction = showElement(element, options, compiledData.controller).then(resolve, rejectAll);
                                }, rejectAll);
                            });
                        }
                        function transitionOutAndRemove(response, isCancelled, opts) {
                            function resolveAll(response) {
                                self.deferred.resolve(response);
                            }
                            function rejectAll(fault) {
                                self.deferred.reject(fault);
                            }
                            if (!element) return $q.when(!1);
                            options = angular.extend(options || {}, opts || {});
                            options.cancelAutoHide && options.cancelAutoHide();
                            options.element.triggerHandler("$mdInterimElementRemove");
                            if (!0 === options.$destroy) return hideElement(options.element, options).then(function() {
                                isCancelled && rejectAll(response) || resolveAll(response);
                            });
                            $q.when(showAction).finally(function() {
                                hideElement(options.element, options).then(function() {
                                    isCancelled && rejectAll(response) || resolveAll(response);
                                }, rejectAll);
                            });
                            return self.deferred.promise;
                        }
                        function compileElement(options) {
                            return (options.skipCompile ? null : $mdCompiler.compile(options)) || $q(function(resolve) {
                                resolve({
                                    locals: {},
                                    link: function() {
                                        return options.element;
                                    }
                                });
                            });
                        }
                        function linkElement(compileData, options) {
                            angular.extend(compileData.locals, options);
                            var element = compileData.link(options.scope);
                            options.element = element;
                            options.parent = findParent(element, options);
                            options.themable && $mdTheming(element);
                            return element;
                        }
                        function findParent(element, options) {
                            var parent = options.parent;
                            parent = angular.isFunction(parent) ? parent(options.scope, element, options) : angular.isString(parent) ? angular.element($document[0].querySelector(parent)) : angular.element(parent);
                            if (!(parent || {}).length) {
                                var el;
                                $rootElement[0] && $rootElement[0].querySelector && (el = $rootElement[0].querySelector(":not(svg) > body"));
                                el || (el = $rootElement[0]);
                                "#comment" == el.nodeName && (el = $document[0].body);
                                return angular.element(el);
                            }
                            return parent;
                        }
                        function startAutoHide() {
                            var autoHideTimer, cancelAutoHide = angular.noop;
                            if (options.hideDelay) {
                                autoHideTimer = $timeout(service.hide, options.hideDelay);
                                cancelAutoHide = function() {
                                    $timeout.cancel(autoHideTimer);
                                };
                            }
                            options.cancelAutoHide = function() {
                                cancelAutoHide();
                                options.cancelAutoHide = undefined;
                            };
                        }
                        function showElement(element, options, controller) {
                            var notifyShowing = options.onShowing || angular.noop, notifyComplete = options.onComplete || angular.noop;
                            notifyShowing(options.scope, element, options, controller);
                            return $q(function(resolve, reject) {
                                try {
                                    $q.when(options.onShow(options.scope, element, options, controller)).then(function() {
                                        notifyComplete(options.scope, element, options);
                                        startAutoHide();
                                        resolve(element);
                                    }, reject);
                                } catch (e) {
                                    reject(e.message);
                                }
                            });
                        }
                        function hideElement(element, options) {
                            var announceRemoving = options.onRemoving || angular.noop;
                            return $$q(function(resolve, reject) {
                                try {
                                    var action = $$q.when(options.onRemove(options.scope, element, options) || !0);
                                    announceRemoving(element, action);
                                    1 == options.$destroy ? resolve(element) : action.then(function() {
                                        !options.preserveScope && options.scope && options.scope.$destroy();
                                        resolve(element);
                                    }, reject);
                                } catch (e) {
                                    reject(e.message);
                                }
                            });
                        }
                        var self, element, showAction = $q.when(!0);
                        options = function(options) {
                            options = options || {};
                            options.template && (options.template = $mdUtil.processTemplate(options.template));
                            return angular.extend({
                                preserveScope: !1,
                                cancelAutoHide: angular.noop,
                                scope: options.scope || $rootScope.$new(options.isolateScope),
                                onShow: function(scope, element, options) {
                                    return $animate.enter(element, options.parent);
                                },
                                onRemove: function(scope, element) {
                                    return element && $animate.leave(element) || $q.when();
                                }
                            }, options);
                        }(options);
                        return self = {
                            options: options,
                            deferred: $q.defer(),
                            show: createAndTransitionIn,
                            remove: transitionOutAndRemove
                        };
                    }
                    var service, SHOW_CANCELLED = !1, stack = [];
                    return service = {
                        show: show,
                        hide: hide,
                        cancel: cancel,
                        destroy: destroy,
                        $injector_: $injector
                    };
                };
            }
            createInterimElementProvider.$get = InterimElementFactory;
            InterimElementFactory.$inject = [ "$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$injector" ];
            return createInterimElementProvider;
        }
        angular.module("material.core").provider("$$interimElement", InterimElementProvider);
    }();
    !function() {
        !function() {
            function disableLayoutDirective() {
                return {
                    restrict: "A",
                    priority: "900",
                    compile: function(element, attr) {
                        config.enabled = !1;
                        return angular.noop;
                    }
                };
            }
            function buildCloakInterceptor(className) {
                return [ "$timeout", function($timeout) {
                    return {
                        restrict: "A",
                        priority: -10,
                        compile: function(element) {
                            if (!config.enabled) return angular.noop;
                            element.addClass(className);
                            return function(scope, element) {
                                $timeout(function() {
                                    element.removeClass(className);
                                }, 10, !1);
                            };
                        }
                    };
                } ];
            }
            function attributeWithObserve(className) {
                function translateWithValueToCssClass(scope, element, attrs) {
                    var updateFn = updateClassWithValue(element, className), unwatch = attrs.$observe(attrs.$normalize(className), updateFn);
                    updateFn(getNormalizedAttrValue(className, attrs, ""));
                    scope.$on("$destroy", function() {
                        unwatch();
                    });
                }
                return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;
                    return {
                        restrict: "A",
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                validateAttributeUsage(className, attr, element, $log);
                                validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(element, className, attr));
                                linkFn = translateWithValueToCssClass;
                            }
                            return linkFn || angular.noop;
                        }
                    };
                } ];
            }
            function attributeWithoutValue(className) {
                function translateToCssClass(scope, element) {
                    element.addClass(className);
                }
                return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;
                    return {
                        restrict: "A",
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(element, className, attr));
                                translateToCssClass(null, element);
                                linkFn = translateToCssClass;
                            }
                            return linkFn || angular.noop;
                        }
                    };
                } ];
            }
            function updateClassWithValue(element, className) {
                var lastClass;
                return function(newValue) {
                    var value = validateAttributeValue(className, newValue || "");
                    if (angular.isDefined(value)) {
                        lastClass && element.removeClass(lastClass);
                        lastClass = value ? className + "-" + value.replace(WHITESPACE, "-") : className;
                        element.addClass(lastClass);
                    }
                };
            }
            function warnAttrNotSupported(className) {
                var parts = className.split("-");
                return [ "$log", function($log) {
                    $log.warn(className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");
                    return angular.noop;
                } ];
            }
            function validateAttributeUsage(className, attr, element, $log) {
                var message, usage, url, nodeName = element[0].nodeName.toLowerCase();
                switch (className.replace(SUFFIXES, "")) {
                  case "flex":
                    if ("md-button" == nodeName || "fieldset" == nodeName) {
                        usage = "<" + nodeName + " " + className + "></" + nodeName + ">";
                        url = "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers";
                        message = "Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.";
                        $log.warn($mdUtil.supplant(message, [ usage, url ]));
                    }
                }
            }
            function validateAttributeValue(className, value, updateFn) {
                var origValue = value;
                if (!needsInterpolation(value)) {
                    switch (className.replace(SUFFIXES, "")) {
                      case "layout":
                        findIn(value, LAYOUT_OPTIONS) || (value = LAYOUT_OPTIONS[0]);
                        break;

                      case "flex":
                        findIn(value, FLEX_OPTIONS) || isNaN(value) && (value = "");
                        break;

                      case "flex-offset":
                      case "flex-order":
                        value && !isNaN(+value) || (value = "0");
                        break;

                      case "layout-align":
                        var axis = extractAlignAxis(value);
                        value = $mdUtil.supplant("{main}-{cross}", axis);
                        break;

                      case "layout-padding":
                      case "layout-margin":
                      case "layout-fill":
                      case "layout-wrap":
                      case "layout-no-wrap":
                        value = "";
                    }
                    value != origValue && (updateFn || angular.noop)(value);
                }
                return value;
            }
            function buildUpdateFn(element, className, attrs) {
                return function(fallback) {
                    needsInterpolation(fallback) || (attrs[attrs.$normalize(className)] = fallback);
                };
            }
            function needsInterpolation(value) {
                return (value || "").indexOf($interpolate.startSymbol()) > -1;
            }
            function getNormalizedAttrValue(className, attrs, defaultVal) {
                var normalizedAttr = attrs.$normalize(className);
                return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;
            }
            function findIn(item, list, replaceWith) {
                item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;
                var found = !1;
                item && list.forEach(function(it) {
                    it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                    found = found || it === item;
                });
                return found;
            }
            function extractAlignAxis(attrValue) {
                var values, axis = {
                    main: "start",
                    cross: "stretch"
                };
                attrValue = attrValue || "";
                0 != attrValue.indexOf("-") && 0 != attrValue.indexOf(" ") || (attrValue = "none" + attrValue);
                values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-");
                values.length && "space" === values[0] && (values = [ values[0] + "-" + values[1], values[2] ]);
                values.length > 0 && (axis.main = values[0] || axis.main);
                values.length > 1 && (axis.cross = values[1] || axis.cross);
                ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0 && (axis.main = "start");
                ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0 && (axis.cross = "stretch");
                return axis;
            }
            var $mdUtil, $interpolate, $log, SUFFIXES = /(-gt)?-(sm|md|lg)/g, WHITESPACE = /\s+/g, FLEX_OPTIONS = [ "grow", "initial", "auto", "none", "noshrink", "nogrow" ], LAYOUT_OPTIONS = [ "row", "column" ], ALIGNMENT_MAIN_AXIS = [ "", "start", "center", "end", "stretch", "space-around", "space-between" ], ALIGNMENT_CROSS_AXIS = [ "", "start", "center", "end", "stretch" ], config = {
                enabled: !0,
                breakpoints: []
            };
            !function(module) {
                function directiveNormalize(name) {
                    return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
                        return offset ? letter.toUpperCase() : letter;
                    });
                }
                var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i, SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g, BREAKPOINTS = [ "", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl" ], API_WITH_VALUES = [ "layout", "flex", "flex-order", "flex-offset", "layout-align" ], API_NO_VALUES = [ "show", "hide", "layout-padding", "layout-margin" ];
                angular.forEach(BREAKPOINTS, function(mqb) {
                    angular.forEach(API_WITH_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithObserve(fullName));
                    });
                    angular.forEach(API_NO_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithoutValue(fullName));
                    });
                });
                module.directive("mdLayoutCss", disableLayoutDirective).directive("ngCloak", buildCloakInterceptor("ng-cloak")).directive("layoutWrap", attributeWithoutValue("layout-wrap")).directive("layoutNoWrap", attributeWithoutValue("layout-no-wrap")).directive("layoutFill", attributeWithoutValue("layout-fill")).directive("layoutLtMd", warnAttrNotSupported("layout-lt-md")).directive("layoutLtLg", warnAttrNotSupported("layout-lt-lg")).directive("flexLtMd", warnAttrNotSupported("flex-lt-md")).directive("flexLtLg", warnAttrNotSupported("flex-lt-lg")).directive("layoutAlignLtMd", warnAttrNotSupported("layout-align-lt-md")).directive("layoutAlignLtLg", warnAttrNotSupported("layout-align-lt-lg")).directive("flexOrderLtMd", warnAttrNotSupported("flex-order-lt-md")).directive("flexOrderLtLg", warnAttrNotSupported("flex-order-lt-lg")).directive("offsetLtMd", warnAttrNotSupported("flex-offset-lt-md")).directive("offsetLtLg", warnAttrNotSupported("flex-offset-lt-lg")).directive("hideLtMd", warnAttrNotSupported("hide-lt-md")).directive("hideLtLg", warnAttrNotSupported("hide-lt-lg")).directive("showLtMd", warnAttrNotSupported("show-lt-md")).directive("showLtLg", warnAttrNotSupported("show-lt-lg"));
            }(angular.module("material.core.layout", [ "ng" ]));
        }();
    }();
    !function() {
        function ComponentRegistry($log, $q) {
            function isValidID(handle) {
                return handle && "" !== handle;
            }
            var self, instances = [], pendings = {};
            return self = {
                notFoundError: function(handle) {
                    $log.error("No instance found for handle", handle);
                },
                getInstances: function() {
                    return instances;
                },
                get: function(handle) {
                    if (!isValidID(handle)) return null;
                    var i, j, instance;
                    for (i = 0, j = instances.length; i < j; i++) {
                        instance = instances[i];
                        if (instance.$$mdHandle === handle) return instance;
                    }
                    return null;
                },
                register: function(instance, handle) {
                    function deregister() {
                        var index = instances.indexOf(instance);
                        -1 !== index && instances.splice(index, 1);
                    }
                    if (!handle) return angular.noop;
                    instance.$$mdHandle = handle;
                    instances.push(instance);
                    !function() {
                        var dfd = pendings[handle];
                        if (dfd) {
                            dfd.resolve(instance);
                            delete pendings[handle];
                        }
                    }();
                    return deregister;
                },
                when: function(handle) {
                    if (isValidID(handle)) {
                        var deferred = $q.defer(), instance = self.get(handle);
                        instance ? deferred.resolve(instance) : pendings[handle] = deferred;
                        return deferred.promise;
                    }
                    return $q.reject("Invalid `md-component-id` value.");
                }
            };
        }
        angular.module("material.core").factory("$mdComponentRegistry", ComponentRegistry);
        ComponentRegistry.$inject = [ "$log", "$q" ];
    }();
    !function() {
        !function() {
            function MdButtonInkRipple($mdInkRipple) {
                function optionsForElement(element) {
                    return element.hasClass("md-icon-button") ? {
                        isMenuItem: element.hasClass("md-menu-item"),
                        fitRipple: !0,
                        center: !0
                    } : {
                        isMenuItem: element.hasClass("md-menu-item"),
                        dimBackground: !0
                    };
                }
                return {
                    attach: function(scope, element, options) {
                        options = angular.extend(optionsForElement(element), options);
                        return $mdInkRipple.attach(scope, element, options);
                    }
                };
            }
            angular.module("material.core").factory("$mdButtonInkRipple", MdButtonInkRipple);
            MdButtonInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        !function() {
            function MdCheckboxInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !0,
                        dimBackground: !1,
                        fitRipple: !0
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            angular.module("material.core").factory("$mdCheckboxInkRipple", MdCheckboxInkRipple);
            MdCheckboxInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        !function() {
            function MdListInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            angular.module("material.core").factory("$mdListInkRipple", MdListInkRipple);
            MdListInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {
            return {
                controller: angular.noop,
                link: function(scope, element, attr) {
                    attr.hasOwnProperty("mdInkRippleCheckbox") ? $mdCheckboxInkRipple.attach(scope, element) : $mdButtonInkRipple.attach(scope, element);
                }
            };
        }
        function InkRippleService($injector) {
            function attach(scope, element, options) {
                return element.controller("mdNoInk") ? angular.noop : $injector.instantiate(InkRippleCtrl, {
                    $scope: scope,
                    $element: element,
                    rippleOptions: options
                });
            }
            return {
                attach: attach
            };
        }
        function InkRippleCtrl($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {
            this.$window = $window;
            this.$timeout = $timeout;
            this.$mdUtil = $mdUtil;
            this.$scope = $scope;
            this.$element = $element;
            this.options = rippleOptions;
            this.mousedown = !1;
            this.ripples = [];
            this.timeout = null;
            this.lastRipple = null;
            $mdUtil.valueOnUse(this, "container", this.createContainer);
            this.$element.addClass("md-ink-ripple");
            ($element.controller("mdInkRipple") || {}).createRipple = angular.bind(this, this.createRipple);
            ($element.controller("mdInkRipple") || {}).setColor = angular.bind(this, this.color);
            this.bindEvents();
        }
        function autoCleanup(self, cleanupFn) {
            if (self.mousedown || self.lastRipple) {
                self.mousedown = !1;
                self.$mdUtil.nextTick(angular.bind(self, cleanupFn), !1);
            }
        }
        function attrNoDirective() {
            return {
                controller: angular.noop
            };
        }
        angular.module("material.core").factory("$mdInkRipple", InkRippleService).directive("mdInkRipple", InkRippleDirective).directive("mdNoInk", attrNoDirective).directive("mdNoBar", attrNoDirective).directive("mdNoStretch", attrNoDirective);
        InkRippleDirective.$inject = [ "$mdButtonInkRipple", "$mdCheckboxInkRipple" ];
        InkRippleService.$inject = [ "$injector" ];
        InkRippleCtrl.$inject = [ "$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil" ];
        InkRippleCtrl.prototype.color = function(value) {
            var self = this;
            angular.isDefined(value) && (self._color = self._parseColor(value));
            return self._color || self._parseColor(self.inkRipple()) || self._parseColor(function() {
                var items = self.options && self.options.colorElement ? self.options.colorElement : [], elem = items.length ? items[0] : self.$element[0];
                return elem ? self.$window.getComputedStyle(elem).color : "rgb(0,0,0)";
            }());
        };
        InkRippleCtrl.prototype.calculateColor = function() {
            return this.color();
        };
        InkRippleCtrl.prototype._parseColor = function(color, multiplier) {
            multiplier = multiplier || 1;
            if (color) return 0 === color.indexOf("rgba") ? color.replace(/\d?\.?\d*\s*\)\s*$/, (.1 * multiplier).toString() + ")") : 0 === color.indexOf("rgb") ? function(color) {
                return color.replace(")", ", 0.1)").replace("(", "a(");
            }(color) : 0 === color.indexOf("#") ? function(color) {
                var hex = "#" === color[0] ? color.substr(1) : color, dig = hex.length / 3, red = hex.substr(0, dig), green = hex.substr(dig, dig), blue = hex.substr(2 * dig);
                if (1 === dig) {
                    red += red;
                    green += green;
                    blue += blue;
                }
                return "rgba(" + parseInt(red, 16) + "," + parseInt(green, 16) + "," + parseInt(blue, 16) + ",0.1)";
            }(color) : void 0;
        };
        InkRippleCtrl.prototype.bindEvents = function() {
            this.$element.on("mousedown", angular.bind(this, this.handleMousedown));
            this.$element.on("mouseup touchend", angular.bind(this, this.handleMouseup));
            this.$element.on("mouseleave", angular.bind(this, this.handleMouseup));
            this.$element.on("touchmove", angular.bind(this, this.handleTouchmove));
        };
        InkRippleCtrl.prototype.handleMousedown = function(event) {
            if (!this.mousedown) {
                event.hasOwnProperty("originalEvent") && (event = event.originalEvent);
                this.mousedown = !0;
                if (this.options.center) this.createRipple(this.container.prop("clientWidth") / 2, this.container.prop("clientWidth") / 2); else if (event.srcElement !== this.$element[0]) {
                    var layerRect = this.$element[0].getBoundingClientRect(), layerX = event.clientX - layerRect.left, layerY = event.clientY - layerRect.top;
                    this.createRipple(layerX, layerY);
                } else this.createRipple(event.offsetX, event.offsetY);
            }
        };
        InkRippleCtrl.prototype.handleMouseup = function() {
            autoCleanup(this, this.clearRipples);
        };
        InkRippleCtrl.prototype.handleTouchmove = function() {
            autoCleanup(this, this.deleteRipples);
        };
        InkRippleCtrl.prototype.deleteRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.ripples[i].remove();
        };
        InkRippleCtrl.prototype.clearRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.fadeInComplete(this.ripples[i]);
        };
        InkRippleCtrl.prototype.createContainer = function() {
            var container = angular.element('<div class="md-ripple-container"></div>');
            this.$element.append(container);
            return container;
        };
        InkRippleCtrl.prototype.clearTimeout = function() {
            if (this.timeout) {
                this.$timeout.cancel(this.timeout);
                this.timeout = null;
            }
        };
        InkRippleCtrl.prototype.isRippleAllowed = function() {
            var element = this.$element[0];
            do {
                if (!element.tagName || "BODY" === element.tagName) break;
                if (element && angular.isFunction(element.hasAttribute)) {
                    if (element.hasAttribute("disabled")) return !1;
                    if ("false" === this.inkRipple() || "0" === this.inkRipple()) return !1;
                }
            } while (element = element.parentNode);
            return !0;
        };
        InkRippleCtrl.prototype.inkRipple = function() {
            return this.$element.attr("md-ink-ripple");
        };
        InkRippleCtrl.prototype.createRipple = function(left, top) {
            function rgbaToRGB(color) {
                return color ? color.replace("rgba", "rgb").replace(/,[^\),]+\)/, ")") : "rgb(0,0,0)";
            }
            if (this.isRippleAllowed()) {
                var ctrl = this, ripple = angular.element('<div class="md-ripple"></div>'), width = this.$element.prop("clientWidth"), height = this.$element.prop("clientHeight"), x = 2 * Math.max(Math.abs(width - left), left), y = 2 * Math.max(Math.abs(height - top), top), size = function(fit, x, y) {
                    return fit ? Math.max(x, y) : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                }(this.options.fitRipple, x, y), color = this.calculateColor();
                ripple.css({
                    left: left + "px",
                    top: top + "px",
                    background: "black",
                    width: size + "px",
                    height: size + "px",
                    backgroundColor: rgbaToRGB(color),
                    borderColor: rgbaToRGB(color)
                });
                this.lastRipple = ripple;
                this.clearTimeout();
                this.timeout = this.$timeout(function() {
                    ctrl.clearTimeout();
                    ctrl.mousedown || ctrl.fadeInComplete(ripple);
                }, 157.5, !1);
                this.options.dimBackground && this.container.css({
                    backgroundColor: color
                });
                this.container.append(ripple);
                this.ripples.push(ripple);
                ripple.addClass("md-ripple-placed");
                this.$mdUtil.nextTick(function() {
                    ripple.addClass("md-ripple-scaled md-ripple-active");
                    ctrl.$timeout(function() {
                        ctrl.clearRipples();
                    }, 450, !1);
                }, !1);
            }
        };
        InkRippleCtrl.prototype.fadeInComplete = function(ripple) {
            this.lastRipple === ripple ? this.timeout || this.mousedown || this.removeRipple(ripple) : this.removeRipple(ripple);
        };
        InkRippleCtrl.prototype.removeRipple = function(ripple) {
            var ctrl = this;
            if (!(this.ripples.indexOf(ripple) < 0)) {
                this.ripples.splice(this.ripples.indexOf(ripple), 1);
                ripple.removeClass("md-ripple-active");
                0 === this.ripples.length && this.container.css({
                    backgroundColor: ""
                });
                this.$timeout(function() {
                    ctrl.fadeOutComplete(ripple);
                }, 450, !1);
            }
        };
        InkRippleCtrl.prototype.fadeOutComplete = function(ripple) {
            ripple.remove();
            this.lastRipple = null;
        };
    }();
    !function() {
        !function() {
            function MdTabInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            angular.module("material.core").factory("$mdTabInkRipple", MdTabInkRipple);
            MdTabInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        angular.module("material.core.theming.palette", []).constant("$mdColorPalette", {
            red: {
                "50": "#ffebee",
                "100": "#ffcdd2",
                "200": "#ef9a9a",
                "300": "#e57373",
                "400": "#ef5350",
                "500": "#f44336",
                "600": "#e53935",
                "700": "#d32f2f",
                "800": "#c62828",
                "900": "#b71c1c",
                A100: "#ff8a80",
                A200: "#ff5252",
                A400: "#ff1744",
                A700: "#d50000",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 A100",
                contrastStrongLightColors: "400 500 600 700 A200 A400 A700"
            },
            pink: {
                "50": "#fce4ec",
                "100": "#f8bbd0",
                "200": "#f48fb1",
                "300": "#f06292",
                "400": "#ec407a",
                "500": "#e91e63",
                "600": "#d81b60",
                "700": "#c2185b",
                "800": "#ad1457",
                "900": "#880e4f",
                A100: "#ff80ab",
                A200: "#ff4081",
                A400: "#f50057",
                A700: "#c51162",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "500 600 A200 A400 A700"
            },
            purple: {
                "50": "#f3e5f5",
                "100": "#e1bee7",
                "200": "#ce93d8",
                "300": "#ba68c8",
                "400": "#ab47bc",
                "500": "#9c27b0",
                "600": "#8e24aa",
                "700": "#7b1fa2",
                "800": "#6a1b9a",
                "900": "#4a148c",
                A100: "#ea80fc",
                A200: "#e040fb",
                A400: "#d500f9",
                A700: "#aa00ff",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200 A400 A700"
            },
            "deep-purple": {
                "50": "#ede7f6",
                "100": "#d1c4e9",
                "200": "#b39ddb",
                "300": "#9575cd",
                "400": "#7e57c2",
                "500": "#673ab7",
                "600": "#5e35b1",
                "700": "#512da8",
                "800": "#4527a0",
                "900": "#311b92",
                A100: "#b388ff",
                A200: "#7c4dff",
                A400: "#651fff",
                A700: "#6200ea",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200"
            },
            indigo: {
                "50": "#e8eaf6",
                "100": "#c5cae9",
                "200": "#9fa8da",
                "300": "#7986cb",
                "400": "#5c6bc0",
                "500": "#3f51b5",
                "600": "#3949ab",
                "700": "#303f9f",
                "800": "#283593",
                "900": "#1a237e",
                A100: "#8c9eff",
                A200: "#536dfe",
                A400: "#3d5afe",
                A700: "#304ffe",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200 A400"
            },
            blue: {
                "50": "#e3f2fd",
                "100": "#bbdefb",
                "200": "#90caf9",
                "300": "#64b5f6",
                "400": "#42a5f5",
                "500": "#2196f3",
                "600": "#1e88e5",
                "700": "#1976d2",
                "800": "#1565c0",
                "900": "#0d47a1",
                A100: "#82b1ff",
                A200: "#448aff",
                A400: "#2979ff",
                A700: "#2962ff",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 400 A100",
                contrastStrongLightColors: "500 600 700 A200 A400 A700"
            },
            "light-blue": {
                "50": "#e1f5fe",
                "100": "#b3e5fc",
                "200": "#81d4fa",
                "300": "#4fc3f7",
                "400": "#29b6f6",
                "500": "#03a9f4",
                "600": "#039be5",
                "700": "#0288d1",
                "800": "#0277bd",
                "900": "#01579b",
                A100: "#80d8ff",
                A200: "#40c4ff",
                A400: "#00b0ff",
                A700: "#0091ea",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900 A700",
                contrastStrongLightColors: "600 700 800 A700"
            },
            cyan: {
                "50": "#e0f7fa",
                "100": "#b2ebf2",
                "200": "#80deea",
                "300": "#4dd0e1",
                "400": "#26c6da",
                "500": "#00bcd4",
                "600": "#00acc1",
                "700": "#0097a7",
                "800": "#00838f",
                "900": "#006064",
                A100: "#84ffff",
                A200: "#18ffff",
                A400: "#00e5ff",
                A700: "#00b8d4",
                contrastDefaultColor: "dark",
                contrastLightColors: "700 800 900",
                contrastStrongLightColors: "700 800 900"
            },
            teal: {
                "50": "#e0f2f1",
                "100": "#b2dfdb",
                "200": "#80cbc4",
                "300": "#4db6ac",
                "400": "#26a69a",
                "500": "#009688",
                "600": "#00897b",
                "700": "#00796b",
                "800": "#00695c",
                "900": "#004d40",
                A100: "#a7ffeb",
                A200: "#64ffda",
                A400: "#1de9b6",
                A700: "#00bfa5",
                contrastDefaultColor: "dark",
                contrastLightColors: "500 600 700 800 900",
                contrastStrongLightColors: "500 600 700"
            },
            green: {
                "50": "#e8f5e9",
                "100": "#c8e6c9",
                "200": "#a5d6a7",
                "300": "#81c784",
                "400": "#66bb6a",
                "500": "#4caf50",
                "600": "#43a047",
                "700": "#388e3c",
                "800": "#2e7d32",
                "900": "#1b5e20",
                A100: "#b9f6ca",
                A200: "#69f0ae",
                A400: "#00e676",
                A700: "#00c853",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900",
                contrastStrongLightColors: "600 700"
            },
            "light-green": {
                "50": "#f1f8e9",
                "100": "#dcedc8",
                "200": "#c5e1a5",
                "300": "#aed581",
                "400": "#9ccc65",
                "500": "#8bc34a",
                "600": "#7cb342",
                "700": "#689f38",
                "800": "#558b2f",
                "900": "#33691e",
                A100: "#ccff90",
                A200: "#b2ff59",
                A400: "#76ff03",
                A700: "#64dd17",
                contrastDefaultColor: "dark",
                contrastLightColors: "700 800 900",
                contrastStrongLightColors: "700 800 900"
            },
            lime: {
                "50": "#f9fbe7",
                "100": "#f0f4c3",
                "200": "#e6ee9c",
                "300": "#dce775",
                "400": "#d4e157",
                "500": "#cddc39",
                "600": "#c0ca33",
                "700": "#afb42b",
                "800": "#9e9d24",
                "900": "#827717",
                A100: "#f4ff81",
                A200: "#eeff41",
                A400: "#c6ff00",
                A700: "#aeea00",
                contrastDefaultColor: "dark",
                contrastLightColors: "900",
                contrastStrongLightColors: "900"
            },
            yellow: {
                "50": "#fffde7",
                "100": "#fff9c4",
                "200": "#fff59d",
                "300": "#fff176",
                "400": "#ffee58",
                "500": "#ffeb3b",
                "600": "#fdd835",
                "700": "#fbc02d",
                "800": "#f9a825",
                "900": "#f57f17",
                A100: "#ffff8d",
                A200: "#ffff00",
                A400: "#ffea00",
                A700: "#ffd600",
                contrastDefaultColor: "dark"
            },
            amber: {
                "50": "#fff8e1",
                "100": "#ffecb3",
                "200": "#ffe082",
                "300": "#ffd54f",
                "400": "#ffca28",
                "500": "#ffc107",
                "600": "#ffb300",
                "700": "#ffa000",
                "800": "#ff8f00",
                "900": "#ff6f00",
                A100: "#ffe57f",
                A200: "#ffd740",
                A400: "#ffc400",
                A700: "#ffab00",
                contrastDefaultColor: "dark"
            },
            orange: {
                "50": "#fff3e0",
                "100": "#ffe0b2",
                "200": "#ffcc80",
                "300": "#ffb74d",
                "400": "#ffa726",
                "500": "#ff9800",
                "600": "#fb8c00",
                "700": "#f57c00",
                "800": "#ef6c00",
                "900": "#e65100",
                A100: "#ffd180",
                A200: "#ffab40",
                A400: "#ff9100",
                A700: "#ff6d00",
                contrastDefaultColor: "dark",
                contrastLightColors: "800 900",
                contrastStrongLightColors: "800 900"
            },
            "deep-orange": {
                "50": "#fbe9e7",
                "100": "#ffccbc",
                "200": "#ffab91",
                "300": "#ff8a65",
                "400": "#ff7043",
                "500": "#ff5722",
                "600": "#f4511e",
                "700": "#e64a19",
                "800": "#d84315",
                "900": "#bf360c",
                A100: "#ff9e80",
                A200: "#ff6e40",
                A400: "#ff3d00",
                A700: "#dd2c00",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 400 A100 A200",
                contrastStrongLightColors: "500 600 700 800 900 A400 A700"
            },
            brown: {
                "50": "#efebe9",
                "100": "#d7ccc8",
                "200": "#bcaaa4",
                "300": "#a1887f",
                "400": "#8d6e63",
                "500": "#795548",
                "600": "#6d4c41",
                "700": "#5d4037",
                "800": "#4e342e",
                "900": "#3e2723",
                A100: "#d7ccc8",
                A200: "#bcaaa4",
                A400: "#8d6e63",
                A700: "#5d4037",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200",
                contrastStrongLightColors: "300 400"
            },
            grey: {
                "50": "#fafafa",
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "1000": "#000000",
                A100: "#ffffff",
                A200: "#eeeeee",
                A400: "#bdbdbd",
                A700: "#616161",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900"
            },
            "blue-grey": {
                "50": "#eceff1",
                "100": "#cfd8dc",
                "200": "#b0bec5",
                "300": "#90a4ae",
                "400": "#78909c",
                "500": "#607d8b",
                "600": "#546e7a",
                "700": "#455a64",
                "800": "#37474f",
                "900": "#263238",
                A100: "#cfd8dc",
                A200: "#b0bec5",
                A400: "#78909c",
                A700: "#455a64",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300",
                contrastStrongLightColors: "400 500"
            }
        });
    }();
    !function() {
        function ThemingProvider($mdColorPalette) {
            function definePalette(name, map) {
                map = map || {};
                PALETTES[name] = checkPaletteValid(name, map);
                return themingProvider;
            }
            function extendPalette(name, map) {
                return checkPaletteValid(name, angular.extend({}, PALETTES[name] || {}, map));
            }
            function checkPaletteValid(name, map) {
                var missingColors = VALID_HUE_VALUES.filter(function(field) {
                    return !map[field];
                });
                if (missingColors.length) throw new Error("Missing colors %1 in palette %2!".replace("%1", missingColors.join(", ")).replace("%2", name));
                return map;
            }
            function registerTheme(name, inheritFrom) {
                if (THEMES[name]) return THEMES[name];
                inheritFrom = inheritFrom || "default";
                var parentTheme = "string" == typeof inheritFrom ? THEMES[inheritFrom] : inheritFrom, theme = new Theme(name);
                parentTheme && angular.forEach(parentTheme.colors, function(color, colorType) {
                    theme.colors[colorType] = {
                        name: color.name,
                        hues: angular.extend({}, color.hues)
                    };
                });
                THEMES[name] = theme;
                return theme;
            }
            function Theme(name) {
                function setDark(isDark) {
                    isDark = 0 === arguments.length || !!isDark;
                    if (isDark !== self.isDark) {
                        self.isDark = isDark;
                        self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
                        self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;
                        var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES, oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
                        angular.forEach(newDefaultHues, function(newDefaults, colorType) {
                            var color = self.colors[colorType], oldDefaults = oldDefaultHues[colorType];
                            if (color) for (var hueName in color.hues) color.hues[hueName] === oldDefaults[hueName] && (color.hues[hueName] = newDefaults[hueName]);
                        });
                        return self;
                    }
                }
                var self = this;
                self.name = name;
                self.colors = {};
                self.dark = setDark;
                setDark(!1);
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
                    self[colorType + "Palette"] = function(paletteName, hues) {
                        var color = self.colors[colorType] = {
                            name: paletteName,
                            hues: angular.extend({}, defaultHues, hues)
                        };
                        Object.keys(color.hues).forEach(function(name) {
                            if (!defaultHues[name]) throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1", name).replace("%2", self.name).replace("%3", paletteName).replace("%4", Object.keys(defaultHues).join(", ")));
                        });
                        Object.keys(color.hues).map(function(key) {
                            return color.hues[key];
                        }).forEach(function(hueValue) {
                            if (-1 == VALID_HUE_VALUES.indexOf(hueValue)) throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1", hueValue).replace("%2", self.name).replace("%3", colorType).replace("%4", paletteName).replace("%5", VALID_HUE_VALUES.join(", ")));
                        });
                        return self;
                    };
                    self[colorType + "Color"] = function() {
                        var args = Array.prototype.slice.call(arguments);
                        console.warn("$mdThemingProviderTheme." + colorType + "Color() has been deprecated. Use $mdThemingProviderTheme." + colorType + "Palette() instead.");
                        return self[colorType + "Palette"].apply(self, args);
                    };
                });
            }
            function ThemingService($rootScope, $log) {
                function registered(themeName) {
                    return themeName === undefined || "" === themeName || applyTheme.THEMES[themeName] !== undefined;
                }
                function applyTheme(scope, el) {
                    if (el === undefined) {
                        el = scope;
                        scope = undefined;
                    }
                    scope === undefined && (scope = $rootScope);
                    applyTheme.inherit(el, el);
                }
                applyTheme.inherit = function(el, parent) {
                    function changeTheme(theme) {
                        if (theme) {
                            registered(theme) || $log.warn("Attempted to use unregistered theme '" + theme + "'. Register it with $mdThemingProvider.theme().");
                            var oldTheme = el.data("$mdThemeName");
                            oldTheme && el.removeClass("md-" + oldTheme + "-theme");
                            el.addClass("md-" + theme + "-theme");
                            el.data("$mdThemeName", theme);
                            ctrl && el.data("$mdThemeController", ctrl);
                        }
                    }
                    var ctrl = parent.controller("mdTheme"), attrThemeValue = el.attr("md-theme-watch");
                    if ((alwaysWatchTheme || angular.isDefined(attrThemeValue)) && "false" != attrThemeValue) {
                        var deregisterWatch = $rootScope.$watch(function() {
                            return ctrl && ctrl.$mdTheme || ("default" == defaultTheme ? "" : defaultTheme);
                        }, changeTheme);
                        el.on("$destroy", deregisterWatch);
                    } else {
                        changeTheme(ctrl && ctrl.$mdTheme || ("default" == defaultTheme ? "" : defaultTheme));
                    }
                };
                applyTheme.THEMES = angular.extend({}, THEMES);
                applyTheme.defaultTheme = function() {
                    return defaultTheme;
                };
                applyTheme.registered = registered;
                applyTheme.generateTheme = generateTheme;
                return applyTheme;
            }
            PALETTES = {};
            THEMES = {};
            var themingProvider, defaultTheme = "default", alwaysWatchTheme = !1;
            angular.extend(PALETTES, $mdColorPalette);
            ThemingService.$inject = [ "$rootScope", "$log" ];
            return themingProvider = {
                definePalette: definePalette,
                extendPalette: extendPalette,
                theme: registerTheme,
                setDefaultTheme: function(theme) {
                    defaultTheme = theme;
                },
                alwaysWatchTheme: function(alwaysWatch) {
                    alwaysWatchTheme = alwaysWatch;
                },
                generateThemesOnDemand: function(onDemand) {
                    generateOnDemand = onDemand;
                },
                $get: ThemingService,
                _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
                _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
                _PALETTES: PALETTES,
                _THEMES: THEMES,
                _parseRules: parseRules,
                _rgba: rgba
            };
        }
        function ThemingDirective($mdTheming, $interpolate, $log) {
            return {
                priority: 100,
                link: {
                    pre: function(scope, el, attrs) {
                        var ctrl = {
                            $setTheme: function(theme) {
                                $mdTheming.registered(theme) || $log.warn("attempted to use unregistered theme '" + theme + "'");
                                ctrl.$mdTheme = theme;
                            }
                        };
                        el.data("$mdThemeController", ctrl);
                        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
                        attrs.$observe("mdTheme", ctrl.$setTheme);
                    }
                }
            };
        }
        function ThemableDirective($mdTheming) {
            return $mdTheming;
        }
        function parseRules(theme, colorType, rules) {
            checkValidPalette(theme, colorType);
            rules = rules.replace(/THEME_NAME/g, theme.name);
            var generatedRules = [], color = theme.colors[colorType], themeNameRegex = new RegExp(".md-" + theme.name + "-theme", "g"), hueRegex = new RegExp("('|\")?{{\\s*(" + colorType + ")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?", "g"), simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g, palette = PALETTES[color.name];
            rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {
                if ("foreground" === colorType) return "shadow" == hue ? theme.foregroundShadow : theme.foregroundPalette[hue] || theme.foregroundPalette[1];
                0 === hue.indexOf("hue") && (hue = theme.colors[colorType].hues[hue]);
                return rgba((PALETTES[theme.colors[colorType].name][hue] || "")[contrast ? "contrast" : "value"], opacity);
            });
            angular.forEach(color.hues, function(hueValue, hueName) {
                var newRule = rules.replace(hueRegex, function(match, _, colorType, hueType, opacity) {
                    return rgba(palette[hueValue]["color" === hueType ? "value" : "contrast"], opacity);
                });
                "default" !== hueName && (newRule = newRule.replace(themeNameRegex, ".md-" + theme.name + "-theme.md-" + hueName));
                if ("default" == theme.name) {
                    var themeRuleRegex = /((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g;
                    newRule = newRule.replace(themeRuleRegex, function(match, prefix, target, suffix) {
                        return match + ", " + prefix + target + suffix;
                    });
                }
                generatedRules.push(newRule);
            });
            return generatedRules;
        }
        function generateAllThemes($injector) {
            function sanitizePalette(palette) {
                var defaultContrast = palette.contrastDefaultColor, lightColors = palette.contrastLightColors || [], strongLightColors = palette.contrastStrongLightColors || [], darkColors = palette.contrastDarkColors || [];
                "string" == typeof lightColors && (lightColors = lightColors.split(" "));
                "string" == typeof strongLightColors && (strongLightColors = strongLightColors.split(" "));
                "string" == typeof darkColors && (darkColors = darkColors.split(" "));
                delete palette.contrastDefaultColor;
                delete palette.contrastLightColors;
                delete palette.contrastStrongLightColors;
                delete palette.contrastDarkColors;
                angular.forEach(palette, function(hueValue, hueName) {
                    if (!angular.isObject(hueValue)) {
                        var rgbValue = colorToRgbaArray(hueValue);
                        if (!rgbValue) throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1", hueValue).replace("%2", palette.name).replace("%3", hueName));
                        palette[hueName] = {
                            value: rgbValue,
                            contrast: function() {
                                return "light" === defaultContrast ? darkColors.indexOf(hueName) > -1 ? DARK_CONTRAST_COLOR : strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : lightColors.indexOf(hueName) > -1 ? strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : DARK_CONTRAST_COLOR;
                            }()
                        };
                    }
                });
            }
            var head = document.head, firstChild = head ? head.firstElementChild : null, themeCss = $injector.has("$MD_THEME_CSS") ? $injector.get("$MD_THEME_CSS") : "";
            if (firstChild && 0 !== themeCss.length) {
                angular.forEach(PALETTES, sanitizePalette);
                var rules = themeCss.split(/\}(?!(\}|'|"|;))/).filter(function(rule) {
                    return rule && rule.length;
                }).map(function(rule) {
                    return rule.trim() + "}";
                }), ruleMatchRegex = new RegExp("md-(" + THEME_COLOR_TYPES.join("|") + ")", "g");
                THEME_COLOR_TYPES.forEach(function(type) {
                    rulesByType[type] = "";
                });
                rules.forEach(function(rule) {
                    for (var type, i = (rule.match(ruleMatchRegex), 0); type = THEME_COLOR_TYPES[i]; i++) if (rule.indexOf(".md-" + type) > -1) return rulesByType[type] += rule;
                    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) if (rule.indexOf(type) > -1) return rulesByType[type] += rule;
                    return rulesByType[DEFAULT_COLOR_TYPE] += rule;
                });
                generateOnDemand || angular.forEach(THEMES, function(theme) {
                    GENERATED[theme.name] || generateTheme(theme.name);
                });
            }
        }
        function generateTheme(name) {
            var theme = THEMES[name], head = document.head, firstChild = head ? head.firstElementChild : null;
            if (!GENERATED[name]) {
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    for (var styleStrings = parseRules(theme, colorType, rulesByType[colorType]); styleStrings.length; ) {
                        var styleContent = styleStrings.shift();
                        if (styleContent) {
                            var style = document.createElement("style");
                            style.setAttribute("md-theme-style", "");
                            style.appendChild(document.createTextNode(styleContent));
                            head.insertBefore(style, firstChild);
                        }
                    }
                });
                theme.colors.primary.name == theme.colors.accent.name && console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec.");
                GENERATED[theme.name] = !0;
            }
        }
        function checkValidPalette(theme, colorType) {
            if (!PALETTES[(theme.colors[colorType] || {}).name]) throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1", theme.name).replace("%2", colorType).replace("%3", Object.keys(PALETTES).join(", ")));
        }
        function colorToRgbaArray(clr) {
            if (angular.isArray(clr) && 3 == clr.length) return clr;
            if (/^rgb/.test(clr)) return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, "").split(",").map(function(value, i) {
                return 3 == i ? parseFloat(value, 10) : parseInt(value, 10);
            });
            "#" == clr.charAt(0) && (clr = clr.substring(1));
            if (/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) {
                var dig = clr.length / 3, red = clr.substr(0, dig), grn = clr.substr(dig, dig), blu = clr.substr(2 * dig);
                if (1 === dig) {
                    red += red;
                    grn += grn;
                    blu += blu;
                }
                return [ parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16) ];
            }
        }
        function rgba(rgbArray, opacity) {
            if (!rgbArray) return "rgb('0,0,0')";
            if (4 == rgbArray.length) {
                rgbArray = angular.copy(rgbArray);
                opacity ? rgbArray.pop() : opacity = rgbArray.pop();
            }
            return opacity && ("number" == typeof opacity || "string" == typeof opacity && opacity.length) ? "rgba(" + rgbArray.join(",") + "," + opacity + ")" : "rgb(" + rgbArray.join(",") + ")";
        }
        angular.module("material.core.theming", [ "material.core.theming.palette" ]).directive("mdTheme", ThemingDirective).directive("mdThemable", ThemableDirective).provider("$mdTheming", ThemingProvider).run(generateAllThemes);
        var PALETTES, THEMES, GENERATED = {}, DARK_FOREGROUND = {
            name: "dark",
            "1": "rgba(0,0,0,0.87)",
            "2": "rgba(0,0,0,0.54)",
            "3": "rgba(0,0,0,0.26)",
            "4": "rgba(0,0,0,0.12)"
        }, LIGHT_FOREGROUND = {
            name: "light",
            "1": "rgba(255,255,255,1.0)",
            "2": "rgba(255,255,255,0.7)",
            "3": "rgba(255,255,255,0.3)",
            "4": "rgba(255,255,255,0.12)"
        }, DARK_SHADOW = "1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)", LIGHT_SHADOW = "", DARK_CONTRAST_COLOR = colorToRgbaArray("rgba(0,0,0,0.87)"), LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgba(255,255,255,0.87)"), STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgb(255,255,255)"), THEME_COLOR_TYPES = [ "primary", "accent", "warn", "background" ], DEFAULT_COLOR_TYPE = "primary", LIGHT_DEFAULT_HUES = {
            accent: {
                default: "A200",
                "hue-1": "A100",
                "hue-2": "A400",
                "hue-3": "A700"
            },
            background: {
                default: "A100",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "900"
            }
        }, DARK_DEFAULT_HUES = {
            background: {
                default: "800",
                "hue-1": "600",
                "hue-2": "300",
                "hue-3": "900"
            }
        };
        THEME_COLOR_TYPES.forEach(function(colorType) {
            var defaultDefaultHues = {
                default: "500",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "A100"
            };
            LIGHT_DEFAULT_HUES[colorType] || (LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues);
            DARK_DEFAULT_HUES[colorType] || (DARK_DEFAULT_HUES[colorType] = defaultDefaultHues);
        });
        var VALID_HUE_VALUES = [ "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700" ], generateOnDemand = !1;
        ThemingProvider.$inject = [ "$mdColorPalette" ];
        ThemingDirective.$inject = [ "$mdTheming", "$interpolate", "$log" ];
        ThemableDirective.$inject = [ "$mdTheming" ];
        var rulesByType = {};
        generateAllThemes.$inject = [ "$injector" ];
    }();
    !function() {
        function AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {
            var self;
            return self = {
                translate3d: function(target, from, to, options) {
                    function reverseTranslate(newFrom) {
                        return $animateCss(target, {
                            to: newFrom || from,
                            addClass: options.transitionOutClass,
                            removeClass: options.transitionInClass
                        }).start();
                    }
                    return $animateCss(target, {
                        from: from,
                        to: to,
                        addClass: options.transitionInClass
                    }).start().then(function() {
                        return reverseTranslate;
                    });
                },
                waitTransitionEnd: function(element, opts) {
                    return $q(function(resolve, reject) {
                        function finished(ev) {
                            if (!ev || ev.target === element[0]) {
                                ev && $timeout.cancel(timer);
                                element.off($mdConstant.CSS.TRANSITIONEND, finished);
                                resolve();
                            }
                        }
                        opts = opts || {};
                        var timer = $timeout(finished, opts.timeout || 3e3);
                        element.on($mdConstant.CSS.TRANSITIONEND, finished);
                    });
                },
                calculateZoomToOrigin: function(element, originator) {
                    var origin = originator.element, bounds = originator.bounds, buildZoom = angular.bind(null, $mdUtil.supplant, "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )"), zoomStyle = buildZoom({
                        centerX: 0,
                        centerY: 0,
                        scaleX: .5,
                        scaleY: .5
                    });
                    if (origin || bounds) {
                        var originBnds = origin ? self.clientRect(origin) || function() {
                            var cntr = element ? element.parent() : null, parent = cntr ? cntr.parent() : null;
                            return parent ? self.clientRect(parent) : null;
                        }() : self.copyRect(bounds), dialogRect = self.copyRect(element[0].getBoundingClientRect()), dialogCenterPt = self.centerPointFor(dialogRect), originCenterPt = self.centerPointFor(originBnds);
                        zoomStyle = buildZoom({
                            centerX: originCenterPt.x - dialogCenterPt.x,
                            centerY: originCenterPt.y - dialogCenterPt.y,
                            scaleX: Math.round(100 * Math.min(.5, originBnds.width / dialogRect.width)) / 100,
                            scaleY: Math.round(100 * Math.min(.5, originBnds.height / dialogRect.height)) / 100
                        });
                    }
                    return zoomStyle;
                },
                toCss: function(raw) {
                    function convertToVendor(key, vendor, value) {
                        angular.forEach(vendor.split(" "), function(key) {
                            css[key] = value;
                        });
                    }
                    var css = {};
                    angular.forEach(raw, function(value, key) {
                        if (!angular.isUndefined(value)) if ("left top right bottom width height x y min-width min-height max-width max-height".indexOf(key) >= 0) css[key] = value + "px"; else switch (key) {
                          case "transition":
                            convertToVendor(key, $mdConstant.CSS.TRANSITION, value);
                            break;

                          case "transform":
                            convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);
                            break;

                          case "transformOrigin":
                            convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);
                        }
                    });
                    return css;
                },
                toTransformCss: function(transform, addTransition, transition) {
                    var css = {};
                    angular.forEach($mdConstant.CSS.TRANSFORM.split(" "), function(key) {
                        css[key] = transform;
                    });
                    if (addTransition) {
                        transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";
                        css.transition = transition;
                    }
                    return css;
                },
                copyRect: function(source, destination) {
                    if (!source) return null;
                    destination = destination || {};
                    angular.forEach("left top right bottom width height".split(" "), function(key) {
                        destination[key] = Math.round(source[key]);
                    });
                    destination.width = destination.width || destination.right - destination.left;
                    destination.height = destination.height || destination.bottom - destination.top;
                    return destination;
                },
                clientRect: function(element) {
                    var bounds = angular.element(element)[0].getBoundingClientRect();
                    return function(rect) {
                        return rect && rect.width > 0 && rect.height > 0;
                    }(bounds) ? self.copyRect(bounds) : null;
                },
                centerPointFor: function(targetRect) {
                    return targetRect ? {
                        x: Math.round(targetRect.left + targetRect.width / 2),
                        y: Math.round(targetRect.top + targetRect.height / 2)
                    } : {
                        x: 0,
                        y: 0
                    };
                }
            };
        }
        angular.module("material.core").factory("$$mdAnimate", [ "$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss) {
            return function($mdUtil) {
                return AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss);
            };
        } ]);
    }();
    !function() {
        angular.version.minor >= 4 ? angular.module("material.core.animate", []) : function() {
            function camelCase(str) {
                return str.replace(/-[a-z]/g, function(str) {
                    return str.charAt(1).toUpperCase();
                });
            }
            var forEach = angular.forEach, WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance), PREFIX = WEBKIT ? "-webkit-" : "", TRANSITION_EVENTS = (WEBKIT ? "webkitTransitionEnd " : "") + "transitionend", ANIMATION_EVENTS = (WEBKIT ? "webkitAnimationEnd " : "") + "animationend", $$ForceReflowFactory = [ "$document", function($document) {
                return function() {
                    return $document[0].body.clientWidth + 1;
                };
            } ], $$rAFMutexFactory = [ "$$rAF", function($$rAF) {
                return function() {
                    var passed = !1;
                    $$rAF(function() {
                        passed = !0;
                    });
                    return function(fn) {
                        passed ? fn() : $$rAF(fn);
                    };
                };
            } ], $$AnimateRunnerFactory = [ "$q", "$$rAFMutex", function($q, $$rAFMutex) {
                function AnimateRunner(host) {
                    this.setHost(host);
                    this._doneCallbacks = [];
                    this._runInAnimationFrame = $$rAFMutex();
                    this._state = 0;
                }
                AnimateRunner.prototype = {
                    setHost: function(host) {
                        this.host = host || {};
                    },
                    done: function(fn) {
                        2 === this._state ? fn() : this._doneCallbacks.push(fn);
                    },
                    progress: angular.noop,
                    getPromise: function() {
                        if (!this.promise) {
                            var self = this;
                            this.promise = $q(function(resolve, reject) {
                                self.done(function(status) {
                                    !1 === status ? reject() : resolve();
                                });
                            });
                        }
                        return this.promise;
                    },
                    then: function(resolveHandler, rejectHandler) {
                        return this.getPromise().then(resolveHandler, rejectHandler);
                    },
                    catch: function(handler) {
                        return this.getPromise().catch(handler);
                    },
                    finally: function(handler) {
                        return this.getPromise().finally(handler);
                    },
                    pause: function() {
                        this.host.pause && this.host.pause();
                    },
                    resume: function() {
                        this.host.resume && this.host.resume();
                    },
                    end: function() {
                        this.host.end && this.host.end();
                        this._resolve(!0);
                    },
                    cancel: function() {
                        this.host.cancel && this.host.cancel();
                        this._resolve(!1);
                    },
                    complete: function(response) {
                        var self = this;
                        if (0 === self._state) {
                            self._state = 1;
                            self._runInAnimationFrame(function() {
                                self._resolve(response);
                            });
                        }
                    },
                    _resolve: function(response) {
                        if (2 !== this._state) {
                            forEach(this._doneCallbacks, function(fn) {
                                fn(response);
                            });
                            this._doneCallbacks.length = 0;
                            this._state = 2;
                        }
                    }
                };
                return AnimateRunner;
            } ];
            angular.module("material.core.animate", []).factory("$$forceReflow", $$ForceReflowFactory).factory("$$AnimateRunner", $$AnimateRunnerFactory).factory("$$rAFMutex", $$rAFMutexFactory).factory("$animateCss", [ "$window", "$$rAF", "$$AnimateRunner", "$$forceReflow", "$$jqLite", "$timeout", function($window, $$rAF, $$AnimateRunner, $$forceReflow, $$jqLite, $timeout) {
                function init(element, options) {
                    var temporaryStyles = [], node = getDomNode(element);
                    options.transitionStyle && temporaryStyles.push([ PREFIX + "transition", options.transitionStyle ]);
                    options.keyframeStyle && temporaryStyles.push([ PREFIX + "animation", options.keyframeStyle ]);
                    options.delay && temporaryStyles.push([ PREFIX + "transition-delay", options.delay + "s" ]);
                    options.duration && temporaryStyles.push([ PREFIX + "transition-duration", options.duration + "s" ]);
                    var hasCompleteStyles = options.keyframeStyle || options.to && (options.duration > 0 || options.transitionStyle), hasCompleteClasses = !!options.addClass || !!options.removeClass, hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;
                    blockTransition(element, !0);
                    applyAnimationFromStyles(element, options);
                    var events, eventFn, animationClosed = !1;
                    return {
                        close: $window.close,
                        start: function() {
                            function close() {
                                if (!animationClosed) {
                                    animationClosed = !0;
                                    events && eventFn && element.off(events, eventFn);
                                    applyClasses(element, options);
                                    applyAnimationStyles(element, options);
                                    forEach(temporaryStyles, function(entry) {
                                        node.style[camelCase(entry[0])] = "";
                                    });
                                    runner.complete(!0);
                                    return runner;
                                }
                            }
                            var runner = new $$AnimateRunner();
                            waitUntilQuiet(function() {
                                blockTransition(element, !1);
                                if (!hasCompleteAnimation) return close();
                                forEach(temporaryStyles, function(entry) {
                                    var key = entry[0], value = entry[1];
                                    node.style[camelCase(key)] = value;
                                });
                                applyClasses(element, options);
                                var timings = computeTimings(element);
                                if (0 === timings.duration) return close();
                                var moreStyles = [];
                                if (options.easing) {
                                    timings.transitionDuration && moreStyles.push([ PREFIX + "transition-timing-function", options.easing ]);
                                    timings.animationDuration && moreStyles.push([ PREFIX + "animation-timing-function", options.easing ]);
                                }
                                options.delay && timings.animationDelay && moreStyles.push([ PREFIX + "animation-delay", options.delay + "s" ]);
                                options.duration && timings.animationDuration && moreStyles.push([ PREFIX + "animation-duration", options.duration + "s" ]);
                                forEach(moreStyles, function(entry) {
                                    var key = entry[0], value = entry[1];
                                    node.style[camelCase(key)] = value;
                                    temporaryStyles.push(entry);
                                });
                                var maxDelay = timings.delay, maxDelayTime = 1e3 * maxDelay, maxDuration = timings.duration, maxDurationTime = 1e3 * maxDuration, startTime = Date.now();
                                events = [];
                                timings.transitionDuration && events.push(TRANSITION_EVENTS);
                                timings.animationDuration && events.push(ANIMATION_EVENTS);
                                events = events.join(" ");
                                eventFn = function(event) {
                                    event.stopPropagation();
                                    var ev = event.originalEvent || event, timeStamp = ev.timeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));
                                    Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration && close();
                                };
                                element.on(events, eventFn);
                                applyAnimationToStyles(element, options);
                                $timeout(close, maxDelayTime + 1.5 * maxDurationTime, !1);
                            });
                            return runner;
                        }
                    };
                }
                function applyClasses(element, options) {
                    if (options.addClass) {
                        $$jqLite.addClass(element, options.addClass);
                        options.addClass = null;
                    }
                    if (options.removeClass) {
                        $$jqLite.removeClass(element, options.removeClass);
                        options.removeClass = null;
                    }
                }
                function computeTimings(element) {
                    function prop(key) {
                        return WEBKIT ? "Webkit" + key.charAt(0).toUpperCase() + key.substr(1) : key;
                    }
                    var node = getDomNode(element), cs = $window.getComputedStyle(node), tdr = parseMaxTime(cs[prop("transitionDuration")]), adr = parseMaxTime(cs[prop("animationDuration")]), tdy = parseMaxTime(cs[prop("transitionDelay")]), ady = parseMaxTime(cs[prop("animationDelay")]);
                    adr *= parseInt(cs[prop("animationIterationCount")], 10) || 1;
                    return {
                        duration: Math.max(adr, tdr),
                        delay: Math.max(ady, tdy),
                        animationDuration: adr,
                        transitionDuration: tdr,
                        animationDelay: ady,
                        transitionDelay: tdy
                    };
                }
                function parseMaxTime(str) {
                    var maxValue = 0, values = (str || "").split(/\s*,\s*/);
                    forEach(values, function(value) {
                        "s" == value.charAt(value.length - 1) && (value = value.substring(0, value.length - 1));
                        value = parseFloat(value) || 0;
                        maxValue = maxValue ? Math.max(value, maxValue) : value;
                    });
                    return maxValue;
                }
                function waitUntilQuiet(callback) {
                    cancelLastRAFRequest && cancelLastRAFRequest();
                    rafWaitQueue.push(callback);
                    cancelLastRAFRequest = $$rAF(function() {
                        cancelLastRAFRequest = null;
                        for (var pageWidth = $$forceReflow(), i = 0; i < rafWaitQueue.length; i++) rafWaitQueue[i](pageWidth);
                        rafWaitQueue.length = 0;
                    });
                }
                function applyAnimationStyles(element, options) {
                    applyAnimationFromStyles(element, options);
                    applyAnimationToStyles(element, options);
                }
                function applyAnimationFromStyles(element, options) {
                    if (options.from) {
                        element.css(options.from);
                        options.from = null;
                    }
                }
                function applyAnimationToStyles(element, options) {
                    if (options.to) {
                        element.css(options.to);
                        options.to = null;
                    }
                }
                function getDomNode(element) {
                    for (var i = 0; i < element.length; i++) if (1 === element[i].nodeType) return element[i];
                }
                function blockTransition(element, bool) {
                    var node = getDomNode(element), key = camelCase(PREFIX + "transition-delay");
                    node.style[key] = bool ? "-9999s" : "";
                }
                var cancelLastRAFRequest, rafWaitQueue = [];
                return init;
            } ]);
        }();
    }();
    !function() {
        angular.module("material.components.autocomplete", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]);
    }();
    !function() {
        angular.module("material.components.backdrop", [ "material.core" ]).directive("mdBackdrop", [ "$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
            function postLink(scope, element, attrs) {
                var body = $window.getComputedStyle($document[0].body);
                if ("fixed" == body.position) {
                    var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));
                    element.css({
                        height: hViewport + "px"
                    });
                }
                $animate.pin && $animate.pin(element, $rootElement);
                $$rAF(function() {
                    var parent = element.parent()[0];
                    if (parent) {
                        "BODY" == parent.nodeName && element.css({
                            position: "fixed"
                        });
                        "static" == $window.getComputedStyle(parent).position && $log.warn(ERROR_CSS_POSITION);
                    }
                    $mdTheming.inherit(element, element.parent());
                });
            }
            var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";
            return {
                restrict: "E",
                link: postLink
            };
        } ]);
    }();
    !function() {
        function MdBottomSheetDirective($mdBottomSheet) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    scope.$on("$destroy", function() {
                        $mdBottomSheet.destroy();
                    });
                }
            };
        }
        function MdBottomSheetProvider($$interimElementProvider) {
            function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
                function onShow(scope, element, options, controller) {
                    element = $mdUtil.extractElementByName(element, "md-bottom-sheet");
                    backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");
                    options.clickOutsideToClose && backdrop.on("click", function() {
                        $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                    });
                    $mdTheming.inherit(backdrop, options.parent);
                    $animate.enter(backdrop, options.parent, null);
                    var bottomSheet = new BottomSheet(element, options.parent);
                    options.bottomSheet = bottomSheet;
                    $mdTheming.inherit(bottomSheet.element, options.parent);
                    options.disableParentScroll && (options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent));
                    return $animate.enter(bottomSheet.element, options.parent).then(function() {
                        ($mdUtil.findFocusTarget(element) || angular.element(element[0].querySelector("button") || element[0].querySelector("a") || element[0].querySelector("[ng-click]"))).focus();
                        if (options.escapeToClose) {
                            options.rootElementKeyupCallback = function(e) {
                                e.keyCode === $mdConstant.KEY_CODE.ESCAPE && $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                            };
                            $rootElement.on("keyup", options.rootElementKeyupCallback);
                        }
                    });
                }
                function onRemove(scope, element, options) {
                    var bottomSheet = options.bottomSheet;
                    $animate.leave(backdrop);
                    return $animate.leave(bottomSheet.element).then(function() {
                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }
                        bottomSheet.cleanup();
                    });
                }
                function BottomSheet(element, parent) {
                    function onDragStart(ev) {
                        element.css($mdConstant.CSS.TRANSITION_DURATION, "0ms");
                    }
                    function onDrag(ev) {
                        var transform = ev.pointer.distanceY;
                        transform < 5 && (transform = Math.max(-PADDING, transform / 2));
                        element.css($mdConstant.CSS.TRANSFORM, "translate3d(0," + (PADDING + transform) + "px,0)");
                    }
                    function onDragEnd(ev) {
                        if (ev.pointer.distanceY > 0 && (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {
                            var distanceRemaining = element.prop("offsetHeight") - ev.pointer.distanceY, transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * .75, 500);
                            element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + "ms");
                            $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                        } else {
                            element.css($mdConstant.CSS.TRANSITION_DURATION, "");
                            element.css($mdConstant.CSS.TRANSFORM, "");
                        }
                    }
                    var deregister = $mdGesture.register(parent, "drag", {
                        horizontal: !1
                    });
                    parent.on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                    return {
                        element: element,
                        cleanup: function() {
                            deregister();
                            parent.off("$md.dragstart", onDragStart);
                            parent.off("$md.drag", onDrag);
                            parent.off("$md.dragend", onDragEnd);
                        }
                    };
                }
                var backdrop;
                return {
                    themable: !0,
                    onShow: onShow,
                    onRemove: onRemove,
                    escapeToClose: !0,
                    clickOutsideToClose: !0,
                    disableParentScroll: !0
                };
            }
            var CLOSING_VELOCITY = .5, PADDING = 80;
            bottomSheetDefaults.$inject = [ "$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture" ];
            return $$interimElementProvider("$mdBottomSheet").setDefaults({
                methods: [ "disableParentScroll", "escapeToClose", "clickOutsideToClose" ],
                options: bottomSheetDefaults
            });
        }
        angular.module("material.components.bottomSheet", [ "material.core", "material.components.backdrop" ]).directive("mdBottomSheet", MdBottomSheetDirective).provider("$mdBottomSheet", MdBottomSheetProvider);
        MdBottomSheetDirective.$inject = [ "$mdBottomSheet" ];
        MdBottomSheetProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {
            function isAnchor(attr) {
                return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
            }
            function getTemplate(element, attr) {
                return isAnchor(attr) ? '<a class="md-button" ng-transclude></a>' : '<button class="md-button" type="' + (void 0 === attr.type ? "button" : attr.type) + '" ng-transclude></button>';
            }
            function postLink(scope, element, attr) {
                var node = element[0];
                $mdTheming(element);
                $mdButtonInkRipple.attach(scope, element);
                node.textContent.trim() || $mdAria.expect(element, "aria-label");
                isAnchor(attr) && angular.isDefined(attr.ngDisabled) && scope.$watch(attr.ngDisabled, function(isDisabled) {
                    element.attr("tabindex", isDisabled ? -1 : 0);
                });
                element.on("click", function(e) {
                    if (!0 === attr.disabled) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });
                scope.mouseActive = !1;
                element.on("mousedown", function() {
                    scope.mouseActive = !0;
                    $timeout(function() {
                        scope.mouseActive = !1;
                    }, 100);
                }).on("focus", function() {
                    !1 === scope.mouseActive && element.addClass("md-focused");
                }).on("blur", function(ev) {
                    element.removeClass("md-focused");
                });
            }
            return {
                restrict: "EA",
                replace: !0,
                transclude: !0,
                template: getTemplate,
                link: postLink
            };
        }
        angular.module("material.components.button", [ "material.core" ]).directive("mdButton", MdButtonDirective);
        MdButtonDirective.$inject = [ "$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout" ];
    }();
    !function() {
        function mdCardDirective($mdTheming) {
            return {
                restrict: "E",
                link: function($scope, $element) {
                    $mdTheming($element);
                }
            };
        }
        angular.module("material.components.card", [ "material.core" ]).directive("mdCard", mdCardDirective);
        mdCardDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {
            function compile(tElement, tAttrs) {
                tAttrs.type = "checkbox";
                tAttrs.tabindex = tAttrs.tabindex || "0";
                tElement.attr("role", tAttrs.type);
                tElement.on("click", function(event) {
                    this.hasAttribute("disabled") && event.stopImmediatePropagation();
                });
                return function(scope, element, attr, ngModelCtrl) {
                    function keypressHandler(ev) {
                        var keyCode = ev.which || ev.keyCode;
                        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {
                            ev.preventDefault();
                            element.hasClass("md-focused") || element.addClass("md-focused");
                            listener(ev);
                        }
                    }
                    function listener(ev) {
                        element[0].hasAttribute("disabled") || scope.$apply(function() {
                            var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;
                            ngModelCtrl.$setViewValue(viewValue, ev && ev.type);
                            ngModelCtrl.$render();
                        });
                    }
                    function render() {
                        ngModelCtrl.$viewValue ? element.addClass(CHECKED_CSS) : element.removeClass(CHECKED_CSS);
                    }
                    ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
                    $mdTheming(element);
                    attr.ngChecked && scope.$watch(scope.$eval.bind(scope, attr.ngChecked), ngModelCtrl.$setViewValue.bind(ngModelCtrl));
                    !function(expr, htmlAttr, valueOpts) {
                        attr[expr] && scope.$watch(attr[expr], function(val) {
                            valueOpts[val] && element.attr(htmlAttr, valueOpts[val]);
                        });
                    }("ngDisabled", "tabindex", {
                        true: "-1",
                        false: attr.tabindex
                    });
                    $mdAria.expectWithText(element, "aria-label");
                    inputDirective.link.pre(scope, {
                        on: angular.noop,
                        0: {}
                    }, attr, [ ngModelCtrl ]);
                    scope.mouseActive = !1;
                    element.on("click", listener).on("keypress", keypressHandler).on("mousedown", function() {
                        scope.mouseActive = !0;
                        $timeout(function() {
                            scope.mouseActive = !1;
                        }, 100);
                    }).on("focus", function() {
                        !1 === scope.mouseActive && element.addClass("md-focused");
                    }).on("blur", function() {
                        element.removeClass("md-focused");
                    });
                    ngModelCtrl.$render = render;
                };
            }
            inputDirective = inputDirective[0];
            var CHECKED_CSS = "md-checked";
            return {
                restrict: "E",
                transclude: !0,
                require: "?ngModel",
                priority: 210,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',
                compile: compile
            };
        }
        angular.module("material.components.checkbox", [ "material.core" ]).directive("mdCheckbox", MdCheckboxDirective);
        MdCheckboxDirective.$inject = [ "inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout" ];
    }();
    !function() {
        angular.module("material.components.chips", [ "material.core", "material.components.autocomplete" ]);
    }();
    !function() {
        function mdContentDirective($mdTheming) {
            function ContentController($scope, $element) {
                this.$scope = $scope;
                this.$element = $element;
            }
            return {
                restrict: "E",
                controller: [ "$scope", "$element", ContentController ],
                link: function(scope, element, attr) {
                    element[0];
                    $mdTheming(element);
                    scope.$broadcast("$mdContentLoaded", element);
                    iosScrollFix(element[0]);
                }
            };
        }
        function iosScrollFix(node) {
            angular.element(node).on("$md.pressdown", function(ev) {
                if ("t" === ev.pointer.type && !ev.$materialScrollFixed) {
                    ev.$materialScrollFixed = !0;
                    0 === node.scrollTop ? node.scrollTop = 1 : node.scrollHeight === node.scrollTop + node.offsetHeight && (node.scrollTop -= 1);
                }
            });
        }
        angular.module("material.components.content", [ "material.core" ]).directive("mdContent", mdContentDirective);
        mdContentDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        !function() {
            function calendarDirective() {
                return {
                    template: '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table><div class="md-calendar-scroll-mask"><md-virtual-repeat-container class="md-calendar-scroll-container" md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '"><table role="grid" tabindex="0" class="md-calendar" aria-readonly="true"><tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month md-month-offset="$index" class="md-calendar-month" md-start-index="ctrl.getSelectedMonthIndex()" md-item-size="' + TBODY_HEIGHT + '"></tbody></table></md-virtual-repeat-container></div>',
                    scope: {
                        minDate: "=mdMinDate",
                        maxDate: "=mdMaxDate",
                        dateFilter: "=mdDateFilter"
                    },
                    require: [ "ngModel", "mdCalendar" ],
                    controller: CalendarCtrl,
                    controllerAs: "ctrl",
                    bindToController: !0,
                    link: function(scope, element, attrs, controllers) {
                        var ngModelCtrl = controllers[0];
                        controllers[1].configureNgModel(ngModelCtrl);
                    }
                };
            }
            function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant, $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {
                $mdTheming($element);
                this.items = {
                    length: 2e3
                };
                if (this.maxDate && this.minDate) {
                    var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;
                    numMonths = Math.max(numMonths, 1);
                    numMonths += 1;
                    this.items.length = numMonths;
                }
                this.$animate = $animate;
                this.$q = $q;
                this.$mdInkRipple = $mdInkRipple;
                this.$mdUtil = $mdUtil;
                this.keyCode = $mdConstant.KEY_CODE;
                this.dateUtil = $$mdDateUtil;
                this.dateLocale = $mdDateLocale;
                this.$element = $element;
                this.$scope = $scope;
                this.calendarElement = $element[0].querySelector(".md-calendar");
                this.calendarScroller = $element[0].querySelector(".md-virtual-repeat-scroller");
                this.today = this.dateUtil.createDateAtMidnight();
                this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);
                if (this.minDate && this.minDate > this.firstRenderableDate) this.firstRenderableDate = this.minDate; else if (this.maxDate) {
                    this.items.length;
                    this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));
                }
                this.id = nextUniqueId++;
                this.ngModelCtrl = null;
                this.selectedDate = null;
                this.displayDate = null;
                this.focusDate = null;
                this.isInitialized = !1;
                this.isMonthTransitionInProgress = !1;
                $attrs.tabindex || $element.attr("tabindex", "-1");
                var self = this;
                this.cellClickHandler = function() {
                    var cellElement = this;
                    this.hasAttribute("data-timestamp") && $scope.$apply(function() {
                        var timestamp = Number(cellElement.getAttribute("data-timestamp"));
                        self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));
                    });
                };
                this.attachCalendarEventListeners();
            }
            angular.module("material.components.datepicker", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]).directive("mdCalendar", calendarDirective);
            var TBODY_HEIGHT = 265, TBODY_SINGLE_ROW_HEIGHT = 45, nextUniqueId = 0;
            CalendarCtrl.$inject = [ "$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil" ];
            CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;
                var self = this;
                ngModelCtrl.$render = function() {
                    self.changeSelectedDate(self.ngModelCtrl.$viewValue);
                };
            };
            CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {
                this.buildWeekHeader();
                this.hideVerticalScrollbar();
                this.displayDate = this.selectedDate || this.today;
                this.isInitialized = !0;
            };
            CalendarCtrl.prototype.hideVerticalScrollbar = function() {
                var element = this.$element[0], scrollMask = element.querySelector(".md-calendar-scroll-mask"), scroller = this.calendarScroller, headerWidth = element.querySelector(".md-calendar-day-header").clientWidth, scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;
                scrollMask.style.width = headerWidth + "px";
                scroller.style.width = headerWidth + scrollbarWidth + "px";
                scroller.style.paddingRight = scrollbarWidth + "px";
            };
            CalendarCtrl.prototype.attachCalendarEventListeners = function() {
                this.$element.on("keydown", angular.bind(this, this.handleKeyEvent));
            };
            CalendarCtrl.prototype.handleKeyEvent = function(event) {
                var self = this;
                this.$scope.$apply(function() {
                    if (event.which != self.keyCode.ESCAPE && event.which != self.keyCode.TAB) if (event.which !== self.keyCode.ENTER) {
                        var date = self.getFocusDateFromKeyEvent(event);
                        if (date) {
                            date = self.boundDateByMinAndMax(date);
                            event.preventDefault();
                            event.stopPropagation();
                            self.changeDisplayDate(date).then(function() {
                                self.focus(date);
                            });
                        }
                    } else {
                        self.setNgModelValue(self.displayDate);
                        event.preventDefault();
                    } else {
                        self.$scope.$emit("md-calendar-close");
                        event.which == self.keyCode.TAB && event.preventDefault();
                    }
                });
            };
            CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {
                var dateUtil = this.dateUtil, keyCode = this.keyCode;
                switch (event.which) {
                  case keyCode.RIGHT_ARROW:
                    return dateUtil.incrementDays(this.displayDate, 1);

                  case keyCode.LEFT_ARROW:
                    return dateUtil.incrementDays(this.displayDate, -1);

                  case keyCode.DOWN_ARROW:
                    return event.metaKey ? dateUtil.incrementMonths(this.displayDate, 1) : dateUtil.incrementDays(this.displayDate, 7);

                  case keyCode.UP_ARROW:
                    return event.metaKey ? dateUtil.incrementMonths(this.displayDate, -1) : dateUtil.incrementDays(this.displayDate, -7);

                  case keyCode.PAGE_DOWN:
                    return dateUtil.incrementMonths(this.displayDate, 1);

                  case keyCode.PAGE_UP:
                    return dateUtil.incrementMonths(this.displayDate, -1);

                  case keyCode.HOME:
                    return dateUtil.getFirstDateOfMonth(this.displayDate);

                  case keyCode.END:
                    return dateUtil.getLastDateOfMonth(this.displayDate);

                  default:
                    return null;
                }
            };
            CalendarCtrl.prototype.getSelectedMonthIndex = function() {
                return this.dateUtil.getMonthDistance(this.firstRenderableDate, this.selectedDate || this.today);
            };
            CalendarCtrl.prototype.scrollToMonth = function(date) {
                if (this.dateUtil.isValidDate(date)) {
                    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);
                    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;
                }
            };
            CalendarCtrl.prototype.setNgModelValue = function(date) {
                this.$scope.$emit("md-calendar-change", date);
                this.ngModelCtrl.$setViewValue(date);
                this.ngModelCtrl.$render();
            };
            CalendarCtrl.prototype.focus = function(opt_date) {
                var date = opt_date || this.selectedDate || this.today, previousFocus = this.calendarElement.querySelector(".md-focus");
                previousFocus && previousFocus.classList.remove("md-focus");
                var cellId = this.getDateId(date), cell = document.getElementById(cellId);
                if (cell) {
                    cell.classList.add("md-focus");
                    cell.focus();
                } else this.focusDate = date;
            };
            CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {
                var boundDate = date;
                this.minDate && date < this.minDate && (boundDate = new Date(this.minDate.getTime()));
                this.maxDate && date > this.maxDate && (boundDate = new Date(this.maxDate.getTime()));
                return boundDate;
            };
            CalendarCtrl.prototype.changeSelectedDate = function(date) {
                var self = this, previousSelectedDate = this.selectedDate;
                this.selectedDate = date;
                this.changeDisplayDate(date).then(function() {
                    if (previousSelectedDate) {
                        var prevDateCell = document.getElementById(self.getDateId(previousSelectedDate));
                        if (prevDateCell) {
                            prevDateCell.classList.remove("md-calendar-selected-date");
                            prevDateCell.setAttribute("aria-selected", "false");
                        }
                    }
                    if (date) {
                        var dateCell = document.getElementById(self.getDateId(date));
                        if (dateCell) {
                            dateCell.classList.add("md-calendar-selected-date");
                            dateCell.setAttribute("aria-selected", "true");
                        }
                    }
                });
            };
            CalendarCtrl.prototype.changeDisplayDate = function(date) {
                if (!this.isInitialized) {
                    this.buildInitialCalendarDisplay();
                    return this.$q.when();
                }
                if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) return this.$q.when();
                this.isMonthTransitionInProgress = !0;
                var animationPromise = this.animateDateChange(date);
                this.displayDate = date;
                var self = this;
                animationPromise.then(function() {
                    self.isMonthTransitionInProgress = !1;
                });
                return animationPromise;
            };
            CalendarCtrl.prototype.animateDateChange = function(date) {
                this.scrollToMonth(date);
                return this.$q.when();
            };
            CalendarCtrl.prototype.buildWeekHeader = function() {
                for (var firstDayOfWeek = this.dateLocale.firstDayOfWeek, shortDays = this.dateLocale.shortDays, row = document.createElement("tr"), i = 0; i < 7; i++) {
                    var th = document.createElement("th");
                    th.textContent = shortDays[(i + firstDayOfWeek) % 7];
                    row.appendChild(th);
                }
                this.$element.find("thead").append(row);
            };
            CalendarCtrl.prototype.getDateId = function(date) {
                return [ "md", this.id, date.getFullYear(), date.getMonth(), date.getDate() ].join("-");
            };
        }();
    }();
    !function() {
        !function() {
            function mdCalendarMonthDirective() {
                return {
                    require: [ "^^mdCalendar", "mdCalendarMonth" ],
                    scope: {
                        offset: "=mdMonthOffset"
                    },
                    controller: CalendarMonthCtrl,
                    controllerAs: "mdMonthCtrl",
                    bindToController: !0,
                    link: function(scope, element, attrs, controllers) {
                        var calendarCtrl = controllers[0], monthCtrl = controllers[1];
                        monthCtrl.calendarCtrl = calendarCtrl;
                        monthCtrl.generateContent();
                        scope.$watch(function() {
                            return monthCtrl.offset;
                        }, function(offset, oldOffset) {
                            offset != oldOffset && monthCtrl.generateContent();
                        });
                    }
                };
            }
            function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {
                this.dateUtil = $$mdDateUtil;
                this.dateLocale = $mdDateLocale;
                this.$element = $element;
                this.calendarCtrl = null;
                this.offset;
                this.focusAfterAppend = null;
            }
            angular.module("material.components.datepicker").directive("mdCalendarMonth", mdCalendarMonthDirective);
            CalendarMonthCtrl.$inject = [ "$element", "$$mdDateUtil", "$mdDateLocale" ];
            CalendarMonthCtrl.prototype.generateContent = function() {
                var calendarCtrl = this.calendarCtrl, date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);
                this.$element.empty();
                this.$element.append(this.buildCalendarForMonth(date));
                if (this.focusAfterAppend) {
                    this.focusAfterAppend.classList.add("md-focus");
                    this.focusAfterAppend.focus();
                    this.focusAfterAppend = null;
                }
            };
            CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {
                var calendarCtrl = this.calendarCtrl, cell = document.createElement("td");
                cell.tabIndex = -1;
                cell.classList.add("md-calendar-date");
                cell.setAttribute("role", "gridcell");
                if (opt_date) {
                    cell.setAttribute("tabindex", "-1");
                    cell.setAttribute("aria-label", this.dateLocale.longDateFormatter(opt_date));
                    cell.id = calendarCtrl.getDateId(opt_date);
                    cell.setAttribute("data-timestamp", opt_date.getTime());
                    this.dateUtil.isSameDay(opt_date, calendarCtrl.today) && cell.classList.add("md-calendar-date-today");
                    if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) && this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {
                        cell.classList.add("md-calendar-selected-date");
                        cell.setAttribute("aria-selected", "true");
                    }
                    var cellText = this.dateLocale.dates[opt_date.getDate()];
                    if (this.isDateEnabled(opt_date)) {
                        var selectionIndicator = document.createElement("span");
                        cell.appendChild(selectionIndicator);
                        selectionIndicator.classList.add("md-calendar-date-selection-indicator");
                        selectionIndicator.textContent = cellText;
                        cell.addEventListener("click", calendarCtrl.cellClickHandler);
                        calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate) && (this.focusAfterAppend = cell);
                    } else {
                        cell.classList.add("md-calendar-date-disabled");
                        cell.textContent = cellText;
                    }
                }
                return cell;
            };
            CalendarMonthCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date, this.calendarCtrl.minDate, this.calendarCtrl.maxDate) && (!angular.isFunction(this.calendarCtrl.dateFilter) || this.calendarCtrl.dateFilter(opt_date));
            };
            CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {
                var row = document.createElement("tr");
                row.setAttribute("role", "row");
                row.setAttribute("aria-label", this.dateLocale.weekNumberFormatter(rowNumber));
                return row;
            };
            CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {
                var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date(), firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date), firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth), numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date), monthBody = document.createDocumentFragment(), rowNumber = 1, row = this.buildDateRow(rowNumber);
                monthBody.appendChild(row);
                var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1, blankCellOffset = 0, monthLabelCell = document.createElement("td");
                monthLabelCell.classList.add("md-calendar-month-label");
                this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate && monthLabelCell.classList.add("md-calendar-month-label-disabled");
                monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);
                if (firstDayOfTheWeek <= 2) {
                    monthLabelCell.setAttribute("colspan", "7");
                    var monthLabelRow = this.buildDateRow();
                    monthLabelRow.appendChild(monthLabelCell);
                    monthBody.insertBefore(monthLabelRow, row);
                    if (isFinalMonth) return monthBody;
                } else {
                    blankCellOffset = 2;
                    monthLabelCell.setAttribute("colspan", "2");
                    row.appendChild(monthLabelCell);
                }
                for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) row.appendChild(this.buildDateCell());
                for (var dayOfWeek = firstDayOfTheWeek, iterationDate = firstDayOfMonth, d = 1; d <= numberOfDaysInMonth; d++) {
                    if (7 === dayOfWeek) {
                        if (isFinalMonth) return monthBody;
                        dayOfWeek = 0;
                        rowNumber++;
                        row = this.buildDateRow(rowNumber);
                        monthBody.appendChild(row);
                    }
                    iterationDate.setDate(d);
                    var cell = this.buildDateCell(iterationDate);
                    row.appendChild(cell);
                    dayOfWeek++;
                }
                for (;row.childNodes.length < 7; ) row.appendChild(this.buildDateCell());
                for (;monthBody.childNodes.length < 6; ) {
                    for (var whitespaceRow = this.buildDateRow(), i = 0; i < 7; i++) whitespaceRow.appendChild(this.buildDateCell());
                    monthBody.appendChild(whitespaceRow);
                }
                return monthBody;
            };
            CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {
                return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7;
            };
        }();
    }();
    !function() {
        !function() {
            angular.module("material.components.datepicker").config([ "$provide", function($provide) {
                function DateLocaleProvider() {
                    this.months = null;
                    this.shortMonths = null;
                    this.days = null;
                    this.shortDays = null;
                    this.dates = null;
                    this.firstDayOfWeek = 0;
                    this.formatDate = null;
                    this.parseDate = null;
                    this.monthHeaderFormatter = null;
                    this.weekNumberFormatter = null;
                    this.longDateFormatter = null;
                    this.msgCalendar = "";
                    this.msgOpenCalendar = "";
                }
                DateLocaleProvider.prototype.$get = function($locale) {
                    function defaultFormatDate(date) {
                        if (!date) return "";
                        var localeTime = date.toLocaleTimeString(), formatDate = date;
                        0 != date.getHours() || -1 === localeTime.indexOf("11:") && -1 === localeTime.indexOf("23:") || (formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0));
                        return formatDate.toLocaleDateString();
                    }
                    function defaultParseDate(dateString) {
                        return new Date(dateString);
                    }
                    function defaultIsDateComplete(dateString) {
                        dateString = dateString.trim();
                        return /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/.test(dateString);
                    }
                    function defaultMonthHeaderFormatter(date) {
                        return service.shortMonths[date.getMonth()] + " " + date.getFullYear();
                    }
                    function defaultWeekNumberFormatter(number) {
                        return "Week " + number;
                    }
                    function defaultLongDateFormatter(date) {
                        return [ service.days[date.getDay()], service.months[date.getMonth()], service.dates[date.getDate()], date.getFullYear() ].join(" ");
                    }
                    for (var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {
                        return day[0];
                    }), defaultDates = Array(32), i = 1; i <= 31; i++) defaultDates[i] = i;
                    var service = {
                        months: this.months || $locale.DATETIME_FORMATS.MONTH,
                        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,
                        days: this.days || $locale.DATETIME_FORMATS.DAY,
                        shortDays: this.shortDays || defaultShortDays,
                        dates: this.dates || defaultDates,
                        firstDayOfWeek: this.firstDayOfWeek || 0,
                        formatDate: this.formatDate || defaultFormatDate,
                        parseDate: this.parseDate || defaultParseDate,
                        isDateComplete: this.isDateComplete || defaultIsDateComplete,
                        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,
                        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,
                        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,
                        msgCalendar: this.msgCalendar || "Calendar",
                        msgOpenCalendar: this.msgOpenCalendar || "Open calendar"
                    };
                    return service;
                };
                DateLocaleProvider.prototype.$get.$inject = [ "$locale" ];
                $provide.provider("$mdDateLocale", new DateLocaleProvider());
            } ]);
        }();
    }();
    !function() {
        !function() {
            function datePickerDirective() {
                return {
                    template: '<md-button class="md-datepicker-button md-icon-button" type="button" tabindex="-1" aria-hidden="true" ng-click="ctrl.openCalendarPane($event)"><md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon></md-button><div class="md-datepicker-input-container" ng-class="{\'md-datepicker-focused\': ctrl.isFocused}"><input class="md-datepicker-input" aria-haspopup="true" ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)"><md-button type="button" md-no-ink class="md-datepicker-triangle-button md-icon-button" ng-click="ctrl.openCalendarPane($event)" aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}"><div class="md-datepicker-expand-triangle"></div></md-button></div><div class="md-datepicker-calendar-pane md-whiteframe-z1"><div class="md-datepicker-input-mask"><div class="md-datepicker-input-mask-opaque"></div></div><div class="md-datepicker-calendar"><md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"md-date-filter="ctrl.dateFilter"ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen"></md-calendar></div></div>',
                    require: [ "ngModel", "mdDatepicker", "?^mdInputContainer" ],
                    scope: {
                        minDate: "=mdMinDate",
                        maxDate: "=mdMaxDate",
                        placeholder: "@mdPlaceholder",
                        dateFilter: "=mdDateFilter"
                    },
                    controller: DatePickerCtrl,
                    controllerAs: "ctrl",
                    bindToController: !0,
                    link: function(scope, element, attr, controllers) {
                        var ngModelCtrl = controllers[0], mdDatePickerCtrl = controllers[1];
                        if (controllers[2]) throw Error("md-datepicker should not be placed inside md-input-container.");
                        mdDatePickerCtrl.configureNgModel(ngModelCtrl);
                    }
                };
            }
            function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window, $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {
                this.$compile = $compile;
                this.$timeout = $timeout;
                this.$window = $window;
                this.dateLocale = $mdDateLocale;
                this.dateUtil = $$mdDateUtil;
                this.$mdConstant = $mdConstant;
                this.$mdUtil = $mdUtil;
                this.$$rAF = $$rAF;
                this.documentElement = angular.element(document.documentElement);
                this.ngModelCtrl = null;
                this.inputElement = $element[0].querySelector("input");
                this.ngInputElement = angular.element(this.inputElement);
                this.inputContainer = $element[0].querySelector(".md-datepicker-input-container");
                this.calendarPane = $element[0].querySelector(".md-datepicker-calendar-pane");
                this.calendarButton = $element[0].querySelector(".md-datepicker-button");
                this.inputMask = $element[0].querySelector(".md-datepicker-input-mask-opaque");
                this.$element = $element;
                this.$attrs = $attrs;
                this.$scope = $scope;
                this.date = null;
                this.isFocused = !1;
                this.isDisabled;
                this.setDisabled($element[0].disabled || angular.isString($attrs.disabled));
                this.isCalendarOpen = !1;
                this.calendarPaneOpenedFrom = null;
                this.calendarPane.id = "md-date-pane" + $mdUtil.nextUid();
                $mdTheming($element);
                this.bodyClickHandler = angular.bind(this, this.handleBodyClick);
                this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);
                $attrs.tabindex || $element.attr("tabindex", "-1");
                this.installPropertyInterceptors();
                this.attachChangeListeners();
                this.attachInteractionListeners();
                var self = this;
                $scope.$on("$destroy", function() {
                    self.detachCalendarPane();
                });
            }
            angular.module("material.components.datepicker").directive("mdDatepicker", datePickerDirective);
            DatePickerCtrl.$inject = [ "$scope", "$element", "$attrs", "$compile", "$timeout", "$window", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF" ];
            DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;
                var self = this;
                ngModelCtrl.$render = function() {
                    var value = self.ngModelCtrl.$viewValue;
                    if (value && !(value instanceof Date)) throw Error("The ng-model for md-datepicker must be a Date instance. Currently the model is a: " + typeof value);
                    self.date = value;
                    self.inputElement.value = self.dateLocale.formatDate(value);
                    self.resizeInputElement();
                    self.updateErrorState();
                };
            };
            DatePickerCtrl.prototype.attachChangeListeners = function() {
                var self = this;
                self.$scope.$on("md-calendar-change", function(event, date) {
                    self.ngModelCtrl.$setViewValue(date);
                    self.date = date;
                    self.inputElement.value = self.dateLocale.formatDate(date);
                    self.closeCalendarPane();
                    self.resizeInputElement();
                    self.updateErrorState();
                });
                self.ngInputElement.on("input", angular.bind(self, self.resizeInputElement));
                self.ngInputElement.on("input", self.$mdUtil.debounce(self.handleInputEvent, 500, self));
            };
            DatePickerCtrl.prototype.attachInteractionListeners = function() {
                var self = this, $scope = this.$scope, keyCodes = this.$mdConstant.KEY_CODE;
                self.ngInputElement.on("keydown", function(event) {
                    if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {
                        self.openCalendarPane(event);
                        $scope.$digest();
                    }
                });
                $scope.$on("md-calendar-close", function() {
                    self.closeCalendarPane();
                });
            };
            DatePickerCtrl.prototype.installPropertyInterceptors = function() {
                var self = this;
                if (this.$attrs.ngDisabled) {
                    var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;
                    scope && scope.$watch(this.$attrs.ngDisabled, function(isDisabled) {
                        self.setDisabled(isDisabled);
                    });
                }
                Object.defineProperty(this, "placeholder", {
                    get: function() {
                        return self.inputElement.placeholder;
                    },
                    set: function(value) {
                        self.inputElement.placeholder = value || "";
                    }
                });
            };
            DatePickerCtrl.prototype.setDisabled = function(isDisabled) {
                this.isDisabled = isDisabled;
                this.inputElement.disabled = isDisabled;
                this.calendarButton.disabled = isDisabled;
            };
            DatePickerCtrl.prototype.updateErrorState = function(opt_date) {
                var date = opt_date || this.date;
                this.clearErrorState();
                if (this.dateUtil.isValidDate(date)) {
                    this.dateUtil.isValidDate(this.minDate) && this.ngModelCtrl.$setValidity("mindate", date >= this.minDate);
                    this.dateUtil.isValidDate(this.maxDate) && this.ngModelCtrl.$setValidity("maxdate", date <= this.maxDate);
                    angular.isFunction(this.dateFilter) && this.ngModelCtrl.$setValidity("filtered", this.dateFilter(date));
                } else this.ngModelCtrl.$setValidity("valid", null == date);
                this.ngModelCtrl.$valid || this.inputContainer.classList.add("md-datepicker-invalid");
            };
            DatePickerCtrl.prototype.clearErrorState = function() {
                this.inputContainer.classList.remove("md-datepicker-invalid");
                [ "mindate", "maxdate", "filtered", "valid" ].forEach(function(field) {
                    this.ngModelCtrl.$setValidity(field, !0);
                }, this);
            };
            DatePickerCtrl.prototype.resizeInputElement = function() {
                this.inputElement.size = this.inputElement.value.length + 3;
            };
            DatePickerCtrl.prototype.handleInputEvent = function() {
                var inputString = this.inputElement.value, parsedDate = inputString ? this.dateLocale.parseDate(inputString) : null;
                this.dateUtil.setDateTimeToMidnight(parsedDate);
                if ("" == inputString || this.dateUtil.isValidDate(parsedDate) && this.dateLocale.isDateComplete(inputString) && this.isDateEnabled(parsedDate)) {
                    this.ngModelCtrl.$setViewValue(parsedDate);
                    this.date = parsedDate;
                }
                this.updateErrorState(parsedDate);
            };
            DatePickerCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date, this.minDate, this.maxDate) && (!angular.isFunction(this.dateFilter) || this.dateFilter(opt_date));
            };
            DatePickerCtrl.prototype.attachCalendarPane = function() {
                var calendarPane = this.calendarPane;
                calendarPane.style.transform = "";
                this.$element.addClass("md-datepicker-open");
                var elementRect = this.inputContainer.getBoundingClientRect(), bodyRect = document.body.getBoundingClientRect(), paneTop = elementRect.top - bodyRect.top, paneLeft = elementRect.left - bodyRect.left, viewportTop = bodyRect.top < 0 && 0 == document.body.scrollTop ? -bodyRect.top : document.body.scrollTop, viewportLeft = bodyRect.left < 0 && 0 == document.body.scrollLeft ? -bodyRect.left : document.body.scrollLeft, viewportBottom = viewportTop + this.$window.innerHeight, viewportRight = viewportLeft + this.$window.innerWidth;
                if (paneLeft + 360 > viewportRight) {
                    if (viewportRight - 360 > 0) paneLeft = viewportRight - 360; else {
                        paneLeft = viewportLeft;
                        var scale = this.$window.innerWidth / 360;
                        calendarPane.style.transform = "scale(" + scale + ")";
                    }
                    calendarPane.classList.add("md-datepicker-pos-adjusted");
                }
                if (paneTop + 368 > viewportBottom && viewportBottom - 368 > viewportTop) {
                    paneTop = viewportBottom - 368;
                    calendarPane.classList.add("md-datepicker-pos-adjusted");
                }
                calendarPane.style.left = paneLeft + "px";
                calendarPane.style.top = paneTop + "px";
                document.body.appendChild(calendarPane);
                this.inputMask.style.left = elementRect.width + "px";
                this.$$rAF(function() {
                    calendarPane.classList.add("md-pane-open");
                });
            };
            DatePickerCtrl.prototype.detachCalendarPane = function() {
                this.$element.removeClass("md-datepicker-open");
                this.calendarPane.classList.remove("md-pane-open");
                this.calendarPane.classList.remove("md-datepicker-pos-adjusted");
                this.calendarPane.parentNode && this.calendarPane.parentNode.removeChild(this.calendarPane);
            };
            DatePickerCtrl.prototype.openCalendarPane = function(event) {
                if (!this.isCalendarOpen && !this.isDisabled) {
                    this.isCalendarOpen = !0;
                    this.calendarPaneOpenedFrom = event.target;
                    this.$mdUtil.disableScrollAround(this.calendarPane);
                    this.attachCalendarPane();
                    this.focusCalendar();
                    var self = this;
                    this.$mdUtil.nextTick(function() {
                        self.documentElement.on("click touchstart", self.bodyClickHandler);
                    }, !1);
                    window.addEventListener("resize", this.windowResizeHandler);
                }
            };
            DatePickerCtrl.prototype.closeCalendarPane = function() {
                if (this.isCalendarOpen) {
                    this.isCalendarOpen = !1;
                    this.detachCalendarPane();
                    this.calendarPaneOpenedFrom.focus();
                    this.calendarPaneOpenedFrom = null;
                    this.$mdUtil.enableScrolling();
                    this.documentElement.off("click touchstart", this.bodyClickHandler);
                    window.removeEventListener("resize", this.windowResizeHandler);
                }
            };
            DatePickerCtrl.prototype.getCalendarCtrl = function() {
                return angular.element(this.calendarPane.querySelector("md-calendar")).controller("mdCalendar");
            };
            DatePickerCtrl.prototype.focusCalendar = function() {
                var self = this;
                this.$mdUtil.nextTick(function() {
                    self.getCalendarCtrl().focus();
                }, !1);
            };
            DatePickerCtrl.prototype.setFocused = function(isFocused) {
                this.isFocused = isFocused;
            };
            DatePickerCtrl.prototype.handleBodyClick = function(event) {
                if (this.isCalendarOpen) {
                    this.$mdUtil.getClosest(event.target, "md-calendar") || this.closeCalendarPane();
                    this.$scope.$digest();
                }
            };
        }();
    }();
    !function() {
        !function() {
            angular.module("material.components.datepicker").factory("$$mdDateUtil", function() {
                function getFirstDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), 1);
                }
                function getNumberOfDaysInMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
                }
                function getDateInNextMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 1);
                }
                function getDateInPreviousMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() - 1, 1);
                }
                function isSameMonthAndYear(d1, d2) {
                    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();
                }
                function isSameDay(d1, d2) {
                    return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);
                }
                function isInNextMonth(startDate, endDate) {
                    return isSameMonthAndYear(getDateInNextMonth(startDate), endDate);
                }
                function isInPreviousMonth(startDate, endDate) {
                    return isSameMonthAndYear(endDate, getDateInPreviousMonth(startDate));
                }
                function getDateMidpoint(d1, d2) {
                    return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);
                }
                function getWeekOfMonth(date) {
                    var firstDayOfMonth = getFirstDateOfMonth(date);
                    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);
                }
                function incrementDays(date, numberOfDays) {
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);
                }
                function incrementMonths(date, numberOfMonths) {
                    var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1), numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);
                    numberOfDaysInMonth < date.getDate() ? dateInTargetMonth.setDate(numberOfDaysInMonth) : dateInTargetMonth.setDate(date.getDate());
                    return dateInTargetMonth;
                }
                function getMonthDistance(start, end) {
                    return 12 * (end.getFullYear() - start.getFullYear()) + (end.getMonth() - start.getMonth());
                }
                function getLastDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));
                }
                function isValidDate(date) {
                    return null != date && date.getTime && !isNaN(date.getTime());
                }
                function setDateTimeToMidnight(date) {
                    isValidDate(date) && date.setHours(0, 0, 0, 0);
                }
                function createDateAtMidnight(opt_value) {
                    var date;
                    date = angular.isUndefined(opt_value) ? new Date() : new Date(opt_value);
                    setDateTimeToMidnight(date);
                    return date;
                }
                function isDateWithinRange(date, minDate, maxDate) {
                    return (!angular.isDate(minDate) || minDate <= date) && (!angular.isDate(maxDate) || maxDate >= date);
                }
                return {
                    getFirstDateOfMonth: getFirstDateOfMonth,
                    getNumberOfDaysInMonth: getNumberOfDaysInMonth,
                    getDateInNextMonth: getDateInNextMonth,
                    getDateInPreviousMonth: getDateInPreviousMonth,
                    isInNextMonth: isInNextMonth,
                    isInPreviousMonth: isInPreviousMonth,
                    getDateMidpoint: getDateMidpoint,
                    isSameMonthAndYear: isSameMonthAndYear,
                    getWeekOfMonth: getWeekOfMonth,
                    incrementDays: incrementDays,
                    incrementMonths: incrementMonths,
                    getLastDateOfMonth: getLastDateOfMonth,
                    isSameDay: isSameDay,
                    getMonthDistance: getMonthDistance,
                    isValidDate: isValidDate,
                    setDateTimeToMidnight: setDateTimeToMidnight,
                    createDateAtMidnight: createDateAtMidnight,
                    isDateWithinRange: isDateWithinRange
                };
            });
        }();
    }();
    !function() {
        function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    $$rAF(function() {
                        function addOverflowClass() {
                            element.toggleClass("md-content-overflow", content.scrollHeight > content.clientHeight);
                        }
                        var images, content = element[0].querySelector("md-dialog-content");
                        if (content) {
                            images = content.getElementsByTagName("img");
                            addOverflowClass();
                            angular.element(images).on("load", addOverflowClass);
                        }
                        scope.$on("$destroy", function() {
                            $mdDialog.destroy(element);
                        });
                    });
                }
            };
        }
        function MdDialogProvider($$interimElementProvider) {
            function advancedDialogOptions($mdDialog, $mdTheming) {
                return {
                    template: [ '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">', '  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">', '    <h2 class="md-title">{{ dialog.title }}</h2>', '    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ', '        ng-bind-html="::dialog.mdHtmlContent"></div>', '    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">', "      <p>{{::dialog.mdTextContent}}</p>", "    </div>", "  </md-dialog-content>", "  <md-dialog-actions>", '    <md-button ng-if="dialog.$type == \'confirm\'"               ng-click="dialog.abort()" class="md-primary">', "      {{ dialog.cancel }}", "    </md-button>", '    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">', "      {{ dialog.ok }}", "    </md-button>", "  </md-dialog-actions>", "</md-dialog>" ].join("").replace(/\s\s+/g, ""),
                    controller: function() {
                        this.hide = function() {
                            $mdDialog.hide(!0);
                        };
                        this.abort = function() {
                            $mdDialog.cancel();
                        };
                    },
                    controllerAs: "dialog",
                    bindToController: !0,
                    theme: $mdTheming.defaultTheme()
                };
            }
            function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement, $log, $injector) {
                function beforeShow(scope, element, options, controller) {
                    if (controller) {
                        controller.mdHtmlContent = controller.htmlContent || options.htmlContent || "";
                        controller.mdTextContent = controller.textContent || options.textContent || controller.content || options.content || "";
                        if (controller.mdHtmlContent && !$injector.has("$sanitize")) throw Error("The ngSanitize module must be loaded in order to use htmlContent.");
                        if (controller.mdHtmlContent && controller.mdTextContent) throw Error("md-dialog cannot have both `htmlContent` and `textContent`");
                    }
                }
                function onShow(scope, element, options, controller) {
                    function warnDeprecatedActions() {
                        element[0].querySelectorAll(".md-actions").length > 0 && $log.warn("Using a class of md-actions is deprected, please use <md-dialog-actions>.");
                    }
                    function focusOnOpen() {
                        if (options.focusOnOpen) {
                            ($mdUtil.findFocusTarget(element) || function() {
                                var closeButton = element[0].querySelector(".dialog-close");
                                if (!closeButton) {
                                    var actionButtons = element[0].querySelectorAll(".md-actions button, md-dialog-actions button");
                                    closeButton = actionButtons[actionButtons.length - 1];
                                }
                                return angular.element(closeButton);
                            }()).focus();
                        }
                    }
                    angular.element($document[0].body).addClass("md-dialog-is-showing");
                    captureParentAndFromToElements(options);
                    configureAria(element.find("md-dialog"), options);
                    showBackdrop(scope, element, options);
                    return dialogPopIn(element, options).then(function() {
                        activateListeners(element, options);
                        lockScreenReader(element, options);
                        warnDeprecatedActions();
                        focusOnOpen();
                    });
                }
                function onRemove(scope, element, options) {
                    function detachAndClean() {
                        angular.element($document[0].body).removeClass("md-dialog-is-showing");
                        element.remove();
                        options.$destroy || options.origin.focus();
                    }
                    options.deactivateListeners();
                    options.unlockScreenReader();
                    options.hideBackdrop(options.$destroy);
                    topFocusTrap && topFocusTrap.parentNode && topFocusTrap.parentNode.removeChild(topFocusTrap);
                    bottomFocusTrap && bottomFocusTrap.parentNode && bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);
                    return options.$destroy ? detachAndClean() : function() {
                        return dialogPopOut(element, options);
                    }().then(detachAndClean);
                }
                function captureParentAndFromToElements(options) {
                    function getBoundingClientRect(element, orig) {
                        var source = angular.element(element || {});
                        if (source && source.length) {
                            var bounds = {
                                top: 0,
                                left: 0,
                                height: 0,
                                width: 0
                            }, hasFn = angular.isFunction(source[0].getBoundingClientRect);
                            return angular.extend(orig || {}, {
                                element: hasFn ? source : undefined,
                                bounds: hasFn ? source[0].getBoundingClientRect() : angular.extend({}, bounds, source[0]),
                                focus: angular.bind(source, source.focus)
                            });
                        }
                    }
                    function getDomElement(element, defaultElement) {
                        if (angular.isString(element)) {
                            var simpleSelector = element, container = $document[0].querySelectorAll(simpleSelector);
                            element = container.length ? container[0] : null;
                        }
                        return angular.element(element || defaultElement);
                    }
                    options.origin = angular.extend({
                        element: null,
                        bounds: null,
                        focus: angular.noop
                    }, options.origin || {});
                    options.parent = getDomElement(options.parent, $rootElement);
                    options.closeTo = getBoundingClientRect(getDomElement(options.closeTo));
                    options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));
                    options.targetEvent && (options.origin = getBoundingClientRect(options.targetEvent.target, options.origin));
                }
                function activateListeners(element, options) {
                    var window = angular.element($window), onWindowResize = $mdUtil.debounce(function() {
                        stretchDialogContainerToViewport(element, options);
                    }, 60), removeListeners = [], smartClose = function() {
                        var closeFn = "alert" == options.$type ? $mdDialog.hide : $mdDialog.cancel;
                        $mdUtil.nextTick(closeFn, !0);
                    };
                    if (options.escapeToClose) {
                        var target = options.parent, keyHandlerFn = function(ev) {
                            if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                                ev.stopPropagation();
                                ev.preventDefault();
                                smartClose();
                            }
                        };
                        element.on("keydown", keyHandlerFn);
                        target.on("keydown", keyHandlerFn);
                        window.on("resize", onWindowResize);
                        removeListeners.push(function() {
                            element.off("keydown", keyHandlerFn);
                            target.off("keydown", keyHandlerFn);
                            window.off("resize", onWindowResize);
                        });
                    }
                    if (options.clickOutsideToClose) {
                        var sourceElem, target = element, mousedownHandler = function(ev) {
                            sourceElem = ev.target;
                        }, mouseupHandler = function(ev) {
                            if (sourceElem === target[0] && ev.target === target[0]) {
                                ev.stopPropagation();
                                ev.preventDefault();
                                smartClose();
                            }
                        };
                        target.on("mousedown", mousedownHandler);
                        target.on("mouseup", mouseupHandler);
                        removeListeners.push(function() {
                            target.off("mousedown", mousedownHandler);
                            target.off("mouseup", mouseupHandler);
                        });
                    }
                    options.deactivateListeners = function() {
                        removeListeners.forEach(function(removeFn) {
                            removeFn();
                        });
                        options.deactivateListeners = null;
                    };
                }
                function showBackdrop(scope, element, options) {
                    options.disableParentScroll && (options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent));
                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");
                        $animate.enter(options.backdrop, options.parent);
                    }
                    options.hideBackdrop = function($destroy) {
                        options.backdrop && ($destroy ? options.backdrop.remove() : $animate.leave(options.backdrop));
                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }
                        options.hideBackdrop = null;
                    };
                }
                function configureAria(element, options) {
                    var role = "alert" === options.$type ? "alertdialog" : "dialog", dialogContent = element.find("md-dialog-content"), dialogId = element.attr("id") || "dialog_" + $mdUtil.nextUid();
                    element.attr({
                        role: role,
                        tabIndex: "-1"
                    });
                    0 === dialogContent.length && (dialogContent = element);
                    dialogContent.attr("id", dialogId);
                    element.attr("aria-describedby", dialogId);
                    options.ariaLabel ? $mdAria.expect(element, "aria-label", options.ariaLabel) : $mdAria.expectAsync(element, "aria-label", function() {
                        var words = dialogContent.text().split(/\s+/);
                        words.length > 3 && (words = words.slice(0, 3).concat("..."));
                        return words.join(" ");
                    });
                    topFocusTrap = document.createElement("div");
                    topFocusTrap.classList.add("md-dialog-focus-trap");
                    topFocusTrap.tabIndex = 0;
                    bottomFocusTrap = topFocusTrap.cloneNode(!1);
                    var focusHandler = angular.bind(element, element.focus);
                    topFocusTrap.addEventListener("focus", focusHandler);
                    bottomFocusTrap.addEventListener("focus", focusHandler);
                    element[0].parentNode.insertBefore(topFocusTrap, element[0]);
                    element.append(bottomFocusTrap);
                }
                function lockScreenReader(element, options) {
                    function walkDOM(element) {
                        for (;element.parentNode; ) {
                            if (element === document.body) return;
                            for (var children = element.parentNode.children, i = 0; i < children.length; i++) element === children[i] || isNodeOneOf(children[i], [ "SCRIPT", "STYLE" ]) || children[i].setAttribute("aria-hidden", isHidden);
                            walkDOM(element = element.parentNode);
                        }
                    }
                    var isHidden = !0;
                    walkDOM(element[0]);
                    options.unlockScreenReader = function() {
                        isHidden = !1;
                        walkDOM(element[0]);
                        options.unlockScreenReader = null;
                    };
                }
                function stretchDialogContainerToViewport(container, options) {
                    var isFixed = "fixed" == $window.getComputedStyle($document[0].body).position, backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null, height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;
                    container.css({
                        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + "px",
                        height: height ? height + "px" : "100%"
                    });
                    return container;
                }
                function dialogPopIn(container, options) {
                    options.parent.append(container);
                    stretchDialogContainerToViewport(container, options);
                    var dialogEl = container.find("md-dialog"), animator = $mdUtil.dom.animator, buildTranslateToOrigin = animator.calculateZoomToOrigin, translateOptions = {
                        transitionInClass: "md-transition-in",
                        transitionOutClass: "md-transition-out"
                    }, from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin)), to = animator.toTransformCss("");
                    options.fullscreen && dialogEl.addClass("md-dialog-fullscreen");
                    return animator.translate3d(dialogEl, from, to, translateOptions).then(function(animateReversal) {
                        options.reverseAnimate = function() {
                            delete options.reverseAnimate;
                            if (options.closeTo) {
                                translateOptions = {
                                    transitionInClass: "md-transition-out",
                                    transitionOutClass: "md-transition-in"
                                };
                                from = to;
                                to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));
                                return animator.translate3d(dialogEl, from, to, translateOptions);
                            }
                            return animateReversal(animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin)));
                        };
                        return !0;
                    });
                }
                function dialogPopOut(container, options) {
                    return options.reverseAnimate();
                }
                function isNodeOneOf(elem, nodeTypeArray) {
                    if (-1 !== nodeTypeArray.indexOf(elem.nodeName)) return !0;
                }
                return {
                    hasBackdrop: !0,
                    isolateScope: !0,
                    onShow: onShow,
                    onShowing: beforeShow,
                    onRemove: onRemove,
                    clickOutsideToClose: !1,
                    escapeToClose: !0,
                    targetEvent: null,
                    closeTo: null,
                    openFrom: null,
                    focusOnOpen: !0,
                    disableParentScroll: !0,
                    autoWrap: !0,
                    fullscreen: !1,
                    transformTemplate: function(template, options) {
                        return '<div class="md-dialog-container">' + function(template) {
                            return options.autoWrap && !/<\/md-dialog>/g.test(template) ? "<md-dialog>" + (template || "") + "</md-dialog>" : template || "";
                        }(template) + "</div>";
                    }
                };
            }
            var topFocusTrap, bottomFocusTrap;
            advancedDialogOptions.$inject = [ "$mdDialog", "$mdTheming" ];
            dialogDefaultOptions.$inject = [ "$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement", "$log", "$injector" ];
            return $$interimElementProvider("$mdDialog").setDefaults({
                methods: [ "disableParentScroll", "hasBackdrop", "clickOutsideToClose", "escapeToClose", "targetEvent", "closeTo", "openFrom", "parent", "fullscreen" ],
                options: dialogDefaultOptions
            }).addPreset("alert", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "theme", "css" ],
                options: advancedDialogOptions
            }).addPreset("confirm", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "cancel", "theme", "css" ],
                options: advancedDialogOptions
            });
        }
        angular.module("material.components.dialog", [ "material.core", "material.components.backdrop" ]).directive("mdDialog", MdDialogDirective).provider("$mdDialog", MdDialogProvider);
        MdDialogDirective.$inject = [ "$$rAF", "$mdTheming", "$mdDialog" ];
        MdDialogProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function MdDividerDirective($mdTheming) {
            return {
                restrict: "E",
                link: $mdTheming
            };
        }
        angular.module("material.components.divider", [ "material.core" ]).directive("mdDivider", MdDividerDirective);
        MdDividerDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        !function() {
            function MdFabActionsDirective() {
                return {
                    restrict: "E",
                    require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ],
                    compile: function(element, attributes) {
                        var children = element.children(), hasNgRepeat = !1;
                        angular.forEach([ "", "data-", "x-" ], function(prefix) {
                            hasNgRepeat = hasNgRepeat || !!children.attr(prefix + "ng-repeat");
                        });
                        hasNgRepeat ? children.addClass("md-fab-action-item") : children.wrap('<div class="md-fab-action-item">');
                    }
                };
            }
            angular.module("material.components.fabActions", [ "material.core" ]).directive("mdFabActions", MdFabActionsDirective);
        }();
    }();
    !function() {
        !function() {
            function FabController($scope, $element, $animate, $mdUtil, $mdConstant, $timeout) {
                function parseEvents(event) {
                    "click" == event.type && handleItemClick(event);
                    "focusout" != event.type || closeTimeout || (closeTimeout = $timeout(function() {
                        vm.close();
                    }, 100, !1));
                    if ("focusin" == event.type && closeTimeout) {
                        $timeout.cancel(closeTimeout);
                        closeTimeout = null;
                    }
                }
                function resetActionIndex() {
                    vm.currentActionIndex = -1;
                }
                function fireInitialAnimations() {
                    if ($element[0].scrollHeight > 0) $animate.addClass($element, "md-animations-ready").then(function() {
                        $element.removeClass("md-animations-waiting");
                    }); else if (initialAnimationAttempts < 10) {
                        $timeout(fireInitialAnimations, 100);
                        initialAnimationAttempts += 1;
                    }
                }
                function enableKeyboard() {
                    $element.on("keydown", keyPressed);
                    $mdUtil.nextTick(function() {
                        angular.element(document).on("click touchend", checkForOutsideClick);
                    });
                }
                function disableKeyboard() {
                    $element.off("keydown", keyPressed);
                    angular.element(document).off("click touchend", checkForOutsideClick);
                }
                function checkForOutsideClick(event) {
                    if (event.target) {
                        var closestTrigger = $mdUtil.getClosest(event.target, "md-fab-trigger"), closestActions = $mdUtil.getClosest(event.target, "md-fab-actions");
                        closestTrigger || closestActions || vm.close();
                    }
                }
                function keyPressed(event) {
                    switch (event.which) {
                      case $mdConstant.KEY_CODE.ESCAPE:
                        vm.close();
                        event.preventDefault();
                        return !1;

                      case $mdConstant.KEY_CODE.LEFT_ARROW:
                        doKeyLeft(event);
                        return !1;

                      case $mdConstant.KEY_CODE.UP_ARROW:
                        doKeyUp(event);
                        return !1;

                      case $mdConstant.KEY_CODE.RIGHT_ARROW:
                        doKeyRight(event);
                        return !1;

                      case $mdConstant.KEY_CODE.DOWN_ARROW:
                        doKeyDown(event);
                        return !1;
                    }
                }
                function doActionPrev(event) {
                    focusAction(event, -1);
                }
                function doActionNext(event) {
                    focusAction(event, 1);
                }
                function focusAction(event, direction) {
                    var actions = resetActionTabIndexes();
                    vm.currentActionIndex = vm.currentActionIndex + direction;
                    vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);
                    vm.currentActionIndex = Math.max(0, vm.currentActionIndex);
                    var focusElement = angular.element(actions[vm.currentActionIndex]).children()[0];
                    angular.element(focusElement).attr("tabindex", 0);
                    focusElement.focus();
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
                function resetActionTabIndexes() {
                    var actions = getActionsElement()[0].querySelectorAll(".md-fab-action-item");
                    angular.forEach(actions, function(action) {
                        angular.element(angular.element(action).children()[0]).attr("tabindex", -1);
                    });
                    return actions;
                }
                function doKeyLeft(event) {
                    "left" === vm.direction ? doActionNext(event) : doActionPrev(event);
                }
                function doKeyUp(event) {
                    "down" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function doKeyRight(event) {
                    "left" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function doKeyDown(event) {
                    "up" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function isTrigger(element) {
                    return $mdUtil.getClosest(element, "md-fab-trigger");
                }
                function isAction(element) {
                    return $mdUtil.getClosest(element, "md-fab-actions");
                }
                function handleItemClick(event) {
                    isTrigger(event.target) && vm.toggle();
                    isAction(event.target) && vm.close();
                }
                function getTriggerElement() {
                    return $element.find("md-fab-trigger");
                }
                function getActionsElement() {
                    return $element.find("md-fab-actions");
                }
                var vm = this;
                vm.open = function() {
                    $scope.$evalAsync("vm.isOpen = true");
                };
                vm.close = function() {
                    $scope.$evalAsync("vm.isOpen = false");
                    $element.find("md-fab-trigger")[0].focus();
                };
                vm.toggle = function() {
                    $scope.$evalAsync("vm.isOpen = !vm.isOpen");
                };
                !function() {
                    vm.direction = vm.direction || "down";
                    vm.isOpen = vm.isOpen || !1;
                    resetActionIndex();
                    $element.addClass("md-animations-waiting");
                }();
                !function() {
                    var eventTypes = [ "click", "focusin", "focusout" ];
                    angular.forEach(eventTypes, function(eventType) {
                        $element.on(eventType, parseEvents);
                    });
                    $scope.$on("$destroy", function() {
                        angular.forEach(eventTypes, function(eventType) {
                            $element.off(eventType, parseEvents);
                        });
                        disableKeyboard();
                    });
                }();
                !function() {
                    $scope.$watch("vm.direction", function(newDir, oldDir) {
                        $animate.removeClass($element, "md-" + oldDir);
                        $animate.addClass($element, "md-" + newDir);
                        resetActionIndex();
                    });
                    var trigger, actions;
                    $scope.$watch("vm.isOpen", function(isOpen) {
                        resetActionIndex();
                        if (!trigger || !actions) {
                            trigger = getTriggerElement();
                            actions = getActionsElement();
                        }
                        isOpen ? enableKeyboard() : disableKeyboard();
                        var toAdd = isOpen ? "md-is-open" : "", toRemove = isOpen ? "" : "md-is-open";
                        trigger.attr("aria-haspopup", !0);
                        trigger.attr("aria-expanded", isOpen);
                        actions.attr("aria-hidden", !isOpen);
                        $animate.setClass($element, toAdd, toRemove);
                    });
                }();
                var initialAnimationAttempts = 0;
                fireInitialAnimations();
                var closeTimeout;
            }
            angular.module("material.components.fabShared", [ "material.core" ]).controller("FabController", FabController);
            FabController.$inject = [ "$scope", "$element", "$animate", "$mdUtil", "$mdConstant", "$timeout" ];
        }();
    }();
    !function() {
        !function() {
            function MdFabSpeedDialDirective() {
                function FabSpeedDialLink(scope, element) {
                    element.prepend('<div class="md-css-variables"></div>');
                }
                return {
                    restrict: "E",
                    scope: {
                        direction: "@?mdDirection",
                        isOpen: "=?mdOpen"
                    },
                    bindToController: !0,
                    controller: "FabController",
                    controllerAs: "vm",
                    link: FabSpeedDialLink
                };
            }
            function MdFabSpeedDialFlingAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, !1);
                }
                function runAnimation(element) {
                    if (!element.hasClass("md-animations-waiting") || element.hasClass("md-animations-ready")) {
                        var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), triggerElement = el.querySelector("md-fab-trigger"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                        angular.forEach(items, function(item, index) {
                            var styles = item.style;
                            styles.transform = styles.webkitTransform = "";
                            styles.transitionDelay = "";
                            styles.opacity = 1;
                            styles.zIndex = items.length - index + startZIndex;
                        });
                        triggerElement.style.zIndex = startZIndex + items.length + 1;
                        ctrl.isOpen || angular.forEach(items, function(item, index) {
                            var newPosition, axis, styles = item.style, triggerItemHeightOffset = (triggerElement.clientHeight - item.clientHeight) / 2, triggerItemWidthOffset = (triggerElement.clientWidth - item.clientWidth) / 2;
                            switch (ctrl.direction) {
                              case "up":
                                newPosition = item.scrollHeight * (index + 1) + triggerItemHeightOffset;
                                axis = "Y";
                                break;

                              case "down":
                                newPosition = -(item.scrollHeight * (index + 1) + triggerItemHeightOffset);
                                axis = "Y";
                                break;

                              case "left":
                                newPosition = item.scrollWidth * (index + 1) + triggerItemWidthOffset;
                                axis = "X";
                                break;

                              case "right":
                                newPosition = -(item.scrollWidth * (index + 1) + triggerItemWidthOffset);
                                axis = "X";
                            }
                            var newTranslate = "translate" + axis + "(" + newPosition + "px)";
                            styles.transform = styles.webkitTransform = newTranslate;
                        });
                    }
                }
                return {
                    addClass: function(element, className, done) {
                        if (element.hasClass("md-fling")) {
                            runAnimation(element);
                            delayDone(done);
                        } else done();
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                };
            }
            function MdFabSpeedDialScaleAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, !1);
                }
                function runAnimation(element) {
                    var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                    angular.forEach(items, function(item, index) {
                        var styles = item.style, offsetDelay = index * delay;
                        styles.opacity = ctrl.isOpen ? 1 : 0;
                        styles.transform = styles.webkitTransform = ctrl.isOpen ? "scale(1)" : "scale(0.1)";
                        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : items.length - offsetDelay) + "ms";
                        styles.zIndex = items.length - index + startZIndex;
                    });
                }
                var delay = 65;
                return {
                    addClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                };
            }
            var cssAnimationDuration = 300;
            angular.module("material.components.fabSpeedDial", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabSpeedDial", MdFabSpeedDialDirective).animation(".md-fling", MdFabSpeedDialFlingAnimation).animation(".md-scale", MdFabSpeedDialScaleAnimation).service("mdFabSpeedDialFlingAnimation", MdFabSpeedDialFlingAnimation).service("mdFabSpeedDialScaleAnimation", MdFabSpeedDialScaleAnimation);
            MdFabSpeedDialFlingAnimation.$inject = [ "$timeout" ];
            MdFabSpeedDialScaleAnimation.$inject = [ "$timeout" ];
        }();
    }();
    !function() {
        !function() {
            function MdFabToolbarDirective() {
                function link(scope, element, attributes) {
                    element.addClass("md-fab-toolbar");
                    element.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>');
                }
                return {
                    restrict: "E",
                    transclude: !0,
                    template: '<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',
                    scope: {
                        direction: "@?mdDirection",
                        isOpen: "=?mdOpen"
                    },
                    bindToController: !0,
                    controller: "FabController",
                    controllerAs: "vm",
                    link: link
                };
            }
            function MdFabToolbarAnimation() {
                function runAnimation(element, className, done) {
                    if (className) {
                        var el = element[0], ctrl = element.controller("mdFabToolbar"), backgroundElement = el.querySelector(".md-fab-toolbar-background"), triggerElement = el.querySelector("md-fab-trigger button"), toolbarElement = el.querySelector("md-toolbar"), iconElement = el.querySelector("md-fab-trigger button md-icon"), actions = element.find("md-fab-actions").children();
                        if (triggerElement && backgroundElement) {
                            var color = window.getComputedStyle(triggerElement).getPropertyValue("background-color"), width = el.offsetWidth, scale = (el.offsetHeight, 
                            width / triggerElement.offsetWidth * 2);
                            backgroundElement.style.backgroundColor = color;
                            backgroundElement.style.borderRadius = width + "px";
                            if (ctrl.isOpen) {
                                toolbarElement.style.pointerEvents = "initial";
                                backgroundElement.style.width = triggerElement.offsetWidth + "px";
                                backgroundElement.style.height = triggerElement.offsetHeight + "px";
                                backgroundElement.style.transform = "scale(" + scale + ")";
                                backgroundElement.style.transitionDelay = "0ms";
                                iconElement && (iconElement.style.transitionDelay = ".3s");
                                angular.forEach(actions, function(action, index) {
                                    action.style.transitionDelay = 25 * (actions.length - index) + "ms";
                                });
                            } else {
                                toolbarElement.style.pointerEvents = "none";
                                backgroundElement.style.transform = "scale(1)";
                                backgroundElement.style.top = "0";
                                if (element.hasClass("md-right")) {
                                    backgroundElement.style.left = "0";
                                    backgroundElement.style.right = null;
                                }
                                if (element.hasClass("md-left")) {
                                    backgroundElement.style.right = "0";
                                    backgroundElement.style.left = null;
                                }
                                backgroundElement.style.transitionDelay = "200ms";
                                iconElement && (iconElement.style.transitionDelay = "0ms");
                                angular.forEach(actions, function(action, index) {
                                    action.style.transitionDelay = 200 + 25 * index + "ms";
                                });
                            }
                        }
                    }
                }
                return {
                    addClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    }
                };
            }
            angular.module("material.components.fabToolbar", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabToolbar", MdFabToolbarDirective).animation(".md-fab-toolbar", MdFabToolbarAnimation).service("mdFabToolbarAnimation", MdFabToolbarAnimation);
        }();
    }();
    !function() {
        !function() {
            function MdFabTriggerDirective() {
                return {
                    restrict: "E",
                    require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ]
                };
            }
            angular.module("material.components.fabTrigger", [ "material.core" ]).directive("mdFabTrigger", MdFabTriggerDirective);
        }();
    }();
    !function() {
        function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {
            function postLink(scope, element, attrs, ctrl) {
                function unwatchMedia() {
                    ctrl.layoutDelegate = angular.noop;
                    unwatchAttrs();
                    for (var mediaName in $mdConstant.MEDIA) $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).removeListener(invalidateLayout);
                }
                function layoutIfMediaMatch(mediaName) {
                    null == mediaName ? ctrl.invalidateLayout() : $mdMedia(mediaName) && ctrl.invalidateLayout();
                }
                function layoutDelegate(tilesInvalidated) {
                    var tiles = getTileElements(), props = {
                        tileSpans: getTileSpans(tiles),
                        colCount: getColumnCount(),
                        rowMode: getRowMode(),
                        rowHeight: getRowHeight(),
                        gutter: getGutter()
                    };
                    if (tilesInvalidated || !angular.equals(props, lastLayoutProps)) {
                        var performance = $mdGridLayout(props.colCount, props.tileSpans, tiles).map(function(tilePositions, rowCount) {
                            return {
                                grid: {
                                    element: element,
                                    style: getGridStyle(props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                },
                                tiles: tilePositions.map(function(ps, i) {
                                    return {
                                        element: angular.element(tiles[i]),
                                        style: getTileStyle(ps.position, ps.spans, props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                    };
                                })
                            };
                        }).reflow().performance();
                        scope.mdOnLayout({
                            $event: {
                                performance: performance
                            }
                        });
                        lastLayoutProps = props;
                    }
                }
                function expr(exprStr) {
                    return startSymbol + exprStr + endSymbol;
                }
                function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
                    var hShare = 1 / colCount * 100, hGutterShare = (colCount - 1) / colCount, hUnit = UNIT({
                        share: hShare,
                        gutterShare: hGutterShare,
                        gutter: gutter
                    }), style = {
                        left: POSITION({
                            unit: hUnit,
                            offset: position.col,
                            gutter: gutter
                        }),
                        width: DIMENSION({
                            unit: hUnit,
                            span: spans.col,
                            gutter: gutter
                        }),
                        paddingTop: "",
                        marginTop: "",
                        top: "",
                        height: ""
                    };
                    switch (rowMode) {
                      case "fixed":
                        style.top = POSITION({
                            unit: rowHeight,
                            offset: position.row,
                            gutter: gutter
                        });
                        style.height = DIMENSION({
                            unit: rowHeight,
                            span: spans.row,
                            gutter: gutter
                        });
                        break;

                      case "ratio":
                        var vShare = hShare / rowHeight, vUnit = UNIT({
                            share: vShare,
                            gutterShare: hGutterShare,
                            gutter: gutter
                        });
                        style.paddingTop = DIMENSION({
                            unit: vUnit,
                            span: spans.row,
                            gutter: gutter
                        });
                        style.marginTop = POSITION({
                            unit: vUnit,
                            offset: position.row,
                            gutter: gutter
                        });
                        break;

                      case "fit":
                        var vGutterShare = (rowCount - 1) / rowCount, vShare = 1 / rowCount * 100, vUnit = UNIT({
                            share: vShare,
                            gutterShare: vGutterShare,
                            gutter: gutter
                        });
                        style.top = POSITION({
                            unit: vUnit,
                            offset: position.row,
                            gutter: gutter
                        });
                        style.height = DIMENSION({
                            unit: vUnit,
                            span: spans.row,
                            gutter: gutter
                        });
                    }
                    return style;
                }
                function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {
                    var style = {};
                    switch (rowMode) {
                      case "fixed":
                        style.height = DIMENSION({
                            unit: rowHeight,
                            span: rowCount,
                            gutter: gutter
                        });
                        style.paddingBottom = "";
                        break;

                      case "ratio":
                        var hGutterShare = 1 === colCount ? 0 : (colCount - 1) / colCount, hShare = 1 / colCount * 100, vShare = hShare * (1 / rowHeight), vUnit = UNIT({
                            share: vShare,
                            gutterShare: hGutterShare,
                            gutter: gutter
                        });
                        style.height = "";
                        style.paddingBottom = DIMENSION({
                            unit: vUnit,
                            span: rowCount,
                            gutter: gutter
                        });
                    }
                    return style;
                }
                function getTileElements() {
                    return [].filter.call(element.children(), function(ele) {
                        return "MD-GRID-TILE" == ele.tagName && !ele.$$mdDestroyed;
                    });
                }
                function getTileSpans(tileElements) {
                    return [].map.call(tileElements, function(ele) {
                        var ctrl = angular.element(ele).controller("mdGridTile");
                        return {
                            row: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-rowspan"), 10) || 1,
                            col: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-colspan"), 10) || 1
                        };
                    });
                }
                function getColumnCount() {
                    var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, "md-cols"), 10);
                    if (isNaN(colCount)) throw "md-grid-list: md-cols attribute was not found, or contained a non-numeric value";
                    return colCount;
                }
                function getGutter() {
                    return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, "md-gutter") || 1);
                }
                function getRowHeight() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                    switch (getRowMode()) {
                      case "fixed":
                        return applyDefaultUnit(rowHeight);

                      case "ratio":
                        var whRatio = rowHeight.split(":");
                        return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);

                      case "fit":
                        return 0;
                    }
                }
                function getRowMode() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                    return "fit" == rowHeight ? "fit" : -1 !== rowHeight.indexOf(":") ? "ratio" : "fixed";
                }
                function applyDefaultUnit(val) {
                    return /\D$/.test(val) ? val : val + "px";
                }
                element.attr("role", "list");
                ctrl.layoutDelegate = layoutDelegate;
                var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout), unwatchAttrs = function() {
                    for (var mediaName in $mdConstant.MEDIA) {
                        $mdMedia(mediaName);
                        $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).addListener(invalidateLayout);
                    }
                    return $mdMedia.watchResponsiveAttributes([ "md-cols", "md-row-height", "md-gutter" ], attrs, layoutIfMediaMatch);
                }();
                scope.$on("$destroy", unwatchMedia);
                var lastLayoutProps, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), UNIT = $interpolate(expr("share") + "% - (" + expr("gutter") + " * " + expr("gutterShare") + ")"), POSITION = $interpolate("calc((" + expr("unit") + " + " + expr("gutter") + ") * " + expr("offset") + ")"), DIMENSION = $interpolate("calc((" + expr("unit") + ") * " + expr("span") + " + (" + expr("span") + " - 1) * " + expr("gutter") + ")");
            }
            return {
                restrict: "E",
                controller: GridListController,
                scope: {
                    mdOnLayout: "&"
                },
                link: postLink
            };
        }
        function GridListController($mdUtil) {
            this.layoutInvalidated = !1;
            this.tilesInvalidated = !1;
            this.$timeout_ = $mdUtil.nextTick;
            this.layoutDelegate = angular.noop;
        }
        function GridLayoutFactory($mdUtil) {
            function GridLayout(colCount, tileSpans) {
                var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;
                layoutTime = $mdUtil.time(function() {
                    layoutInfo = calculateGridFor(colCount, tileSpans);
                });
                return self = {
                    layoutInfo: function() {
                        return layoutInfo;
                    },
                    map: function(updateFn) {
                        mapTime = $mdUtil.time(function() {
                            var info = self.layoutInfo();
                            gridStyles = updateFn(info.positioning, info.rowCount);
                        });
                        return self;
                    },
                    reflow: function(animatorFn) {
                        reflowTime = $mdUtil.time(function() {
                            (animatorFn || defaultAnimator)(gridStyles.grid, gridStyles.tiles);
                        });
                        return self;
                    },
                    performance: function() {
                        return {
                            tileCount: tileSpans.length,
                            layoutTime: layoutTime,
                            mapTime: mapTime,
                            reflowTime: reflowTime,
                            totalTime: layoutTime + mapTime + reflowTime
                        };
                    }
                };
            }
            function GridTileAnimator(grid, tiles) {
                grid.element.css(grid.style);
                tiles.forEach(function(t) {
                    t.element.css(t.style);
                });
            }
            function calculateGridFor(colCount, tileSpans) {
                function reserveSpace(spans, i) {
                    if (spans.col > colCount) throw "md-grid-list: Tile at position " + i + " has a colspan (" + spans.col + ") that exceeds the column count (" + colCount + ")";
                    for (var start = 0, end = 0; end - start < spans.col; ) if (curCol >= colCount) nextRow(); else {
                        start = spaceTracker.indexOf(0, curCol);
                        if (-1 !== start && -1 !== (end = findEnd(start + 1))) curCol = end + 1; else {
                            start = end = 0;
                            nextRow();
                        }
                    }
                    adjustRow(start, spans.col, spans.row);
                    curCol = start + spans.col;
                    return {
                        col: start,
                        row: curRow
                    };
                }
                function nextRow() {
                    curCol = 0;
                    curRow++;
                    adjustRow(0, colCount, -1);
                }
                function adjustRow(from, cols, by) {
                    for (var i = from; i < from + cols; i++) spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
                }
                function findEnd(start) {
                    var i;
                    for (i = start; i < spaceTracker.length; i++) if (0 !== spaceTracker[i]) return i;
                    if (i === spaceTracker.length) return i;
                }
                var curCol = 0, curRow = 0, spaceTracker = function() {
                    for (var tracker = [], i = 0; i < colCount; i++) tracker.push(0);
                    return tracker;
                }();
                return {
                    positioning: tileSpans.map(function(spans, i) {
                        return {
                            spans: spans,
                            position: reserveSpace(spans, i)
                        };
                    }),
                    rowCount: curRow + Math.max.apply(Math, spaceTracker)
                };
            }
            var defaultAnimator = GridTileAnimator;
            GridLayout.animateWith = function(customAnimator) {
                defaultAnimator = angular.isFunction(customAnimator) ? customAnimator : GridTileAnimator;
            };
            return GridLayout;
        }
        function GridTileDirective($mdMedia) {
            function postLink(scope, element, attrs, gridCtrl) {
                element.attr("role", "listitem");
                var unwatchAttrs = $mdMedia.watchResponsiveAttributes([ "md-colspan", "md-rowspan" ], attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));
                gridCtrl.invalidateTiles();
                scope.$on("$destroy", function() {
                    element[0].$$mdDestroyed = !0;
                    unwatchAttrs();
                    gridCtrl.invalidateLayout();
                });
                angular.isDefined(scope.$parent.$index) && scope.$watch(function() {
                    return scope.$parent.$index;
                }, function(newIdx, oldIdx) {
                    newIdx !== oldIdx && gridCtrl.invalidateTiles();
                });
            }
            return {
                restrict: "E",
                require: "^mdGridList",
                template: "<figure ng-transclude></figure>",
                transclude: !0,
                scope: {},
                controller: [ "$attrs", function($attrs) {
                    this.$attrs = $attrs;
                } ],
                link: postLink
            };
        }
        function GridTileCaptionDirective() {
            return {
                template: "<figcaption ng-transclude></figcaption>",
                transclude: !0
            };
        }
        angular.module("material.components.gridList", [ "material.core" ]).directive("mdGridList", GridListDirective).directive("mdGridTile", GridTileDirective).directive("mdGridTileFooter", GridTileCaptionDirective).directive("mdGridTileHeader", GridTileCaptionDirective).factory("$mdGridLayout", GridLayoutFactory);
        GridListDirective.$inject = [ "$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia" ];
        GridListController.$inject = [ "$mdUtil" ];
        GridListController.prototype = {
            invalidateTiles: function() {
                this.tilesInvalidated = !0;
                this.invalidateLayout();
            },
            invalidateLayout: function() {
                if (!this.layoutInvalidated) {
                    this.layoutInvalidated = !0;
                    this.$timeout_(angular.bind(this, this.layout));
                }
            },
            layout: function() {
                try {
                    this.layoutDelegate(this.tilesInvalidated);
                } finally {
                    this.layoutInvalidated = !1;
                    this.tilesInvalidated = !1;
                }
            }
        };
        GridLayoutFactory.$inject = [ "$mdUtil" ];
        GridTileDirective.$inject = [ "$mdMedia" ];
    }();
    !function() {
        angular.module("material.components.icon", [ "material.core" ]);
    }();
    !function() {
        function mdInputContainerDirective($mdTheming, $parse) {
            function postLink(scope, element, attr) {
                $mdTheming(element);
                element.find("md-icon").length && element.addClass("md-has-icon");
            }
            function ContainerCtrl($scope, $element, $attrs, $animate) {
                var self = this;
                self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);
                self.delegateClick = function() {
                    self.input.focus();
                };
                self.element = $element;
                self.setFocused = function(isFocused) {
                    $element.toggleClass("md-input-focused", !!isFocused);
                };
                self.setHasValue = function(hasValue) {
                    $element.toggleClass("md-input-has-value", !!hasValue);
                };
                self.setHasPlaceholder = function(hasPlaceholder) {
                    $element.toggleClass("md-input-has-placeholder", !!hasPlaceholder);
                };
                self.setInvalid = function(isInvalid) {
                    isInvalid ? $animate.addClass($element, "md-input-invalid") : $animate.removeClass($element, "md-input-invalid");
                };
                $scope.$watch(function() {
                    return self.label && self.input;
                }, function(hasLabelAndInput) {
                    hasLabelAndInput && !self.label.attr("for") && self.label.attr("for", self.input.attr("id"));
                });
            }
            ContainerCtrl.$inject = [ "$scope", "$element", "$attrs", "$animate" ];
            return {
                restrict: "E",
                link: postLink,
                controller: ContainerCtrl
            };
        }
        function labelDirective() {
            return {
                restrict: "E",
                require: "^?mdInputContainer",
                link: function(scope, element, attr, containerCtrl) {
                    if (containerCtrl && !attr.mdNoFloat && !element.hasClass("md-container-ignore")) {
                        containerCtrl.label = element;
                        scope.$on("$destroy", function() {
                            containerCtrl.label = null;
                        });
                    }
                }
            };
        }
        function inputTextareaDirective($mdUtil, $window, $mdAria) {
            function postLink(scope, element, attr, ctrls) {
                function ngModelPipelineCheckValue(arg) {
                    containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
                    return arg;
                }
                function inputCheckValue() {
                    containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);
                }
                var containerCtrl = ctrls[0], hasNgModel = !!ctrls[1], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel(), isReadonly = angular.isDefined(attr.readonly);
                if (containerCtrl) {
                    if (containerCtrl.input) throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");
                    containerCtrl.input = element;
                    var errorsSpacer = angular.element('<div class="md-errors-spacer">');
                    element.after(errorsSpacer);
                    containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                    element.addClass("md-input");
                    element.attr("id") || element.attr("id", "input_" + $mdUtil.nextUid());
                    "textarea" === element[0].tagName.toLowerCase() && function() {
                        function pipelineListener(value) {
                            onChangeTextarea();
                            return value;
                        }
                        function growTextarea() {
                            container.style.height = container.offsetHeight + "px";
                            element.addClass("md-no-flex");
                            if (isNaN(min_rows)) {
                                node.style.height = "auto";
                                node.scrollTop = 0;
                                var height = getHeight();
                                height && (node.style.height = height + "px");
                            } else {
                                node.setAttribute("rows", 1);
                                if (!lineHeight) {
                                    node.style.minHeight = "0";
                                    lineHeight = element.prop("clientHeight");
                                    node.style.minHeight = null;
                                }
                                var rows = Math.min(min_rows, Math.round(node.scrollHeight / lineHeight));
                                node.setAttribute("rows", rows);
                                node.style.height = lineHeight * rows + "px";
                            }
                            element.removeClass("md-no-flex");
                            container.style.height = "auto";
                        }
                        function getHeight() {
                            var line = node.scrollHeight - node.offsetHeight;
                            return node.offsetHeight + (line > 0 ? line : 0);
                        }
                        function onScroll(e) {
                            node.scrollTop = 0;
                            var line = node.scrollHeight - node.offsetHeight, height = node.offsetHeight + line;
                            node.style.height = height + "px";
                        }
                        if (!angular.isDefined(element.attr("md-no-autogrow"))) {
                            var node = element[0], container = containerCtrl.element[0], min_rows = NaN, lineHeight = null;
                            node.hasAttribute("rows") && (min_rows = parseInt(node.getAttribute("rows")));
                            var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);
                            if (ngModelCtrl) {
                                ngModelCtrl.$formatters.push(pipelineListener);
                                ngModelCtrl.$viewChangeListeners.push(pipelineListener);
                            } else onChangeTextarea();
                            element.on("keydown input", onChangeTextarea);
                            if (isNaN(min_rows)) {
                                element.attr("rows", "1");
                                element.on("scroll", onScroll);
                            }
                            angular.element($window).on("resize", onChangeTextarea);
                            scope.$on("$destroy", function() {
                                angular.element($window).off("resize", onChangeTextarea);
                            });
                            if (angular.isDefined(element.attr("md-detect-hidden"))) {
                                var handleHiddenChange = function() {
                                    var wasHidden = !1;
                                    return function() {
                                        var isHidden = 0 === node.offsetHeight;
                                        !1 === isHidden && !0 === wasHidden && growTextarea();
                                        wasHidden = isHidden;
                                    };
                                }();
                                scope.$watch(function() {
                                    $mdUtil.nextTick(handleHiddenChange, !1);
                                    return !0;
                                });
                            }
                        }
                    }();
                    hasNgModel || inputCheckValue();
                    var isErrorGetter = containerCtrl.isErrorGetter || function() {
                        return ngModelCtrl.$invalid && (ngModelCtrl.$touched || ngModelCtrl.$$parentForm && ngModelCtrl.$$parentForm.$submitted);
                    };
                    scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
                    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);
                    element.on("input", inputCheckValue);
                    isReadonly || element.on("focus", function(ev) {
                        containerCtrl.setFocused(!0);
                    }).on("blur", function(ev) {
                        containerCtrl.setFocused(!1);
                        inputCheckValue();
                    });
                    scope.$on("$destroy", function() {
                        containerCtrl.setFocused(!1);
                        containerCtrl.setHasValue(!1);
                        containerCtrl.input = null;
                    });
                }
            }
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "?ngModel" ],
                link: postLink
            };
        }
        function mdMaxlengthDirective($animate, $mdUtil) {
            function postLink(scope, element, attr, ctrls) {
                function renderCharCount(value) {
                    if (!charCountEl.parent) return value;
                    charCountEl.text(String(element.val() || value || "").length + "/" + maxlength);
                    return value;
                }
                var maxlength, charCountEl, errorsSpacer, ngModelCtrl = ctrls[0], containerCtrl = ctrls[1];
                $mdUtil.nextTick(function() {
                    errorsSpacer = angular.element(containerCtrl.element[0].querySelector(".md-errors-spacer"));
                    charCountEl = angular.element('<div class="md-char-counter">');
                    errorsSpacer.append(charCountEl);
                    attr.$set("ngTrim", "false");
                    ngModelCtrl.$formatters.push(renderCharCount);
                    ngModelCtrl.$viewChangeListeners.push(renderCharCount);
                    element.on("input keydown keyup", function() {
                        renderCharCount();
                    });
                    scope.$watch(attr.mdMaxlength, function(value) {
                        maxlength = value;
                        if (angular.isNumber(value) && value > 0) {
                            charCountEl.parent().length || $animate.enter(charCountEl, errorsSpacer);
                            renderCharCount();
                        } else $animate.leave(charCountEl);
                    });
                    ngModelCtrl.$validators["md-maxlength"] = function(modelValue, viewValue) {
                        return !angular.isNumber(maxlength) || maxlength < 0 || (modelValue || element.val() || viewValue || "").length <= maxlength;
                    };
                });
            }
            return {
                restrict: "A",
                require: [ "ngModel", "^mdInputContainer" ],
                link: postLink
            };
        }
        function placeholderDirective($log) {
            function postLink(scope, element, attr, inputContainer) {
                if (inputContainer) {
                    var label = inputContainer.element.find("label"), hasNoFloat = angular.isDefined(inputContainer.element.attr("md-no-float"));
                    if (label && label.length || hasNoFloat) inputContainer.setHasPlaceholder(!0); else {
                        var placeholderText = attr.placeholder;
                        element.removeAttr("placeholder");
                        if (inputContainer.input && "MD-SELECT" != inputContainer.input[0].nodeName) {
                            var placeholder = '<label ng-click="delegateClick()">' + placeholderText + "</label>";
                            inputContainer.element.addClass("md-icon-float");
                            inputContainer.element.prepend(placeholder);
                        }
                    }
                }
            }
            return {
                restrict: "A",
                require: "^^?mdInputContainer",
                priority: 200,
                link: postLink
            };
        }
        function ngMessagesDirective() {
            function postLink(scope, element, attrs, inputContainer) {
                if (inputContainer) {
                    element.toggleClass("md-input-messages-animation", !0);
                    element.toggleClass("md-auto-hide", !0);
                    ("false" == attrs.mdAutoHide || hasVisibiltyDirective(attrs)) && element.toggleClass("md-auto-hide", !1);
                }
            }
            function hasVisibiltyDirective(attrs) {
                return visibilityDirectives.some(function(attr) {
                    return attrs[attr];
                });
            }
            return {
                restrict: "EA",
                link: postLink,
                require: "^^?mdInputContainer"
            };
        }
        function ngMessageDirective($mdUtil) {
            function compile(element) {
                if ($mdUtil.getClosest(element, "md-input-container")) {
                    element.toggleClass("md-input-message-animation", !0);
                    return {};
                }
            }
            return {
                restrict: "EA",
                compile: compile,
                priority: 100
            };
        }
        function mdInputInvalidMessagesAnimation($q, $animateCss) {
            return {
                addClass: function(element, className, done) {
                    var messages = getMessagesElement(element);
                    "md-input-invalid" == className && messages.hasClass("md-auto-hide") && showInputMessages(element, $animateCss, $q).finally(done);
                }
            };
        }
        function ngMessagesAnimation($q, $animateCss) {
            return {
                enter: function(element, done) {
                    showInputMessages(element, $animateCss, $q).finally(done);
                },
                leave: function(element, done) {
                    hideInputMessages(element, $animateCss, $q).finally(done);
                },
                addClass: function(element, className, done) {
                    "ng-hide" == className ? hideInputMessages(element, $animateCss, $q).finally(done) : done();
                },
                removeClass: function(element, className, done) {
                    "ng-hide" == className ? showInputMessages(element, $animateCss, $q).finally(done) : done();
                }
            };
        }
        function ngMessageAnimation($animateCss) {
            return {
                enter: function(element, done) {
                    if (!getMessagesElement(element).hasClass("md-auto-hide")) return showMessage(element, $animateCss);
                    done();
                },
                leave: function(element, done) {
                    return hideMessage(element, $animateCss);
                }
            };
        }
        function showInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = showMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function hideInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = hideMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function showMessage(element, $animateCss) {
            return $animateCss(element, {
                event: "enter",
                structural: !0,
                from: {
                    opacity: 0,
                    "margin-top": -element[0].offsetHeight + "px"
                },
                to: {
                    opacity: 1,
                    "margin-top": "0"
                },
                duration: .3
            });
        }
        function hideMessage(element, $animateCss) {
            var height = element[0].offsetHeight;
            return 0 == window.getComputedStyle(element[0]).opacity ? $animateCss(element, {}) : $animateCss(element, {
                event: "leave",
                structural: !0,
                from: {
                    opacity: 1,
                    "margin-top": 0
                },
                to: {
                    opacity: 0,
                    "margin-top": -height + "px"
                },
                duration: .3
            });
        }
        function getInputElement(element) {
            return element.controller("mdInputContainer").element;
        }
        function getMessagesElement(element) {
            var input = getInputElement(element);
            return angular.element(input[0].querySelector("ng-messages,data-ng-messages,x-ng-messages,[ng-messages],[data-ng-messages],[x-ng-messages]"));
        }
        angular.module("material.components.input", [ "material.core" ]).directive("mdInputContainer", mdInputContainerDirective).directive("label", labelDirective).directive("input", inputTextareaDirective).directive("textarea", inputTextareaDirective).directive("mdMaxlength", mdMaxlengthDirective).directive("placeholder", placeholderDirective).directive("ngMessages", ngMessagesDirective).directive("ngMessage", ngMessageDirective).directive("ngMessageExp", ngMessageDirective).animation(".md-input-invalid", mdInputInvalidMessagesAnimation).animation(".md-input-messages-animation", ngMessagesAnimation).animation(".md-input-message-animation", ngMessageAnimation);
        mdInputContainerDirective.$inject = [ "$mdTheming", "$parse" ];
        inputTextareaDirective.$inject = [ "$mdUtil", "$window", "$mdAria" ];
        mdMaxlengthDirective.$inject = [ "$animate", "$mdUtil" ];
        placeholderDirective.$inject = [ "$log" ];
        var visibilityDirectives = [ "ngIf", "ngShow", "ngHide", "ngSwitchWhen", "ngSwitchDefault" ];
        ngMessageDirective.$inject = [ "$mdUtil" ];
        mdInputInvalidMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        ngMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        ngMessageAnimation.$inject = [ "$animateCss" ];
    }();
    !function() {
        function mdListDirective($mdTheming) {
            return {
                restrict: "E",
                compile: function(tEl) {
                    tEl[0].setAttribute("role", "list");
                    return $mdTheming;
                }
            };
        }
        function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {
            var proxiedTypes = [ "md-checkbox", "md-switch" ];
            return {
                restrict: "E",
                controller: "MdListController",
                compile: function(tEl, tAttrs) {
                    function wrapIn(type) {
                        var container;
                        if ("div" == type) {
                            container = angular.element('<div class="md-no-style md-list-item-inner">');
                            container.append(tEl.contents());
                            tEl.addClass("md-proxy-focus");
                        } else {
                            container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
                            copyAttributes(tEl[0], container[0]);
                            container.children().eq(0).append(tEl.contents());
                        }
                        tEl[0].setAttribute("tabindex", "-1");
                        tEl.append(container);
                    }
                    function copyAttributes(item, wrapper) {
                        var copiedAttrs = [ "ng-if", "ng-click", "aria-label", "ng-disabled", "ui-sref", "href", "ng-href", "ng-attr-ui-sref" ];
                        angular.forEach(copiedAttrs, function(attr) {
                            if (item.hasAttribute(attr)) {
                                wrapper.setAttribute(attr, item.getAttribute(attr));
                                item.removeAttribute(attr);
                            }
                        });
                    }
                    function isProxiedElement(el) {
                        return -1 != proxiedTypes.indexOf(el.nodeName.toLowerCase());
                    }
                    function isButton(el) {
                        var nodeName = el.nodeName.toUpperCase();
                        return "MD-BUTTON" == nodeName || "BUTTON" == nodeName;
                    }
                    function postLink($scope, $element, $attr, ctrl) {
                        var proxies = [], firstChild = $element[0].firstElementChild, hasClick = firstChild && function(element) {
                            for (var attr = element.attributes, i = 0; i < attr.length; i++) if ("ngClick" === $attr.$normalize(attr[i].name)) return !0;
                            return !1;
                        }(firstChild);
                        !function() {
                            var children = $element.children();
                            children.length && !children[0].hasAttribute("ng-click") && angular.forEach(proxiedTypes, function(type) {
                                angular.forEach(firstChild.querySelectorAll(type), function(child) {
                                    proxies.push(child);
                                });
                            });
                        }();
                        !function() {
                            if (1 == proxies.length || hasClick) {
                                $element.addClass("md-clickable");
                                hasClick || ctrl.attachRipple($scope, angular.element($element[0].querySelector(".md-no-style")));
                            }
                        }();
                        $element.hasClass("md-proxy-focus") && proxies.length && angular.forEach(proxies, function(proxy) {
                            proxy = angular.element(proxy);
                            $scope.mouseActive = !1;
                            proxy.on("mousedown", function() {
                                $scope.mouseActive = !0;
                                $timeout(function() {
                                    $scope.mouseActive = !1;
                                }, 100);
                            }).on("focus", function() {
                                !1 === $scope.mouseActive && $element.addClass("md-focused");
                                proxy.on("blur", function proxyOnBlur() {
                                    $element.removeClass("md-focused");
                                    proxy.off("blur", proxyOnBlur);
                                });
                            });
                        });
                        hasClick || proxies.length || firstChild && firstChild.addEventListener("keypress", function(e) {
                            if ("INPUT" != e.target.nodeName && "TEXTAREA" != e.target.nodeName) {
                                if ((e.which || e.keyCode) == $mdConstant.KEY_CODE.SPACE && firstChild) {
                                    firstChild.click();
                                    e.preventDefault();
                                    e.stopPropagation();
                                }
                            }
                        });
                        $element.off("click");
                        $element.off("keypress");
                        1 == proxies.length && firstChild && $element.children().eq(0).on("click", function(e) {
                            !$mdUtil.getClosest(e.target, "BUTTON") && firstChild.contains(e.target) && angular.forEach(proxies, function(proxy) {
                                e.target === proxy || proxy.contains(e.target) || angular.element(proxy).triggerHandler("click");
                            });
                        });
                    }
                    var hasProxiedElement, secondaryItem = tEl[0].querySelector(".md-secondary");
                    tEl[0].setAttribute("role", "listitem");
                    if (tAttrs.ngClick || tAttrs.ngHref || tAttrs.href || tAttrs.uiSref || tAttrs.ngAttrUiSref) wrapIn("button"); else {
                        for (var type, i = 0; type = proxiedTypes[i]; ++i) if (tEl[0].querySelector(type)) {
                            hasProxiedElement = !0;
                            break;
                        }
                        hasProxiedElement ? wrapIn("div") : tEl[0].querySelector("md-button:not(.md-secondary):not(.md-exclude)") || tEl.addClass("md-no-proxy");
                    }
                    !function() {
                        if (secondaryItem && !isButton(secondaryItem) && secondaryItem.hasAttribute("ng-click")) {
                            $mdAria.expect(secondaryItem, "aria-label");
                            var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');
                            copyAttributes(secondaryItem, buttonWrapper[0]);
                            secondaryItem.setAttribute("tabindex", "-1");
                            secondaryItem.classList.remove("md-secondary");
                            buttonWrapper.append(secondaryItem);
                            secondaryItem = buttonWrapper[0];
                        }
                        if (secondaryItem && (secondaryItem.hasAttribute("ng-click") || tAttrs.ngClick && isProxiedElement(secondaryItem))) {
                            tEl.addClass("md-with-secondary");
                            tEl.append(secondaryItem);
                        }
                    }();
                    !function() {
                        for (var toggle, toggleType, toggleTypes = [ "md-switch", "md-checkbox" ], i = 0; toggleType = toggleTypes[i]; ++i) if ((toggle = tEl.find(toggleType)[0]) && !toggle.hasAttribute("aria-label")) {
                            var p = tEl.find("p")[0];
                            if (!p) return;
                            toggle.setAttribute("aria-label", "Toggle " + p.textContent);
                        }
                    }();
                    return postLink;
                }
            };
        }
        function MdListController($scope, $element, $mdListInkRipple) {
            function attachRipple(scope, element) {
                var options = {};
                $mdListInkRipple.attach(scope, element, options);
            }
            this.attachRipple = attachRipple;
        }
        angular.module("material.components.list", [ "material.core" ]).controller("MdListController", MdListController).directive("mdList", mdListDirective).directive("mdListItem", mdListItemDirective);
        mdListDirective.$inject = [ "$mdTheming" ];
        mdListItemDirective.$inject = [ "$mdAria", "$mdConstant", "$mdUtil", "$timeout" ];
        MdListController.$inject = [ "$scope", "$element", "$mdListInkRipple" ];
    }();
    !function() {
        angular.module("material.components.menu", [ "material.core", "material.components.backdrop" ]);
    }();
    !function() {
        angular.module("material.components.menuBar", [ "material.core", "material.components.menu" ]);
    }();
    !function() {
        function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {
            function compile(tElement) {
                tElement.attr("aria-valuemin", 0);
                tElement.attr("aria-valuemax", 100);
                tElement.attr("role", "progressbar");
                return postLink;
            }
            function postLink(scope, element, attr) {
                function animateIndicator(value) {
                    if (mode()) {
                        leftC = leftC || angular.element(element[0].querySelector(".md-left > .md-half-circle"));
                        rightC = rightC || angular.element(element[0].querySelector(".md-right > .md-half-circle"));
                        gap = gap || angular.element(element[0].querySelector(".md-gap"));
                        var gapStyles = removeEmptyValues({
                            borderBottomColor: value <= 50 ? "transparent !important" : "",
                            transition: value <= 50 ? "" : "borderBottomColor 0.1s linear"
                        }), leftStyles = removeEmptyValues({
                            transition: value <= 50 ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [ value <= 50 ? 135 : (value - 50) / 50 * 180 + 135 ])
                        }), rightStyles = removeEmptyValues({
                            transition: value >= 50 ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [ value >= 50 ? 45 : value / 50 * 180 - 135 ])
                        });
                        leftC.css(toVendorCSS(leftStyles));
                        rightC.css(toVendorCSS(rightStyles));
                        gap.css(toVendorCSS(gapStyles));
                    }
                }
                function getDiameterRatio() {
                    if (!attr.mdDiameter) return DEFAULT_SCALING;
                    var match = /([0-9]*)%/.exec(attr.mdDiameter), value = Math.max(0, match && match[1] / 100 || parseFloat(attr.mdDiameter));
                    return value > 1 ? value / DEFAULT_PROGRESS_SIZE : value;
                }
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                        break;

                      default:
                        value = undefined;
                    }
                    return value;
                }
                $mdTheming(element);
                var lastMode, circle = element, spinnerWrapper = angular.element(element.children()[0]), toVendorCSS = $mdUtil.dom.animator.toCss;
                element.attr("md-mode", mode());
                !function() {
                    circle.css({
                        width: 100 * getDiameterRatio() + "px",
                        height: 100 * getDiameterRatio() + "px"
                    });
                    circle.children().eq(0).css(toVendorCSS({
                        transform: $mdUtil.supplant("translate(-50%, -50%) scale( {0} )", [ getDiameterRatio() ])
                    }));
                }();
                !function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressCircular element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !function() {
                    attr.$observe("value", function(value) {
                        var percentValue = clamp(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() == MODE_DETERMINATE && animateIndicator(percentValue);
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            spinnerWrapper.removeClass("ng-hide");
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass("ng-hide");
                            lastMode = undefined;
                        }
                    });
                }();
                var leftC, rightC, gap;
            }
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
            function removeEmptyValues(target) {
                for (var key in target) target.hasOwnProperty(key) && "" == target[key] && delete target[key];
                return target;
            }
            var DEFAULT_PROGRESS_SIZE = 100, DEFAULT_SCALING = .5, MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate";
            return {
                restrict: "E",
                scope: !0,
                template: '<div class="md-scale-wrapper"><div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div></div>',
                compile: compile
            };
        }
        angular.module("material.components.progressCircular", [ "material.core" ]).directive("mdProgressCircular", MdProgressCircularDirective);
        MdProgressCircularDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {
            function linkRadioGroup(scope, element, attr, ctrls) {
                function setFocus() {
                    element.hasClass("md-focused") || element.addClass("md-focused");
                }
                function keydownListener(ev) {
                    var keyCode = ev.which || ev.keyCode;
                    if (keyCode == $mdConstant.KEY_CODE.ENTER || ev.currentTarget == ev.target) switch (keyCode) {
                      case $mdConstant.KEY_CODE.LEFT_ARROW:
                      case $mdConstant.KEY_CODE.UP_ARROW:
                        ev.preventDefault();
                        rgCtrl.selectPrevious();
                        setFocus();
                        break;

                      case $mdConstant.KEY_CODE.RIGHT_ARROW:
                      case $mdConstant.KEY_CODE.DOWN_ARROW:
                        ev.preventDefault();
                        rgCtrl.selectNext();
                        setFocus();
                        break;

                      case $mdConstant.KEY_CODE.ENTER:
                        var form = angular.element($mdUtil.getClosest(element[0], "form"));
                        form.length > 0 && form.triggerHandler("submit");
                    }
                }
                $mdTheming(element);
                var rgCtrl = ctrls[0], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
                rgCtrl.init(ngModelCtrl);
                scope.mouseActive = !1;
                element.attr({
                    role: "radiogroup",
                    tabIndex: element.attr("tabindex") || "0"
                }).on("keydown", keydownListener).on("mousedown", function(event) {
                    scope.mouseActive = !0;
                    $timeout(function() {
                        scope.mouseActive = !1;
                    }, 100);
                }).on("focus", function() {
                    !1 === scope.mouseActive && rgCtrl.$element.addClass("md-focused");
                }).on("blur", function() {
                    rgCtrl.$element.removeClass("md-focused");
                });
            }
            function RadioGroupController($element) {
                this._radioButtonRenderFns = [];
                this.$element = $element;
            }
            function changeSelectedButton(parent, increment) {
                var buttons = $mdUtil.iterator(parent[0].querySelectorAll("md-radio-button"), !0);
                if (buttons.count()) {
                    var validate = function(button) {
                        return !angular.element(button).attr("disabled");
                    }, selected = parent[0].querySelector("md-radio-button.md-checked"), target = buttons[increment < 0 ? "previous" : "next"](selected, validate) || buttons.first();
                    angular.element(target).triggerHandler("click");
                }
            }
            RadioGroupController.prototype = function() {
                return {
                    init: function(ngModelCtrl) {
                        this._ngModelCtrl = ngModelCtrl;
                        this._ngModelCtrl.$render = angular.bind(this, this.render);
                    },
                    add: function(rbRender) {
                        this._radioButtonRenderFns.push(rbRender);
                    },
                    remove: function(rbRender) {
                        var index = this._radioButtonRenderFns.indexOf(rbRender);
                        -1 !== index && this._radioButtonRenderFns.splice(index, 1);
                    },
                    render: function() {
                        this._radioButtonRenderFns.forEach(function(rbRender) {
                            rbRender();
                        });
                    },
                    setViewValue: function(value, eventType) {
                        this._ngModelCtrl.$setViewValue(value, eventType);
                        this.render();
                    },
                    getViewValue: function() {
                        return this._ngModelCtrl.$viewValue;
                    },
                    selectNext: function() {
                        return changeSelectedButton(this.$element, 1);
                    },
                    selectPrevious: function() {
                        return changeSelectedButton(this.$element, -1);
                    },
                    setActiveDescendant: function(radioId) {
                        this.$element.attr("aria-activedescendant", radioId);
                    }
                };
            }();
            return {
                restrict: "E",
                controller: [ "$element", RadioGroupController ],
                require: [ "mdRadioGroup", "?ngModel" ],
                link: {
                    pre: linkRadioGroup
                }
            };
        }
        function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {
            function link(scope, element, attr, rgCtrl) {
                function listener(ev) {
                    element[0].hasAttribute("disabled") || scope.$apply(function() {
                        rgCtrl.setViewValue(attr.value, ev && ev.type);
                    });
                }
                function render() {
                    function markParentAsChecked(addClass) {
                        "MD-RADIO-GROUP" != element.parent()[0].nodeName && element.parent()[addClass ? "addClass" : "removeClass"](CHECKED_CSS);
                    }
                    var checked = rgCtrl.getViewValue() == attr.value;
                    if (checked !== lastChecked) {
                        lastChecked = checked;
                        element.attr("aria-checked", checked);
                        if (checked) {
                            markParentAsChecked(!0);
                            element.addClass(CHECKED_CSS);
                            rgCtrl.setActiveDescendant(element.attr("id"));
                        } else {
                            markParentAsChecked(!1);
                            element.removeClass(CHECKED_CSS);
                        }
                    }
                }
                var lastChecked;
                $mdTheming(element);
                !function(element, scope) {
                    scope.ariaId = function() {
                        return attr.id || "radio_" + $mdUtil.nextUid();
                    }();
                    element.attr({
                        id: scope.ariaId,
                        role: "radio",
                        "aria-checked": "false"
                    });
                    $mdAria.expectWithText(element, "aria-label");
                }(element, scope);
                !function(controller) {
                    if (!rgCtrl) throw "RadioGroupController not found.";
                    rgCtrl.add(render);
                    attr.$observe("value", render);
                    element.on("click", listener).on("$destroy", function() {
                        rgCtrl.remove(render);
                    });
                }();
            }
            var CHECKED_CSS = "md-checked";
            return {
                restrict: "E",
                require: "^mdRadioGroup",
                transclude: !0,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',
                link: link
            };
        }
        angular.module("material.components.radioButton", [ "material.core" ]).directive("mdRadioGroup", mdRadioGroupDirective).directive("mdRadioButton", mdRadioButtonDirective);
        mdRadioGroupDirective.$inject = [ "$mdUtil", "$mdConstant", "$mdTheming", "$timeout" ];
        mdRadioButtonDirective.$inject = [ "$mdAria", "$mdUtil", "$mdTheming" ];
    }();
    !function() {
        function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {
            function compile(tElement, tAttrs, transclude) {
                tElement.attr("aria-valuemin", 0);
                tElement.attr("aria-valuemax", 100);
                tElement.attr("role", "progressbar");
                return postLink;
            }
            function postLink(scope, element, attr) {
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                      case MODE_BUFFER:
                      case MODE_QUERY:
                        break;

                      default:
                        value = undefined;
                    }
                    return value;
                }
                function animateIndicator(target, value) {
                    if (mode()) {
                        var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [ (value - 100) / 2, value / 100 ]), styles = toVendorCSS({
                            transform: to
                        });
                        angular.element(target).css(styles);
                    }
                }
                $mdTheming(element);
                var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss, bar1 = angular.element(element[0].querySelector(".md-bar1")), bar2 = angular.element(element[0].querySelector(".md-bar2")), container = angular.element(element[0].querySelector(".md-container"));
                element.attr("md-mode", mode());
                !function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressLinear element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !function() {
                    attr.$observe("value", function(value) {
                        var percentValue = clamp(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() != MODE_QUERY && animateIndicator(bar2, percentValue);
                    });
                    attr.$observe("mdBufferValue", function(value) {
                        animateIndicator(bar1, clamp(value));
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_QUERY:
                          case MODE_BUFFER:
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            container.removeClass("ng-hide " + lastMode);
                            container.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && container.removeClass(lastMode);
                            container.addClass("ng-hide");
                            lastMode = undefined;
                        }
                    });
                }();
            }
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
            var MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate", MODE_BUFFER = "buffer", MODE_QUERY = "query";
            return {
                restrict: "E",
                template: '<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',
                compile: compile
            };
        }
        angular.module("material.components.progressLinear", [ "material.core" ]).directive("mdProgressLinear", MdProgressLinearDirective);
        MdProgressLinearDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        function createDirective(name, targetValue) {
            return [ "$mdUtil", function($mdUtil) {
                return {
                    restrict: "A",
                    multiElement: !0,
                    link: function($scope, $element, $attr) {
                        var unregister = $scope.$on("$md-resize-enable", function() {
                            unregister();
                            $scope.$watch($attr[name], function(value) {
                                if (!!value === targetValue) {
                                    $mdUtil.nextTick(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                    $mdUtil.dom.animator.waitTransitionEnd($element).then(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                }
                            });
                        });
                    }
                };
            } ];
        }
        angular.module("material.components.showHide", [ "material.core" ]).directive("ngShow", createDirective("ngShow", !0)).directive("ngHide", createDirective("ngHide", !1));
    }();
    !function() {
        function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {
            function compile(element, attr) {
                var valueEl = angular.element("<md-select-value><span></span></md-select-value>");
                valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');
                valueEl.addClass("md-select-value");
                valueEl[0].hasAttribute("id") || valueEl.attr("id", "select_value_label_" + $mdUtil.nextUid());
                element.find("md-content").length || element.append(angular.element("<md-content>").append(element.contents()));
                if (attr.mdOnOpen) {
                    element.find("md-content").prepend(angular.element('<div> <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular></div>'));
                    element.find("md-option").attr("ng-show", "$$loadingAsyncDone");
                }
                if (attr.name) {
                    var autofillClone = angular.element('<select class="md-visually-hidden">');
                    autofillClone.attr({
                        name: "." + attr.name,
                        "ng-model": attr.ngModel,
                        "aria-hidden": "true",
                        tabindex: "-1"
                    });
                    var opts = element.find("md-option");
                    angular.forEach(opts, function(el) {
                        var newEl = angular.element("<option>" + el.innerHTML + "</option>");
                        el.hasAttribute("ng-value") ? newEl.attr("ng-value", el.getAttribute("ng-value")) : el.hasAttribute("value") && newEl.attr("value", el.getAttribute("value"));
                        autofillClone.append(newEl);
                    });
                    element.parent().append(autofillClone);
                }
                var multiple = angular.isDefined(attr.multiple) ? "multiple" : "", selectTemplate = '<div class="md-select-menu-container" aria-hidden="true"><md-select-menu {0}>{1}</md-select-menu></div>';
                selectTemplate = $mdUtil.supplant(selectTemplate, [ multiple, element.html() ]);
                element.empty().append(valueEl);
                element.append(selectTemplate);
                attr.tabindex = attr.tabindex || "0";
                return function(scope, element, attr, ctrls) {
                    function initAriaLabel() {
                        var labelText = element.attr("aria-label") || element.attr("placeholder");
                        !labelText && containerCtrl && containerCtrl.label && (labelText = containerCtrl.label.text());
                        ariaLabelBase = labelText;
                        $mdAria.expect(element, "aria-label", labelText);
                    }
                    function syncLabelText() {
                        if (selectContainer) {
                            selectMenuCtrl = selectMenuCtrl || selectContainer.find("md-select-menu").controller("mdSelectMenu");
                            mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());
                        }
                    }
                    function syncAriaLabel() {
                        if (ariaLabelBase) {
                            var ariaLabels = selectMenuCtrl.selectedLabels({
                                mode: "aria"
                            });
                            element.attr("aria-label", ariaLabels.length ? ariaLabelBase + ": " + ariaLabels : ariaLabelBase);
                        }
                    }
                    function inputCheckValue() {
                        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
                    }
                    function handleKeypress(e) {
                        if (-1 != [ 32, 13, 38, 40 ].indexOf(e.keyCode)) {
                            e.preventDefault();
                            openSelect();
                        } else if (e.keyCode <= 90 && e.keyCode >= 31) {
                            e.preventDefault();
                            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);
                            if (!node) return;
                            var optionCtrl = angular.element(node).controller("mdOption");
                            selectMenuCtrl.isMultiple || selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);
                            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                            selectMenuCtrl.refreshViewValue();
                        }
                    }
                    function openSelect() {
                        selectScope.isOpen = !0;
                        element.attr("aria-expanded", "true");
                        $mdSelect.show({
                            scope: selectScope,
                            preserveScope: !0,
                            skipCompile: !0,
                            element: selectContainer,
                            target: element[0],
                            selectCtrl: mdSelectCtrl,
                            preserveElement: !0,
                            hasBackdrop: !0,
                            loadingAsync: !!attr.mdOnOpen && (scope.$eval(attr.mdOnOpen) || !0)
                        }).finally(function() {
                            selectScope.isOpen = !1;
                            element.focus();
                            element.attr("aria-expanded", "false");
                            ngModelCtrl.$setTouched();
                        });
                    }
                    var isDisabled, ariaLabelBase, untouched = !0, containerCtrl = ctrls[0], mdSelectCtrl = ctrls[1], ngModelCtrl = ctrls[2], formCtrl = ctrls[3], valueEl = element.find("md-select-value"), isReadonly = angular.isDefined(attr.readonly);
                    if (containerCtrl) {
                        var isErrorGetter = containerCtrl.isErrorGetter || function() {
                            return ngModelCtrl.$invalid && ngModelCtrl.$touched;
                        };
                        if (containerCtrl.input) throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");
                        containerCtrl.input = element;
                        containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                        scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    }
                    var selectContainer, selectScope, selectMenuCtrl;
                    !function() {
                        selectContainer = angular.element(element[0].querySelector(".md-select-menu-container"));
                        selectScope = scope;
                        if (element.attr("md-container-class")) {
                            var value = selectContainer[0].getAttribute("class") + " " + element.attr("md-container-class");
                            selectContainer[0].setAttribute("class", value);
                        }
                        selectMenuCtrl = selectContainer.find("md-select-menu").controller("mdSelectMenu");
                        selectMenuCtrl.init(ngModelCtrl, attr.ngModel);
                        element.on("$destroy", function() {
                            selectContainer.remove();
                        });
                    }();
                    $mdTheming(element);
                    if (attr.name && formCtrl) {
                        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');
                        $mdUtil.nextTick(function() {
                            var controller = angular.element(selectEl).controller("ngModel");
                            controller && formCtrl.$removeControl(controller);
                        });
                    }
                    formCtrl && $mdUtil.nextTick(function() {
                        formCtrl.$setPristine();
                    });
                    var originalRender = ngModelCtrl.$render;
                    ngModelCtrl.$render = function() {
                        originalRender();
                        syncLabelText();
                        syncAriaLabel();
                        inputCheckValue();
                    };
                    attr.$observe("placeholder", ngModelCtrl.$render);
                    mdSelectCtrl.setLabelText = function(text) {
                        mdSelectCtrl.setIsPlaceholder(!text);
                        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : "");
                        text = text || tmpPlaceholder || "";
                        valueEl.children().eq(0).html(text);
                    };
                    mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {
                        if (isPlaceholder) {
                            valueEl.addClass("md-select-placeholder");
                            containerCtrl && containerCtrl.label && containerCtrl.label.addClass("md-placeholder");
                        } else {
                            valueEl.removeClass("md-select-placeholder");
                            containerCtrl && containerCtrl.label && containerCtrl.label.removeClass("md-placeholder");
                        }
                    };
                    if (!isReadonly) {
                        element.on("focus", function(ev) {
                            containerCtrl && containerCtrl.element.hasClass("md-input-has-value") && containerCtrl.setFocused(!0);
                        });
                        $mdUtil.nextTick(function() {
                            element.on("blur", function() {
                                if (untouched) {
                                    untouched = !1;
                                    ngModelCtrl.$setUntouched();
                                }
                                if (!selectScope.isOpen) {
                                    containerCtrl && containerCtrl.setFocused(!1);
                                    inputCheckValue();
                                }
                            });
                        });
                    }
                    mdSelectCtrl.triggerClose = function() {
                        $parse(attr.mdOnClose)(scope);
                    };
                    scope.$$postDigest(function() {
                        initAriaLabel();
                        syncLabelText();
                        syncAriaLabel();
                    });
                    scope.$watch(selectMenuCtrl.selectedLabels, syncLabelText);
                    var deregisterWatcher;
                    attr.$observe("ngMultiple", function(val) {
                        deregisterWatcher && deregisterWatcher();
                        var parser = $parse(val);
                        deregisterWatcher = scope.$watch(function() {
                            return parser(scope);
                        }, function(multiple, prevVal) {
                            if (multiple !== undefined || prevVal !== undefined) {
                                multiple ? element.attr("multiple", "multiple") : element.removeAttr("multiple");
                                element.attr("aria-multiselectable", multiple ? "true" : "false");
                                if (selectContainer) {
                                    selectMenuCtrl.setMultiple(multiple);
                                    originalRender = ngModelCtrl.$render;
                                    ngModelCtrl.$render = function() {
                                        originalRender();
                                        syncLabelText();
                                        syncAriaLabel();
                                        inputCheckValue();
                                    };
                                    ngModelCtrl.$render();
                                }
                            }
                        });
                    });
                    attr.$observe("disabled", function(disabled) {
                        angular.isString(disabled) && (disabled = !0);
                        if (isDisabled === undefined || isDisabled !== disabled) {
                            isDisabled = disabled;
                            if (disabled) {
                                element.attr({
                                    tabindex: -1,
                                    "aria-disabled": "true"
                                });
                                element.off("click", openSelect);
                                element.off("keydown", handleKeypress);
                            } else {
                                element.attr({
                                    tabindex: attr.tabindex,
                                    "aria-disabled": "false"
                                });
                                element.on("click", openSelect);
                                element.on("keydown", handleKeypress);
                            }
                        }
                    });
                    if (!attr.disabled && !attr.ngDisabled) {
                        element.attr({
                            tabindex: attr.tabindex,
                            "aria-disabled": "false"
                        });
                        element.on("click", openSelect);
                        element.on("keydown", handleKeypress);
                    }
                    var ariaAttrs = {
                        role: "listbox",
                        "aria-expanded": "false",
                        "aria-multiselectable": attr.multiple === undefined || attr.ngMultiple ? "false" : "true"
                    };
                    element[0].hasAttribute("id") || (ariaAttrs.id = "select_" + $mdUtil.nextUid());
                    var containerId = "select_container_" + $mdUtil.nextUid();
                    selectContainer.attr("id", containerId);
                    ariaAttrs["aria-owns"] = containerId;
                    element.attr(ariaAttrs);
                    scope.$on("$destroy", function() {
                        $mdSelect.destroy().finally(function() {
                            if (containerCtrl) {
                                containerCtrl.setFocused(!1);
                                containerCtrl.setHasValue(!1);
                                containerCtrl.input = null;
                            }
                            ngModelCtrl.$setTouched();
                        });
                    });
                };
            }
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "mdSelect", "ngModel", "?^form" ],
                compile: compile,
                controller: function() {}
            };
        }
        function SelectMenuDirective($parse, $mdUtil, $mdTheming) {
            function preLink(scope, element, attr, ctrls) {
                function keyListener(e) {
                    13 != e.keyCode && 32 != e.keyCode || clickListener(e);
                }
                function clickListener(ev) {
                    var option = $mdUtil.getClosest(ev.target, "md-option"), optionCtrl = option && angular.element(option).data("$mdOptionController");
                    if (option && optionCtrl) {
                        if (option.hasAttribute("disabled")) {
                            ev.stopImmediatePropagation();
                            return !1;
                        }
                        var optionHashKey = selectCtrl.hashGetter(optionCtrl.value), isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);
                        scope.$apply(function() {
                            if (selectCtrl.isMultiple) isSelected ? selectCtrl.deselect(optionHashKey) : selectCtrl.select(optionHashKey, optionCtrl.value); else if (!isSelected) {
                                selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionHashKey, optionCtrl.value);
                            }
                            selectCtrl.refreshViewValue();
                        });
                    }
                }
                var selectCtrl = ctrls[0];
                $mdTheming(element);
                element.on("click", clickListener);
                element.on("keypress", keyListener);
            }
            function SelectMenuController($scope, $attrs, $element) {
                function renderMultiple() {
                    var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];
                    if (angular.isArray(newSelectedValues)) {
                        var oldSelected = Object.keys(self.selected), newSelectedHashes = newSelectedValues.map(self.hashGetter);
                        oldSelected.filter(function(hash) {
                            return -1 === newSelectedHashes.indexOf(hash);
                        }).forEach(self.deselect);
                        newSelectedHashes.forEach(function(hashKey, i) {
                            self.select(hashKey, newSelectedValues[i]);
                        });
                    }
                }
                function renderSingular() {
                    var value = self.ngModel.$viewValue || self.ngModel.$modelValue;
                    Object.keys(self.selected).forEach(self.deselect);
                    self.select(self.hashGetter(value), value);
                }
                var self = this;
                self.isMultiple = angular.isDefined($attrs.multiple);
                self.selected = {};
                self.options = {};
                $scope.$watchCollection(function() {
                    return self.options;
                }, function() {
                    self.ngModel.$render();
                });
                var deregisterCollectionWatch, defaultIsEmpty;
                self.setMultiple = function(isMultiple) {
                    function validateArray(modelValue, viewValue) {
                        return angular.isArray(modelValue || viewValue || []);
                    }
                    var ngModel = self.ngModel;
                    defaultIsEmpty = defaultIsEmpty || ngModel.$isEmpty;
                    self.isMultiple = isMultiple;
                    deregisterCollectionWatch && deregisterCollectionWatch();
                    if (self.isMultiple) {
                        ngModel.$validators["md-multiple"] = validateArray;
                        ngModel.$render = renderMultiple;
                        $scope.$watchCollection(self.modelBinding, function(value) {
                            validateArray(value) && renderMultiple();
                            self.ngModel.$setPristine();
                        });
                        ngModel.$isEmpty = function(value) {
                            return !value || 0 === value.length;
                        };
                    } else {
                        delete ngModel.$validators["md-multiple"];
                        ngModel.$render = renderSingular;
                    }
                };
                var clearSearchTimeout, optNodes, optText, searchStr = "";
                self.optNodeForKeyboardSearch = function(e) {
                    clearSearchTimeout && clearTimeout(clearSearchTimeout);
                    clearSearchTimeout = setTimeout(function() {
                        clearSearchTimeout = undefined;
                        searchStr = "";
                        optText = undefined;
                        optNodes = undefined;
                    }, 300);
                    searchStr += String.fromCharCode(e.keyCode);
                    var search = new RegExp("^" + searchStr, "i");
                    if (!optNodes) {
                        optNodes = $element.find("md-option");
                        optText = new Array(optNodes.length);
                        angular.forEach(optNodes, function(el, i) {
                            optText[i] = el.textContent.trim();
                        });
                    }
                    for (var i = 0; i < optText.length; ++i) if (search.test(optText[i])) return optNodes[i];
                };
                self.init = function(ngModel, binding) {
                    self.ngModel = ngModel;
                    self.modelBinding = binding;
                    if (ngModel.$options && ngModel.$options.trackBy) {
                        var trackByLocals = {}, trackByParsed = $parse(ngModel.$options.trackBy);
                        self.hashGetter = function(value, valueScope) {
                            trackByLocals.$value = value;
                            return trackByParsed(valueScope || $scope, trackByLocals);
                        };
                    } else self.hashGetter = function(value) {
                        return angular.isObject(value) ? "object_" + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId)) : value;
                    };
                    self.setMultiple(self.isMultiple);
                };
                self.selectedLabels = function(opts) {
                    opts = opts || {};
                    var mode = opts.mode || "html", selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll("md-option[selected]"));
                    if (selectedOptionEls.length) {
                        var mapFn;
                        "html" == mode ? mapFn = function(el) {
                            return el.innerHTML;
                        } : "aria" == mode && (mapFn = function(el) {
                            return el.hasAttribute("aria-label") ? el.getAttribute("aria-label") : el.textContent;
                        });
                        return selectedOptionEls.map(mapFn).join(", ");
                    }
                    return "";
                };
                self.select = function(hashKey, hashedValue) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!0);
                    self.selected[hashKey] = hashedValue;
                };
                self.deselect = function(hashKey) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!1);
                    delete self.selected[hashKey];
                };
                self.addOption = function(hashKey, optionCtrl) {
                    if (angular.isDefined(self.options[hashKey])) throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "' + optionCtrl.value + '" found.');
                    self.options[hashKey] = optionCtrl;
                    if (angular.isDefined(self.selected[hashKey])) {
                        self.select(hashKey, optionCtrl.value);
                        self.refreshViewValue();
                    }
                };
                self.removeOption = function(hashKey) {
                    delete self.options[hashKey];
                };
                self.refreshViewValue = function() {
                    var option, values = [];
                    for (var hashKey in self.selected) (option = self.options[hashKey]) ? values.push(option.value) : values.push(self.selected[hashKey]);
                    var usingTrackBy = self.ngModel.$options && self.ngModel.$options.trackBy, newVal = self.isMultiple ? values : values[0], prevVal = self.ngModel.$modelValue;
                    if (usingTrackBy ? !angular.equals(prevVal, newVal) : prevVal != newVal) {
                        self.ngModel.$setViewValue(newVal);
                        self.ngModel.$render();
                    }
                };
            }
            SelectMenuController.$inject = [ "$scope", "$attrs", "$element" ];
            return {
                restrict: "E",
                require: [ "mdSelectMenu" ],
                scope: !0,
                controller: SelectMenuController,
                link: {
                    pre: preLink
                }
            };
        }
        function OptionDirective($mdButtonInkRipple, $mdUtil) {
            function compile(element, attr) {
                element.append(angular.element('<div class="md-text">').append(element.contents()));
                element.attr("tabindex", attr.tabindex || "0");
                return postLink;
            }
            function postLink(scope, element, attr, ctrls) {
                function setOptionValue(newValue, oldValue, prevAttempt) {
                    if (selectCtrl.hashGetter) {
                        var oldHashKey = selectCtrl.hashGetter(oldValue, scope), newHashKey = selectCtrl.hashGetter(newValue, scope);
                        optionCtrl.hashKey = newHashKey;
                        optionCtrl.value = newValue;
                        selectCtrl.removeOption(oldHashKey, optionCtrl);
                        selectCtrl.addOption(newHashKey, optionCtrl);
                    } else prevAttempt || scope.$$postDigest(function() {
                        setOptionValue(newValue, oldValue, !0);
                    });
                }
                var optionCtrl = ctrls[0], selectCtrl = ctrls[1];
                angular.isDefined(attr.ngValue) ? scope.$watch(attr.ngValue, setOptionValue) : angular.isDefined(attr.value) ? setOptionValue(attr.value) : scope.$watch(function() {
                    return element.text();
                }, setOptionValue);
                attr.$observe("disabled", function(disabled) {
                    disabled ? element.attr("tabindex", "-1") : element.attr("tabindex", "0");
                });
                scope.$$postDigest(function() {
                    attr.$observe("selected", function(selected) {
                        if (angular.isDefined(selected)) {
                            "string" == typeof selected && (selected = !0);
                            if (selected) {
                                selectCtrl.isMultiple || selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                            } else selectCtrl.deselect(optionCtrl.hashKey);
                            selectCtrl.refreshViewValue();
                        }
                    });
                });
                $mdButtonInkRipple.attach(scope, element);
                !function() {
                    var ariaAttrs = {
                        role: "option",
                        "aria-selected": "false"
                    };
                    element[0].hasAttribute("id") || (ariaAttrs.id = "select_option_" + $mdUtil.nextUid());
                    element.attr(ariaAttrs);
                }();
                scope.$on("$destroy", function() {
                    selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);
                });
            }
            function OptionController($element) {
                this.selected = !1;
                this.setSelected = function(isSelected) {
                    if (isSelected && !this.selected) $element.attr({
                        selected: "selected",
                        "aria-selected": "true"
                    }); else if (!isSelected && this.selected) {
                        $element.removeAttr("selected");
                        $element.attr("aria-selected", "false");
                    }
                    this.selected = isSelected;
                };
            }
            OptionController.$inject = [ "$element" ];
            return {
                restrict: "E",
                require: [ "mdOption", "^^mdSelectMenu" ],
                controller: OptionController,
                compile: compile
            };
        }
        function OptgroupDirective() {
            function compile(el, attrs) {
                var labelElement = el.find("label");
                if (!labelElement.length) {
                    labelElement = angular.element("<label>");
                    el.prepend(labelElement);
                }
                labelElement.addClass("md-container-ignore");
                attrs.label && labelElement.text(attrs.label);
            }
            return {
                restrict: "E",
                compile: compile
            };
        }
        function SelectProvider($$interimElementProvider) {
            function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate, $document) {
                function onRemove(scope, element, opts) {
                    function cleanElement() {
                        element.removeClass("md-active");
                        element.attr("aria-hidden", "true");
                        element[0].style.display = "none";
                        announceClosed(opts);
                        !opts.$destroy && opts.restoreFocus && opts.target.focus();
                    }
                    opts = opts || {};
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();
                    return !0 === opts.$destroy ? cleanElement() : function() {
                        return $animateCss(element, {
                            addClass: "md-leave"
                        }).start();
                    }().then(cleanElement);
                }
                function onShow(scope, element, opts) {
                    function positionAndFocusMenu() {
                        return $q(function(resolve) {
                            if (opts.isRemoved) return $q.reject(!1);
                            var info = calculateMenuPositions(scope, element, opts);
                            info.container.element.css(animator.toCss(info.container.styles));
                            info.dropDown.element.css(animator.toCss(info.dropDown.styles));
                            $$rAF(function() {
                                element.addClass("md-active");
                                info.dropDown.element.css(animator.toCss({
                                    transform: ""
                                }));
                                autoFocus(opts.focusedNode);
                                resolve();
                            });
                        });
                    }
                    function autoFocus(focusedNode) {
                        focusedNode && !focusedNode.hasAttribute("disabled") && focusedNode.focus();
                    }
                    function activateResizing() {
                        var debouncedOnResize = function(scope, target, options) {
                            return function() {
                                if (!options.isRemoved) {
                                    var updates = calculateMenuPositions(scope, target, options), container = updates.container, dropDown = updates.dropDown;
                                    container.element.css(animator.toCss(container.styles));
                                    dropDown.element.css(animator.toCss(dropDown.styles));
                                }
                            };
                        }(scope, element, opts), window = angular.element($window);
                        window.on("resize", debouncedOnResize);
                        window.on("orientationchange", debouncedOnResize);
                        return function() {
                            window.off("resize", debouncedOnResize);
                            window.off("orientationchange", debouncedOnResize);
                        };
                    }
                    function activateInteraction() {
                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            opts.restoreFocus = !1;
                            $mdUtil.nextTick($mdSelect.hide, !0);
                        }
                        function onMenuKeyDown(ev) {
                            var keyCodes = $mdConstant.KEY_CODE;
                            ev.preventDefault();
                            ev.stopPropagation();
                            switch (ev.keyCode) {
                              case keyCodes.UP_ARROW:
                                return focusPrevOption();

                              case keyCodes.DOWN_ARROW:
                                return focusNextOption();

                              case keyCodes.SPACE:
                              case keyCodes.ENTER:
                                var option = $mdUtil.getClosest(ev.target, "md-option");
                                if (option) {
                                    dropDown.triggerHandler({
                                        type: "click",
                                        target: option
                                    });
                                    ev.preventDefault();
                                }
                                checkCloseMenu(ev);
                                break;

                              case keyCodes.TAB:
                              case keyCodes.ESCAPE:
                                ev.stopPropagation();
                                ev.preventDefault();
                                opts.restoreFocus = !0;
                                $mdUtil.nextTick($mdSelect.hide, !0);
                                break;

                              default:
                                if (ev.keyCode >= 31 && ev.keyCode <= 90) {
                                    var optNode = dropDown.controller("mdSelectMenu").optNodeForKeyboardSearch(ev);
                                    opts.focusedNode = optNode || opts.focusedNode;
                                    optNode && optNode.focus();
                                }
                            }
                        }
                        function focusOption(direction) {
                            var newOption, optionsArray = $mdUtil.nodesToArray(opts.optionNodes), index = optionsArray.indexOf(opts.focusedNode);
                            do {
                                -1 === index ? index = 0 : "next" === direction && index < optionsArray.length - 1 ? index++ : "prev" === direction && index > 0 && index--;
                                newOption = optionsArray[index];
                                newOption.hasAttribute("disabled") && (newOption = undefined);
                            } while (!newOption && index < optionsArray.length - 1 && index > 0);
                            newOption && newOption.focus();
                            opts.focusedNode = newOption;
                        }
                        function focusNextOption() {
                            focusOption("next");
                        }
                        function focusPrevOption() {
                            focusOption("prev");
                        }
                        function checkCloseMenu(ev) {
                            if (!(ev && "click" == ev.type && ev.currentTarget != dropDown[0] || function() {
                                var clickOnScrollbar = !1;
                                if (ev && ev.currentTarget.children.length > 0) {
                                    var child = ev.currentTarget.children[0];
                                    if (child.scrollHeight > child.clientHeight && child.children.length > 0) {
                                        ev.pageX - ev.currentTarget.getBoundingClientRect().left > child.querySelector("md-option").offsetWidth && (clickOnScrollbar = !0);
                                    }
                                }
                                return clickOnScrollbar;
                            }())) {
                                var option = $mdUtil.getClosest(ev.target, "md-option");
                                if (option && option.hasAttribute && !option.hasAttribute("disabled")) {
                                    ev.preventDefault();
                                    ev.stopPropagation();
                                    if (!selectCtrl.isMultiple) {
                                        opts.restoreFocus = !0;
                                        $mdUtil.nextTick(function() {
                                            $mdSelect.hide(selectCtrl.ngModel.$viewValue);
                                        }, !0);
                                    }
                                }
                            }
                        }
                        if (!opts.isRemoved) {
                            var dropDown = opts.selectEl, selectCtrl = dropDown.controller("mdSelectMenu") || {};
                            element.addClass("md-clickable");
                            opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                            dropDown.on("keydown", onMenuKeyDown);
                            dropDown.on("click", checkCloseMenu);
                            return function() {
                                opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                                dropDown.off("keydown", onMenuKeyDown);
                                dropDown.off("click", checkCloseMenu);
                                element.removeClass("md-clickable");
                                opts.isRemoved = !0;
                            };
                        }
                    }
                    !function() {
                        if (opts.loadingAsync && !opts.isRemoved) {
                            scope.$$loadingAsyncDone = !1;
                            scope.progressMode = "indeterminate";
                            $q.when(opts.loadingAsync).then(function() {
                                scope.$$loadingAsyncDone = !0;
                                scope.progressMode = "";
                                delete opts.loadingAsync;
                            }).then(function() {
                                $$rAF(positionAndFocusMenu);
                            });
                        }
                    }();
                    !function(scope, options) {
                        var selectEl = element.find("md-select-menu");
                        if (!options.target) throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [ options.target ]));
                        angular.extend(options, {
                            isRemoved: !1,
                            target: angular.element(options.target),
                            parent: angular.element(options.parent),
                            selectEl: selectEl,
                            contentEl: element.find("md-content"),
                            optionNodes: selectEl[0].getElementsByTagName("md-option")
                        });
                    }(0, opts);
                    opts.hideBackdrop = function(scope, element, options) {
                        options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                        if (options.hasBackdrop) {
                            options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");
                            $animate.enter(options.backdrop, $document[0].body, null, {
                                duration: 0
                            });
                        }
                        return function() {
                            options.backdrop && options.backdrop.remove();
                            options.disableParentScroll && options.restoreScroll();
                            delete options.restoreScroll;
                        };
                    }(scope, element, opts);
                    return function(scope, element, opts) {
                        opts.parent.append(element);
                        return $q(function(resolve, reject) {
                            try {
                                $animateCss(element, {
                                    removeClass: "md-leave",
                                    duration: 0
                                }).start().then(positionAndFocusMenu).then(resolve);
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }(scope, element, opts).then(function(response) {
                        element.attr("aria-hidden", "false");
                        opts.alreadyOpen = !0;
                        opts.cleanupInteraction = activateInteraction();
                        opts.cleanupResizing = activateResizing();
                        return response;
                    }, opts.hideBackdrop);
                }
                function announceClosed(opts) {
                    var mdSelect = opts.selectCtrl;
                    if (mdSelect) {
                        var menuController = opts.selectEl.controller("mdSelectMenu");
                        mdSelect.setLabelText(menuController.selectedLabels());
                        mdSelect.triggerClose();
                    }
                }
                function calculateMenuPositions(scope, element, opts) {
                    var centeredNode, containerNode = element[0], targetNode = opts.target[0].children[0], parentNode = $document[0].body, selectNode = opts.selectEl[0], contentNode = opts.contentEl[0], parentRect = parentNode.getBoundingClientRect(), targetRect = targetNode.getBoundingClientRect(), bounds = {
                        left: parentRect.left + SELECT_EDGE_MARGIN,
                        top: SELECT_EDGE_MARGIN,
                        bottom: parentRect.height - SELECT_EDGE_MARGIN,
                        right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)
                    }, spaceAvailable = {
                        top: targetRect.top - bounds.top,
                        left: targetRect.left - bounds.left,
                        right: bounds.right - (targetRect.left + targetRect.width),
                        bottom: bounds.bottom - (targetRect.top + targetRect.height)
                    }, maxWidth = parentRect.width - 2 * SELECT_EDGE_MARGIN, isScrollable = contentNode.scrollHeight > contentNode.offsetHeight, selectedNode = selectNode.querySelector("md-option[selected]"), optionNodes = selectNode.getElementsByTagName("md-option"), optgroupNodes = selectNode.getElementsByTagName("md-optgroup"), loading = isPromiseLike(opts.loadingAsync);
                    centeredNode = loading ? contentNode.firstElementChild || contentNode : selectedNode || (optgroupNodes.length ? optgroupNodes[0] : optionNodes.length ? optionNodes[0] : contentNode.firstElementChild || contentNode);
                    contentNode.offsetWidth > maxWidth ? contentNode.style["max-width"] = maxWidth + "px" : contentNode.style.maxWidth = null;
                    isScrollable && selectNode.classList.add("md-overflow");
                    var focusedNode = centeredNode;
                    if ("MD-OPTGROUP" === (focusedNode.tagName || "").toUpperCase()) {
                        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;
                        centeredNode = focusedNode;
                    }
                    opts.focusedNode = focusedNode;
                    containerNode.style.display = "block";
                    var selectMenuRect = selectNode.getBoundingClientRect(), centeredRect = getOffsetRect(centeredNode);
                    if (centeredNode) {
                        var centeredStyle = $window.getComputedStyle(centeredNode);
                        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;
                        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;
                    }
                    if (isScrollable) {
                        var scrollBuffer = contentNode.offsetHeight / 2;
                        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;
                        spaceAvailable.top < scrollBuffer ? contentNode.scrollTop = Math.min(centeredRect.top, contentNode.scrollTop + scrollBuffer - spaceAvailable.top) : spaceAvailable.bottom < scrollBuffer && (contentNode.scrollTop = Math.max(centeredRect.top + centeredRect.height - selectMenuRect.height, contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom));
                    }
                    var left, top, transformOrigin, minWidth;
                    left = targetRect.left + centeredRect.left - centeredRect.paddingLeft + 2;
                    top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 - centeredRect.top + contentNode.scrollTop) + 4;
                    transformOrigin = centeredRect.left + targetRect.width / 2 + "px " + (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + "px 0px";
                    minWidth = Math.min(targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight, maxWidth);
                    var containerRect = containerNode.getBoundingClientRect(), scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1)) / 100, scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1)) / 100;
                    return {
                        container: {
                            element: angular.element(containerNode),
                            styles: {
                                left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),
                                top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),
                                "min-width": minWidth
                            }
                        },
                        dropDown: {
                            element: angular.element(selectNode),
                            styles: {
                                transformOrigin: transformOrigin,
                                transform: opts.alreadyOpen ? "" : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ])
                            }
                        }
                    };
                }
                var ERRROR_TARGET_EXPECTED = "$mdSelect.show() expected a target element in options.target but got '{0}'!", animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    themable: !0,
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: !0,
                    disableParentScroll: !0
                };
            }
            function isPromiseLike(obj) {
                return obj && angular.isFunction(obj.then);
            }
            function clamp(min, n, max) {
                return Math.max(min, Math.min(n, max));
            }
            function getOffsetRect(node) {
                return node ? {
                    left: node.offsetLeft,
                    top: node.offsetTop,
                    width: node.offsetWidth,
                    height: node.offsetHeight
                } : {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                };
            }
            selectDefaultOptions.$inject = [ "$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate", "$document" ];
            return $$interimElementProvider("$mdSelect").setDefaults({
                methods: [ "target" ],
                options: selectDefaultOptions
            });
        }
        var SELECT_EDGE_MARGIN = 8, selectNextId = 0;
        angular.module("material.components.select", [ "material.core", "material.components.backdrop" ]).directive("mdSelect", SelectDirective).directive("mdSelectMenu", SelectMenuDirective).directive("mdOption", OptionDirective).directive("mdOptgroup", OptgroupDirective).provider("$mdSelect", SelectProvider);
        SelectDirective.$inject = [ "$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse" ];
        SelectMenuDirective.$inject = [ "$parse", "$mdUtil", "$mdTheming" ];
        OptionDirective.$inject = [ "$mdButtonInkRipple", "$mdUtil" ];
        SelectProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {
            function compile(tElement, tAttrs) {
                tElement.attr({
                    tabIndex: 0,
                    role: "slider"
                });
                $mdAria.expect(tElement, "aria-label");
                return postLink;
            }
            function postLink(scope, element, attr, ngModelCtrl) {
                function updateAll() {
                    refreshSliderDimensions();
                    ngModelRender();
                    redrawTicks();
                }
                function updateMin(value) {
                    min = parseFloat(value);
                    element.attr("aria-valuemin", value);
                    updateAll();
                }
                function updateMax(value) {
                    max = parseFloat(value);
                    element.attr("aria-valuemax", value);
                    updateAll();
                }
                function updateStep(value) {
                    step = parseFloat(value);
                    redrawTicks();
                }
                function updateAriaDisabled(isDisabled) {
                    element.attr("aria-disabled", !!isDisabled);
                }
                function redrawTicks() {
                    if (angular.isDefined(attr.mdDiscrete) && !angular.isUndefined(step)) {
                        if (step <= 0) {
                            var msg = "Slider step value must be greater than zero when in discrete mode";
                            $log.error(msg);
                            throw new Error(msg);
                        }
                        var numSteps = Math.floor((max - min) / step);
                        if (!tickCanvas) {
                            tickCanvas = angular.element('<canvas style="position:absolute;">');
                            tickContainer.append(tickCanvas);
                            var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
                            tickCtx = tickCanvas[0].getContext("2d");
                            tickCtx.fillStyle = trackTicksStyle.backgroundColor || "black";
                        }
                        var dimensions = getSliderDimensions();
                        tickCanvas[0].width = dimensions.width;
                        tickCanvas[0].height = dimensions.height;
                        for (var distance, i = 0; i <= numSteps; i++) {
                            distance = Math.floor(dimensions.width * (i / numSteps));
                            tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
                        }
                    }
                }
                function refreshSliderDimensions() {
                    sliderDimensions = trackContainer[0].getBoundingClientRect();
                }
                function getSliderDimensions() {
                    throttledRefreshDimensions();
                    return sliderDimensions;
                }
                function keydownListener(ev) {
                    if (!element[0].hasAttribute("disabled")) {
                        var changeAmount;
                        ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW ? changeAmount = -step : ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW && (changeAmount = step);
                        if (changeAmount) {
                            (ev.metaKey || ev.ctrlKey || ev.altKey) && (changeAmount *= 4);
                            ev.preventDefault();
                            ev.stopPropagation();
                            scope.$evalAsync(function() {
                                setModelValue(ngModelCtrl.$viewValue + changeAmount);
                            });
                        }
                    }
                }
                function setModelValue(value) {
                    ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)));
                }
                function ngModelRender() {
                    isNaN(ngModelCtrl.$viewValue) && (ngModelCtrl.$viewValue = ngModelCtrl.$modelValue);
                    var percent = (ngModelCtrl.$viewValue - min) / (max - min);
                    scope.modelValue = ngModelCtrl.$viewValue;
                    element.attr("aria-valuenow", ngModelCtrl.$viewValue);
                    setSliderPercent(percent);
                    thumbText.text(ngModelCtrl.$viewValue);
                }
                function minMaxValidator(value) {
                    if (angular.isNumber(value)) return Math.max(min, Math.min(max, value));
                }
                function stepValidator(value) {
                    if (angular.isNumber(value)) {
                        var formattedValue = Math.round((value - min) / step) * step + min;
                        return Math.round(1e3 * formattedValue) / 1e3;
                    }
                }
                function setSliderPercent(percent) {
                    var percentStr = 100 * percent + "%";
                    activeTrack.css("width", percentStr);
                    thumbContainer.css("left", percentStr);
                    element.toggleClass("md-min", 0 === percent);
                    element.toggleClass("md-max", 1 === percent);
                }
                function onPressDown(ev) {
                    if (!isDisabledGetter()) {
                        element.addClass("md-active");
                        element[0].focus();
                        refreshSliderDimensions();
                        var exactVal = percentToValue(positionToPercent(ev.pointer.x)), closestVal = minMaxValidator(stepValidator(exactVal));
                        scope.$apply(function() {
                            setModelValue(closestVal);
                            setSliderPercent(valueToPercent(closestVal));
                        });
                    }
                }
                function onPressUp(ev) {
                    if (!isDisabledGetter()) {
                        element.removeClass("md-dragging md-active");
                        var exactVal = percentToValue(positionToPercent(ev.pointer.x)), closestVal = minMaxValidator(stepValidator(exactVal));
                        scope.$apply(function() {
                            setModelValue(closestVal);
                            ngModelRender();
                        });
                    }
                }
                function onDragStart(ev) {
                    if (!isDisabledGetter()) {
                        isDragging = !0;
                        ev.stopPropagation();
                        element.addClass("md-dragging");
                        setSliderFromEvent(ev);
                    }
                }
                function onDrag(ev) {
                    if (isDragging) {
                        ev.stopPropagation();
                        setSliderFromEvent(ev);
                    }
                }
                function onDragEnd(ev) {
                    if (isDragging) {
                        ev.stopPropagation();
                        isDragging = !1;
                    }
                }
                function setSliderFromEvent(ev) {
                    isDiscrete ? adjustThumbPosition(ev.pointer.x) : doSlide(ev.pointer.x);
                }
                function doSlide(x) {
                    scope.$evalAsync(function() {
                        setModelValue(percentToValue(positionToPercent(x)));
                    });
                }
                function adjustThumbPosition(x) {
                    var exactVal = percentToValue(positionToPercent(x)), closestVal = minMaxValidator(stepValidator(exactVal));
                    setSliderPercent(positionToPercent(x));
                    thumbText.text(closestVal);
                }
                function positionToPercent(x) {
                    return Math.max(0, Math.min(1, (x - sliderDimensions.left) / sliderDimensions.width));
                }
                function percentToValue(percent) {
                    return min + percent * (max - min);
                }
                function valueToPercent(val) {
                    return (val - min) / (max - min);
                }
                $mdTheming(element);
                ngModelCtrl = ngModelCtrl || {
                    $setViewValue: function(val) {
                        this.$viewValue = val;
                        this.$viewChangeListeners.forEach(function(cb) {
                            cb();
                        });
                    },
                    $parsers: [],
                    $formatters: [],
                    $viewChangeListeners: []
                };
                var isDisabledGetter = angular.noop;
                null != attr.disabled ? isDisabledGetter = function() {
                    return !0;
                } : attr.ngDisabled && (isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent));
                var thumb = angular.element(element[0].querySelector(".md-thumb")), thumbText = angular.element(element[0].querySelector(".md-thumb-text")), thumbContainer = thumb.parent(), trackContainer = angular.element(element[0].querySelector(".md-track-container")), activeTrack = angular.element(element[0].querySelector(".md-track-fill")), tickContainer = angular.element(element[0].querySelector(".md-track-ticks")), throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5e3);
                angular.isDefined(attr.min) ? attr.$observe("min", updateMin) : updateMin(0);
                angular.isDefined(attr.max) ? attr.$observe("max", updateMax) : updateMax(100);
                angular.isDefined(attr.step) ? attr.$observe("step", updateStep) : updateStep(1);
                var stopDisabledWatch = angular.noop;
                attr.ngDisabled && (stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled));
                $mdGesture.register(element, "drag");
                element.on("keydown", keydownListener).on("$md.pressdown", onPressDown).on("$md.pressup", onPressUp).on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                setTimeout(updateAll, 0);
                var debouncedUpdateAll = $$rAF.throttle(updateAll);
                angular.element($window).on("resize", debouncedUpdateAll);
                scope.$on("$destroy", function() {
                    angular.element($window).off("resize", debouncedUpdateAll);
                    stopDisabledWatch();
                });
                ngModelCtrl.$render = ngModelRender;
                ngModelCtrl.$viewChangeListeners.push(ngModelRender);
                ngModelCtrl.$formatters.push(minMaxValidator);
                ngModelCtrl.$formatters.push(stepValidator);
                var min, max, step, tickCanvas, tickCtx, sliderDimensions = {};
                refreshSliderDimensions();
                var isDragging = !1, isDiscrete = angular.isDefined(attr.mdDiscrete);
            }
            return {
                scope: {},
                require: "?ngModel",
                template: '<div class="md-slider-wrapper"><div class="md-track-container"><div class="md-track"></div><div class="md-track md-track-fill"></div><div class="md-track-ticks"></div></div><div class="md-thumb-container"><div class="md-thumb"></div><div class="md-focus-thumb"></div><div class="md-focus-ring"></div><div class="md-sign"><span class="md-thumb-text"></span></div><div class="md-disabled-thumb"></div></div></div>',
                compile: compile
            };
        }
        angular.module("material.components.slider", [ "material.core" ]).directive("mdSlider", SliderDirective);
        SliderDirective.$inject = [ "$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log" ];
    }();
    !function() {
        function SidenavService($mdComponentRegistry, $q) {
            return function(handle) {
                function waitForInstance() {
                    return $mdComponentRegistry.when(handle).then(function(it) {
                        instance = it;
                        return it;
                    });
                }
                var errorMsg = "SideNav '" + handle + "' is not available!", instance = $mdComponentRegistry.get(handle);
                instance || $mdComponentRegistry.notFoundError(handle);
                return {
                    isOpen: function() {
                        return instance && instance.isOpen();
                    },
                    isLockedOpen: function() {
                        return instance && instance.isLockedOpen();
                    },
                    toggle: function() {
                        return instance ? instance.toggle() : $q.reject(errorMsg);
                    },
                    open: function() {
                        return instance ? instance.open() : $q.reject(errorMsg);
                    },
                    close: function() {
                        return instance ? instance.close() : $q.reject(errorMsg);
                    },
                    then: function(callbackFn) {
                        return (instance ? $q.when(instance) : waitForInstance()).then(callbackFn || angular.noop);
                    }
                };
            };
        }
        function SidenavFocusDirective() {
            return {
                restrict: "A",
                require: "^mdSidenav",
                link: function(scope, element, attr, sidenavCtrl) {}
            };
        }
        function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
            function postLink(scope, element, attr, sidenavCtrl) {
                function updateIsLocked(isLocked, oldValue) {
                    scope.isLockedOpen = isLocked;
                    isLocked === oldValue ? element.toggleClass("md-locked-open", !!isLocked) : $animate[isLocked ? "addClass" : "removeClass"](element, "md-locked-open");
                    backdrop.toggleClass("md-locked-open", !!isLocked);
                }
                function updateIsOpen(isOpen) {
                    var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element, "[md-sidenav-focus]") || element, parent = element.parent();
                    parent[isOpen ? "on" : "off"]("keydown", onKeyDown);
                    backdrop[isOpen ? "on" : "off"]("click", close);
                    isOpen && (triggeringElement = $document[0].activeElement);
                    disableParentScroll(isOpen);
                    return promise = $q.all([ isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop), $animate[isOpen ? "removeClass" : "addClass"](element, "md-closed") ]).then(function() {
                        scope.isOpen && focusEl && focusEl.focus();
                    });
                }
                function disableParentScroll(disabled) {
                    var parent = element.parent();
                    if (disabled && !lastParentOverFlow) {
                        lastParentOverFlow = parent.css("overflow");
                        parent.css("overflow", "hidden");
                    } else if (angular.isDefined(lastParentOverFlow)) {
                        parent.css("overflow", lastParentOverFlow);
                        lastParentOverFlow = undefined;
                    }
                }
                function toggleOpen(isOpen) {
                    return scope.isOpen == isOpen ? $q.when(!0) : $q(function(resolve) {
                        scope.isOpen = isOpen;
                        $mdUtil.nextTick(function() {
                            promise.then(function(result) {
                                if (!scope.isOpen) {
                                    triggeringElement && triggeringElement.focus();
                                    triggeringElement = null;
                                }
                                resolve(result);
                            });
                        });
                    });
                }
                function onKeyDown(ev) {
                    return ev.keyCode === $mdConstant.KEY_CODE.ESCAPE ? close(ev) : $q.when(!0);
                }
                function close(ev) {
                    ev.preventDefault();
                    return sidenavCtrl.close();
                }
                var lastParentOverFlow, triggeringElement = null, promise = $q.when(!0), isLockedOpenParsed = $parse(attr.mdIsLockedOpen), isLocked = function() {
                    return isLockedOpenParsed(scope.$parent, {
                        $media: function(arg) {
                            $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");
                            return $mdMedia(arg);
                        },
                        $mdMedia: $mdMedia
                    });
                }, backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");
                $mdTheming.inherit(backdrop, element);
                element.on("$destroy", function() {
                    backdrop.remove();
                    sidenavCtrl.destroy();
                });
                scope.$on("$destroy", function() {
                    backdrop.remove();
                });
                scope.$watch(isLocked, updateIsLocked);
                scope.$watch("isOpen", updateIsOpen);
                sidenavCtrl.$toggleOpen = toggleOpen;
            }
            return {
                restrict: "E",
                scope: {
                    isOpen: "=?mdIsOpen"
                },
                controller: "$mdSidenavController",
                compile: function(element) {
                    element.addClass("md-closed");
                    element.attr("tabIndex", "-1");
                    return postLink;
                }
            };
        }
        function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {
            var self = this;
            self.isOpen = function() {
                return !!$scope.isOpen;
            };
            self.isLockedOpen = function() {
                return !!$scope.isLockedOpen;
            };
            self.open = function() {
                return self.$toggleOpen(!0);
            };
            self.close = function() {
                return self.$toggleOpen(!1);
            };
            self.toggle = function() {
                return self.$toggleOpen(!$scope.isOpen);
            };
            self.$toggleOpen = function(value) {
                return $q.when($scope.isOpen = value);
            };
            self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
        }
        angular.module("material.components.sidenav", [ "material.core", "material.components.backdrop" ]).factory("$mdSidenav", SidenavService).directive("mdSidenav", SidenavDirective).directive("mdSidenavFocus", SidenavFocusDirective).controller("$mdSidenavController", SidenavController);
        SidenavService.$inject = [ "$mdComponentRegistry", "$q" ];
        SidenavDirective.$inject = [ "$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document" ];
        SidenavController.$inject = [ "$scope", "$element", "$attrs", "$mdComponentRegistry", "$q" ];
    }();
    !function() {
        function MdSticky($document, $mdConstant, $$rAF, $mdUtil) {
            function setupSticky(contentCtrl) {
                function add(element, stickyClone) {
                    stickyClone.addClass("md-sticky-clone");
                    var item = {
                        element: element,
                        clone: stickyClone
                    };
                    self.items.push(item);
                    $mdUtil.nextTick(function() {
                        contentEl.prepend(item.clone);
                    });
                    debouncedRefreshElements();
                    return function() {
                        self.items.forEach(function(item, index) {
                            if (item.element[0] === element[0]) {
                                self.items.splice(index, 1);
                                item.clone.remove();
                            }
                        });
                        debouncedRefreshElements();
                    };
                }
                function refreshElements() {
                    self.items.forEach(refreshPosition);
                    self.items = self.items.sort(function(a, b) {
                        return a.top < b.top ? -1 : 1;
                    });
                    for (var item, currentScrollTop = contentEl.prop("scrollTop"), i = self.items.length - 1; i >= 0; i--) if (currentScrollTop > self.items[i].top) {
                        item = self.items[i];
                        break;
                    }
                    setCurrentItem(item);
                }
                function refreshPosition(item) {
                    var current = item.element[0];
                    item.top = 0;
                    item.left = 0;
                    for (;current && current !== contentEl[0]; ) {
                        item.top += current.offsetTop;
                        item.left += current.offsetLeft;
                        current = current.offsetParent;
                    }
                    item.height = item.element.prop("offsetHeight");
                    item.clone.css("margin-left", item.left + "px");
                    $mdUtil.floatingScrollbars() && item.clone.css("margin-right", "0");
                }
                function onScroll() {
                    var scrollTop = contentEl.prop("scrollTop"), isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);
                    onScroll.prevScrollTop = scrollTop;
                    if (0 !== scrollTop) {
                        if (isScrollingDown) {
                            if (self.next && self.next.top <= scrollTop) {
                                setCurrentItem(self.next);
                                return;
                            }
                            if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {
                                translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));
                                return;
                            }
                        }
                        if (!isScrollingDown) {
                            if (self.current && self.prev && scrollTop < self.current.top) {
                                setCurrentItem(self.prev);
                                return;
                            }
                            if (self.next && self.current && scrollTop >= self.next.top - self.current.height) {
                                translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));
                                return;
                            }
                        }
                        self.current && translate(self.current, scrollTop);
                    } else setCurrentItem(null);
                }
                function setCurrentItem(item) {
                    if (self.current !== item) {
                        if (self.current) {
                            translate(self.current, null);
                            setStickyState(self.current, null);
                        }
                        item && setStickyState(item, "active");
                        self.current = item;
                        var index = self.items.indexOf(item);
                        self.next = self.items[index + 1];
                        self.prev = self.items[index - 1];
                        setStickyState(self.next, "next");
                        setStickyState(self.prev, "prev");
                    }
                }
                function setStickyState(item, state) {
                    if (item && item.state !== state) {
                        if (item.state) {
                            item.clone.attr("sticky-prev-state", item.state);
                            item.element.attr("sticky-prev-state", item.state);
                        }
                        item.clone.attr("sticky-state", state);
                        item.element.attr("sticky-state", state);
                        item.state = state;
                    }
                }
                function translate(item, amount) {
                    if (item) if (null === amount || amount === undefined) {
                        if (item.translateY) {
                            item.translateY = null;
                            item.clone.css($mdConstant.CSS.TRANSFORM, "");
                        }
                    } else {
                        item.translateY = amount;
                        item.clone.css($mdConstant.CSS.TRANSFORM, "translate3d(" + item.left + "px," + amount + "px,0)");
                    }
                }
                var contentEl = contentCtrl.$element, debouncedRefreshElements = $$rAF.throttle(refreshElements);
                setupAugmentedScrollEvents(contentEl);
                contentEl.on("$scrollstart", debouncedRefreshElements);
                contentEl.on("$scroll", onScroll);
                var self;
                return self = {
                    prev: null,
                    current: null,
                    next: null,
                    items: [],
                    add: add,
                    refreshElements: refreshElements
                };
            }
            function setupAugmentedScrollEvents(element) {
                function loopScrollEvent() {
                    if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
                        isScrolling = !1;
                        element.triggerHandler("$scrollend");
                    } else {
                        element.triggerHandler("$scroll");
                        $$rAF.throttle(loopScrollEvent);
                    }
                }
                var isScrolling, lastScrollTime, SCROLL_END_DELAY = 200;
                element.on("scroll touchmove", function() {
                    if (!isScrolling) {
                        isScrolling = !0;
                        $$rAF.throttle(loopScrollEvent);
                        element.triggerHandler("$scrollstart");
                    }
                    element.triggerHandler("$scroll");
                    lastScrollTime = +$mdUtil.now();
                });
            }
            var browserStickySupport = function($el) {
                var stickyProp, testEl = angular.element("<div>");
                $document[0].body.appendChild(testEl[0]);
                for (var stickyProps = [ "sticky", "-webkit-sticky" ], i = 0; i < stickyProps.length; ++i) {
                    testEl.css({
                        position: stickyProps[i],
                        top: 0,
                        "z-index": 2
                    });
                    if (testEl.css("position") == stickyProps[i]) {
                        stickyProp = stickyProps[i];
                        break;
                    }
                }
                testEl.remove();
                return stickyProp;
            }();
            return function(scope, element, stickyClone) {
                var contentCtrl = element.controller("mdContent");
                if (contentCtrl) if (browserStickySupport) element.css({
                    position: browserStickySupport,
                    top: 0,
                    "z-index": 2
                }); else {
                    var $$sticky = contentCtrl.$element.data("$$sticky");
                    if (!$$sticky) {
                        $$sticky = setupSticky(contentCtrl);
                        contentCtrl.$element.data("$$sticky", $$sticky);
                    }
                    var deregister = $$sticky.add(element, stickyClone || element.clone());
                    scope.$on("$destroy", deregister);
                }
            };
        }
        angular.module("material.components.sticky", [ "material.core", "material.components.content" ]).factory("$mdSticky", MdSticky);
        MdSticky.$inject = [ "$document", "$mdConstant", "$$rAF", "$mdUtil" ];
    }();
    !function() {
        function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                template: '<div class="md-subheader">  <div class="md-subheader-inner">    <span class="md-subheader-content"></span>  </div></div>',
                link: function(scope, element, attr, controllers, transclude) {
                    function getContent(el) {
                        return angular.element(el[0].querySelector(".md-subheader-content"));
                    }
                    $mdTheming(element);
                    var outerHTML = element[0].outerHTML;
                    transclude(scope, function(clone) {
                        getContent(element).append(clone);
                    });
                    element.hasClass("md-no-sticky") || transclude(scope, function(clone) {
                        var wrapperHtml = '<div class="md-subheader-wrapper">' + outerHTML + "</div>", stickyClone = $compile(wrapperHtml)(scope);
                        $mdSticky(scope, element, stickyClone);
                        $mdUtil.nextTick(function() {
                            getContent(stickyClone).append(clone);
                        });
                    });
                }
            };
        }
        angular.module("material.components.subheader", [ "material.core", "material.components.sticky" ]).directive("mdSubheader", MdSubheaderDirective);
        MdSubheaderDirective.$inject = [ "$mdSticky", "$compile", "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {
            function mdSwitchCompile(element, attr) {
                var checkboxLink = checkboxDirective.compile(element, attr);
                element.addClass("md-dragging");
                return function(scope, element, attr, ngModel) {
                    function onDragStart(ev) {
                        if (!disabledGetter || !disabledGetter(scope)) {
                            ev.stopPropagation();
                            element.addClass("md-dragging");
                            drag = {
                                width: thumbContainer.prop("offsetWidth")
                            };
                            element.removeClass("transition");
                        }
                    }
                    function onDrag(ev) {
                        if (drag) {
                            ev.stopPropagation();
                            ev.srcEvent && ev.srcEvent.preventDefault();
                            var percent = ev.pointer.distanceX / drag.width, translate = ngModel.$viewValue ? 1 + percent : percent;
                            translate = Math.max(0, Math.min(1, translate));
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "translate3d(" + 100 * translate + "%,0,0)");
                            drag.translate = translate;
                        }
                    }
                    function onDragEnd(ev) {
                        if (drag) {
                            ev.stopPropagation();
                            element.removeClass("md-dragging");
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "");
                            (ngModel.$viewValue ? drag.translate > .5 : drag.translate < .5) && applyModelValue(!ngModel.$viewValue);
                            drag = null;
                        }
                    }
                    function applyModelValue(newValue) {
                        scope.$apply(function() {
                            ngModel.$setViewValue(newValue);
                            ngModel.$render();
                        });
                    }
                    ngModel = ngModel || $mdUtil.fakeNgModel();
                    var disabledGetter = null;
                    null != attr.disabled ? disabledGetter = function() {
                        return !0;
                    } : attr.ngDisabled && (disabledGetter = $parse(attr.ngDisabled));
                    var thumbContainer = angular.element(element[0].querySelector(".md-thumb-container")), switchContainer = angular.element(element[0].querySelector(".md-container"));
                    $$rAF(function() {
                        element.removeClass("md-dragging");
                    });
                    checkboxLink(scope, element, attr, ngModel);
                    disabledGetter && scope.$watch(disabledGetter, function(isDisabled) {
                        element.attr("tabindex", isDisabled ? -1 : 0);
                    });
                    $mdGesture.register(switchContainer, "drag");
                    switchContainer.on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                    var drag;
                };
            }
            var checkboxDirective = mdCheckboxDirective[0];
            return {
                restrict: "E",
                priority: 210,
                transclude: !0,
                template: '<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',
                require: "?ngModel",
                compile: mdSwitchCompile
            };
        }
        angular.module("material.components.switch", [ "material.core", "material.components.checkbox" ]).directive("mdSwitch", MdSwitch);
        MdSwitch.$inject = [ "mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture" ];
    }();
    !function() {
        function getDirective(name) {
            function DirectiveFactory($parse) {
                function postLink(scope, element, attr) {
                    var fn = $parse(attr[directiveName]);
                    element.on(eventName, function(ev) {
                        scope.$apply(function() {
                            fn(scope, {
                                $event: ev
                            });
                        });
                    });
                }
                return {
                    restrict: "A",
                    link: postLink
                };
            }
            var directiveName = "md" + name, eventName = "$md." + name.toLowerCase();
            DirectiveFactory.$inject = [ "$parse" ];
            return DirectiveFactory;
        }
        angular.module("material.components.swipe", [ "material.core" ]).directive("mdSwipeLeft", getDirective("SwipeLeft")).directive("mdSwipeRight", getDirective("SwipeRight")).directive("mdSwipeUp", getDirective("SwipeUp")).directive("mdSwipeDown", getDirective("SwipeDown"));
    }();
    !function() {
        angular.module("material.components.tabs", [ "material.core", "material.components.icon" ]);
    }();
    !function() {
        function MdToastDirective($mdToast) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    scope.$on("$destroy", function() {
                        $mdToast.destroy();
                    });
                }
            };
        }
        function MdToastProvider($$interimElementProvider) {
            function updateTextContent(newContent) {
                activeToastContent = newContent;
            }
            function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {
                function onShow(scope, element, options) {
                    activeToastContent = options.textContent || options.content;
                    var isSmScreen = !$mdMedia("gt-sm");
                    element = $mdUtil.extractElementByName(element, "md-toast", !0);
                    options.onSwipe = function(ev, gesture) {
                        var swipe = ev.type.replace("$md.", ""), direction = swipe.replace("swipe", "");
                        if (("down" !== direction || -1 == options.position.indexOf("top") || isSmScreen) && ("up" !== direction || -1 == options.position.indexOf("bottom") && !isSmScreen) && ("left" !== direction && "right" !== direction || !isSmScreen)) {
                            element.addClass("md-" + swipe);
                            $mdUtil.nextTick($mdToast.cancel);
                        }
                    };
                    options.openClass = toastOpenClass(options.position);
                    options.parent.addClass(options.openClass);
                    $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "relative");
                    element.on(SWIPE_EVENTS, options.onSwipe);
                    element.addClass(isSmScreen ? "md-bottom" : options.position.split(" ").map(function(pos) {
                        return "md-" + pos;
                    }).join(" "));
                    options.parent && options.parent.addClass("md-toast-animating");
                    return $animate.enter(element, options.parent).then(function() {
                        options.parent && options.parent.removeClass("md-toast-animating");
                    });
                }
                function onRemove(scope, element, options) {
                    element.off(SWIPE_EVENTS, options.onSwipe);
                    options.parent && options.parent.addClass("md-toast-animating");
                    options.openClass && options.parent.removeClass(options.openClass);
                    return (1 == options.$destroy ? element.remove() : $animate.leave(element)).then(function() {
                        options.parent && options.parent.removeClass("md-toast-animating");
                        $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "");
                    });
                }
                function toastOpenClass(position) {
                    return $mdMedia("gt-sm") ? "md-toast-open-" + (position.indexOf("top") > -1 ? "top" : "bottom") : "md-toast-open-bottom";
                }
                var SWIPE_EVENTS = "$md.swipeleft $md.swiperight $md.swipeup $md.swipedown";
                return {
                    onShow: onShow,
                    onRemove: onRemove,
                    position: "bottom left",
                    themable: !0,
                    hideDelay: 3e3,
                    autoWrap: !0,
                    transformTemplate: function(template, options) {
                        var shouldAddWrapper = options.autoWrap && template && !/md-toast-content/g.test(template);
                        if (shouldAddWrapper) {
                            var parsedTemplate = angular.element(template), wrappedContent = '<div class="md-toast-content">' + parsedTemplate.html() + "</div>";
                            parsedTemplate.empty().append(wrappedContent);
                            return parsedTemplate[0].outerHTML;
                        }
                        return shouldAddWrapper ? '<div class="md-toast-content">' + template + "</div>" : template || "";
                    }
                };
            }
            var activeToastContent, $mdToast = $$interimElementProvider("$mdToast").setDefaults({
                methods: [ "position", "hideDelay", "capsule", "parent" ],
                options: toastDefaultOptions
            }).addPreset("simple", {
                argOption: "textContent",
                methods: [ "textContent", "content", "action", "highlightAction", "theme", "parent" ],
                options: [ "$mdToast", "$mdTheming", function($mdToast, $mdTheming) {
                    return {
                        template: '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">  <div class="md-toast-content">    <span flex role="alert" aria-relevant="all" aria-atomic="true">      {{ toast.content }}    </span>    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">      {{ toast.action }}    </md-button>  </div></md-toast>',
                        controller: [ "$scope", function($scope) {
                            var self = this;
                            $scope.$watch(function() {
                                return activeToastContent;
                            }, function() {
                                self.content = activeToastContent;
                            });
                            this.resolve = function() {
                                $mdToast.hide("ok");
                            };
                        } ],
                        theme: $mdTheming.defaultTheme(),
                        controllerAs: "toast",
                        bindToController: !0
                    };
                } ]
            }).addMethod("updateTextContent", updateTextContent).addMethod("updateContent", updateTextContent);
            toastDefaultOptions.$inject = [ "$animate", "$mdToast", "$mdUtil", "$mdMedia" ];
            return $mdToast;
        }
        angular.module("material.components.toast", [ "material.core", "material.components.button" ]).directive("mdToast", MdToastDirective).provider("$mdToast", MdToastProvider);
        MdToastDirective.$inject = [ "$mdToast" ];
        MdToastProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {
            var translateY = angular.bind(null, $mdUtil.supplant, "translate3d(0,{0}px,0)");
            return {
                template: "",
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    angular.isDefined(attr.mdScrollShrink) && function() {
                        function onChangeScrollShrink(shrinkWithScroll) {
                            var closestContent = element.parent().find("md-content");
                            !contentElement && closestContent.length && onMdContentLoad(null, closestContent);
                            shrinkWithScroll = scope.$eval(shrinkWithScroll);
                            !1 === shrinkWithScroll ? disableScrollShrink() : disableScrollShrink = enableScrollShrink();
                        }
                        function onMdContentLoad($event, newContentEl) {
                            if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {
                                contentElement && contentElement.off("scroll", debouncedContentScroll);
                                contentElement = newContentEl;
                                disableScrollShrink = enableScrollShrink();
                            }
                        }
                        function onContentScroll(e) {
                            var scrollTop = e ? e.target.scrollTop : prevScrollTop;
                            debouncedUpdateHeight();
                            y = Math.min(toolbarHeight / shrinkSpeedFactor, Math.max(0, y + scrollTop - prevScrollTop));
                            element.css($mdConstant.CSS.TRANSFORM, translateY([ -y * shrinkSpeedFactor ]));
                            contentElement.css($mdConstant.CSS.TRANSFORM, translateY([ (toolbarHeight - y) * shrinkSpeedFactor ]));
                            prevScrollTop = scrollTop;
                            $mdUtil.nextTick(function() {
                                var hasWhiteFrame = element.hasClass("md-whiteframe-z1");
                                hasWhiteFrame && !y ? $animate.removeClass(element, "md-whiteframe-z1") : !hasWhiteFrame && y && $animate.addClass(element, "md-whiteframe-z1");
                            });
                        }
                        function enableScrollShrink() {
                            if (!contentElement) return angular.noop;
                            contentElement.on("scroll", debouncedContentScroll);
                            contentElement.attr("scroll-shrink", "true");
                            $$rAF(updateToolbarHeight);
                            return function() {
                                contentElement.off("scroll", debouncedContentScroll);
                                contentElement.attr("scroll-shrink", "false");
                                $$rAF(updateToolbarHeight);
                            };
                        }
                        function updateToolbarHeight() {
                            toolbarHeight = element.prop("offsetHeight");
                            var margin = -toolbarHeight * shrinkSpeedFactor + "px";
                            contentElement.css({
                                "margin-top": margin,
                                "margin-bottom": margin
                            });
                            onContentScroll();
                        }
                        var toolbarHeight, contentElement, disableScrollShrink = angular.noop, y = 0, prevScrollTop = 0, shrinkSpeedFactor = attr.mdShrinkSpeedFactor || .5, debouncedContentScroll = $$rAF.throttle(onContentScroll), debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5e3);
                        scope.$on("$mdContentLoaded", onMdContentLoad);
                        attr.$observe("mdScrollShrink", onChangeScrollShrink);
                        attr.ngShow && scope.$watch(attr.ngShow, updateToolbarHeight);
                        attr.ngHide && scope.$watch(attr.ngHide, updateToolbarHeight);
                        scope.$on("$destroy", disableScrollShrink);
                    }();
                }
            };
        }
        angular.module("material.components.toolbar", [ "material.core", "material.components.content" ]).directive("mdToolbar", mdToolbarDirective);
        mdToolbarDirective.$inject = [ "$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate" ];
    }();
    !function() {
        function VirtualRepeatContainerDirective() {
            return {
                controller: VirtualRepeatContainerController,
                template: virtualRepeatContainerTemplate,
                compile: function($element, $attrs) {
                    $element.addClass("md-virtual-repeat-container").addClass($attrs.hasOwnProperty("mdOrientHorizontal") ? "md-orient-horizontal" : "md-orient-vertical");
                }
            };
        }
        function virtualRepeatContainerTemplate($element) {
            return '<div class="md-virtual-repeat-scroller"><div class="md-virtual-repeat-sizer"></div><div class="md-virtual-repeat-offsetter">' + $element[0].innerHTML + "</div></div>";
        }
        function VirtualRepeatContainerController($$rAF, $mdUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {
            this.$rootScope = $rootScope;
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.size = 0;
            this.scrollSize = 0;
            this.scrollOffset = 0;
            this.horizontal = this.$attrs.hasOwnProperty("mdOrientHorizontal");
            this.repeater = null;
            this.autoShrink = this.$attrs.hasOwnProperty("mdAutoShrink");
            this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;
            this.originalSize = null;
            this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;
            if (this.$attrs.mdTopIndex) {
                this.bindTopIndex = $parse(this.$attrs.mdTopIndex);
                this.topIndex = this.bindTopIndex(this.$scope);
                if (!angular.isDefined(this.topIndex)) {
                    this.topIndex = 0;
                    this.bindTopIndex.assign(this.$scope, 0);
                }
                this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {
                    newIndex !== this.topIndex && this.scrollToIndex(newIndex);
                }));
            } else this.topIndex = 0;
            this.scroller = $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0];
            this.sizer = this.scroller.getElementsByClassName("md-virtual-repeat-sizer")[0];
            this.offsetter = this.scroller.getElementsByClassName("md-virtual-repeat-offsetter")[0];
            var boundUpdateSize = angular.bind(this, this.updateSize);
            $$rAF(angular.bind(this, function() {
                boundUpdateSize();
                var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, !1), jWindow = angular.element($window);
                this.size || debouncedUpdateSize();
                jWindow.on("resize", debouncedUpdateSize);
                $scope.$on("$destroy", function() {
                    jWindow.off("resize", debouncedUpdateSize);
                });
                $scope.$emit("$md-resize-enable");
                $scope.$on("$md-resize", boundUpdateSize);
            }));
        }
        function VirtualRepeatDirective($parse) {
            return {
                controller: VirtualRepeatController,
                priority: 1e3,
                require: [ "mdVirtualRepeat", "^^mdVirtualRepeatContainer" ],
                restrict: "A",
                terminal: !0,
                transclude: "element",
                compile: function($element, $attrs) {
                    var expression = $attrs.mdVirtualRepeat, match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/), repeatName = match[1], repeatListExpression = $parse(match[2]), extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);
                    return function($scope, $element, $attrs, ctrl, $transclude) {
                        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
                    };
                }
            };
        }
        function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope, $$rAF) {
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.$browser = $browser;
            this.$document = $document;
            this.$rootScope = $rootScope;
            this.$$rAF = $$rAF;
            this.onDemand = $attrs.hasOwnProperty("mdOnDemand");
            this.browserCheckUrlChange = $browser.$$checkUrlChange;
            this.newStartIndex = 0;
            this.newEndIndex = 0;
            this.newVisibleEnd = 0;
            this.startIndex = 0;
            this.endIndex = 0;
            this.itemSize = $scope.$eval($attrs.mdItemSize) || null;
            this.isFirstRender = !0;
            this.isVirtualRepeatUpdating_ = !1;
            this.itemsLength = 0;
            this.unwatchItemSize_ = angular.noop;
            this.blocks = {};
            this.pooledBlocks = [];
        }
        function VirtualRepeatModelArrayLike(model) {
            if (!angular.isFunction(model.getItemAtIndex) || !angular.isFunction(model.getLength)) throw Error("When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement functions getItemAtIndex() and getLength() ");
            this.model = model;
        }
        angular.module("material.components.virtualRepeat", [ "material.core", "material.components.showHide" ]).directive("mdVirtualRepeatContainer", VirtualRepeatContainerDirective).directive("mdVirtualRepeat", VirtualRepeatDirective);
        VirtualRepeatContainerController.$inject = [ "$$rAF", "$mdUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs" ];
        VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {
            this.repeater = repeaterCtrl;
            angular.element(this.scroller).on("scroll wheel touchmove touchend", angular.bind(this, this.handleScroll_));
        };
        VirtualRepeatContainerController.prototype.isHorizontal = function() {
            return this.horizontal;
        };
        VirtualRepeatContainerController.prototype.getSize = function() {
            return this.size;
        };
        VirtualRepeatContainerController.prototype.setSize_ = function(size) {
            this.size = size;
            this.$element[0].style[this.isHorizontal() ? "width" : "height"] = size + "px";
        };
        VirtualRepeatContainerController.prototype.updateSize = function() {
            if (!this.originalSize) {
                this.size = this.isHorizontal() ? this.$element[0].clientWidth : this.$element[0].clientHeight;
                this.repeater && this.repeater.containerUpdated();
            }
        };
        VirtualRepeatContainerController.prototype.getScrollSize = function() {
            return this.scrollSize;
        };
        VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {
            var dimension = this.isHorizontal() ? "width" : "height", crossDimension = this.isHorizontal() ? "height" : "width";
            this.sizer.innerHTML = "";
            if (size < 1533917) this.sizer.style[dimension] = size + "px"; else {
                this.sizer.style[dimension] = "auto";
                this.sizer.style[crossDimension] = "auto";
                var numChildren = Math.floor(size / 1533917), sizerChild = document.createElement("div");
                sizerChild.style[dimension] = "1533917px";
                sizerChild.style[crossDimension] = "1px";
                for (var i = 0; i < numChildren; i++) this.sizer.appendChild(sizerChild.cloneNode(!1));
                sizerChild.style[dimension] = size - 1533917 * numChildren + "px";
                this.sizer.appendChild(sizerChild);
            }
        };
        VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {
            var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());
            if (this.autoShrink && shrinkSize !== this.size) {
                var currentSize = this.originalSize || this.size;
                if (!currentSize || shrinkSize < currentSize) {
                    this.originalSize || (this.originalSize = this.size);
                    this.setSize_(shrinkSize);
                } else if (this.originalSize) {
                    this.setSize_(this.originalSize);
                    this.originalSize = null;
                }
                this.repeater.containerUpdated();
            }
        };
        VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {
            var size = itemsSize + this.offsetSize;
            if (this.scrollSize !== size) {
                this.sizeScroller_(size);
                this.autoShrink_(size);
                this.scrollSize = size;
            }
        };
        VirtualRepeatContainerController.prototype.getScrollOffset = function() {
            return this.scrollOffset;
        };
        VirtualRepeatContainerController.prototype.scrollTo = function(position) {
            this.scroller[this.isHorizontal() ? "scrollLeft" : "scrollTop"] = position;
            this.handleScroll_();
        };
        VirtualRepeatContainerController.prototype.scrollToIndex = function(index) {
            var itemSize = this.repeater.getItemSize(), itemsLength = this.repeater.itemsLength;
            index > itemsLength && (index = itemsLength - 1);
            this.scrollTo(itemSize * index);
        };
        VirtualRepeatContainerController.prototype.resetScroll = function() {
            this.scrollTo(0);
        };
        VirtualRepeatContainerController.prototype.handleScroll_ = function() {
            var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;
            if (offset !== this.scrollOffset) {
                var itemSize = this.repeater.getItemSize();
                if (itemSize) {
                    var numItems = Math.max(0, Math.floor(offset / itemSize) - 3), transform = this.isHorizontal() ? "translateX(" : "translateY(";
                    transform += numItems * itemSize + "px)";
                    this.scrollOffset = offset;
                    this.offsetter.style.webkitTransform = transform;
                    this.offsetter.style.transform = transform;
                    if (this.bindTopIndex) {
                        var topIndex = Math.floor(offset / itemSize);
                        if (topIndex !== this.topIndex && topIndex < this.repeater.itemsLength) {
                            this.topIndex = topIndex;
                            this.bindTopIndex.assign(this.$scope, topIndex);
                            this.$rootScope.$$phase || this.$scope.$digest();
                        }
                    }
                    this.repeater.containerUpdated();
                }
            }
        };
        VirtualRepeatDirective.$inject = [ "$parse" ];
        VirtualRepeatController.$inject = [ "$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF" ];
        VirtualRepeatController.Block;
        VirtualRepeatController.prototype.link_ = function(container, transclude, repeatName, repeatListExpression, extraName) {
            this.container = container;
            this.transclude = transclude;
            this.repeatName = repeatName;
            this.rawRepeatListExpression = repeatListExpression;
            this.extraName = extraName;
            this.sized = !1;
            this.repeatListExpression = angular.bind(this, this.repeatListExpression_);
            this.container.register(this);
        };
        VirtualRepeatController.prototype.readItemSize_ = function() {
            if (!this.itemSize) {
                this.items = this.repeatListExpression(this.$scope);
                this.parentNode = this.$element[0].parentNode;
                var block = this.getBlock_(0);
                block.element[0].parentNode || this.parentNode.appendChild(block.element[0]);
                this.itemSize = block.element[0][this.container.isHorizontal() ? "offsetWidth" : "offsetHeight"] || null;
                this.blocks[0] = block;
                this.poolBlock_(0);
                this.itemSize && this.containerUpdated();
            }
        };
        VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {
            var repeatList = this.rawRepeatListExpression(scope);
            if (this.onDemand && repeatList) {
                var virtualList = new VirtualRepeatModelArrayLike(repeatList);
                virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);
                return virtualList;
            }
            return repeatList;
        };
        VirtualRepeatController.prototype.containerUpdated = function() {
            if (this.itemSize) {
                this.sized || (this.items = this.repeatListExpression(this.$scope));
                if (!this.sized) {
                    this.unwatchItemSize_();
                    this.sized = !0;
                    this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items, oldItems) {
                        this.isVirtualRepeatUpdating_ || this.virtualRepeatUpdate_(items, oldItems);
                    }));
                }
                this.updateIndexes_();
                if (this.newStartIndex !== this.startIndex || this.newEndIndex !== this.endIndex || this.container.getScrollOffset() > this.container.getScrollSize()) {
                    this.items instanceof VirtualRepeatModelArrayLike && this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);
                    this.virtualRepeatUpdate_(this.items, this.items);
                }
            } else {
                this.unwatchItemSize_ = this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items) {
                    items && items.length && this.$$rAF(angular.bind(this, this.readItemSize_));
                }));
                this.$rootScope.$$phase || this.$scope.$digest();
            }
        };
        VirtualRepeatController.prototype.getItemSize = function() {
            return this.itemSize;
        };
        VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {
            this.isVirtualRepeatUpdating_ = !0;
            var itemsLength = items && items.length || 0, lengthChanged = !1;
            if (this.items && itemsLength < this.items.length && 0 !== this.container.getScrollOffset()) {
                this.items = items;
                this.container.resetScroll();
            } else {
                if (itemsLength !== this.itemsLength) {
                    lengthChanged = !0;
                    this.itemsLength = itemsLength;
                }
                this.items = items;
                (items !== oldItems || lengthChanged) && this.updateIndexes_();
                this.parentNode = this.$element[0].parentNode;
                lengthChanged && this.container.setScrollSize(itemsLength * this.itemSize);
                if (this.isFirstRender) {
                    this.isFirstRender = !1;
                    var startIndex = this.$attrs.mdStartIndex ? this.$scope.$eval(this.$attrs.mdStartIndex) : this.container.topIndex;
                    this.container.scrollToIndex(startIndex);
                }
                Object.keys(this.blocks).forEach(function(blockIndex) {
                    var index = parseInt(blockIndex, 10);
                    (index < this.newStartIndex || index >= this.newEndIndex) && this.poolBlock_(index);
                }, this);
                this.$browser.$$checkUrlChange = angular.noop;
                var i, block, newStartBlocks = [], newEndBlocks = [];
                for (i = this.newStartIndex; i < this.newEndIndex && null == this.blocks[i]; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newStartBlocks.push(block);
                }
                for (;null != this.blocks[i]; i++) this.updateBlock_(this.blocks[i], i);
                for (var maxIndex = i - 1; i < this.newEndIndex; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newEndBlocks.push(block);
                }
                newStartBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newStartBlocks), this.$element[0].nextSibling);
                newEndBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newEndBlocks), this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
                this.$browser.$$checkUrlChange = this.browserCheckUrlChange;
                this.startIndex = this.newStartIndex;
                this.endIndex = this.newEndIndex;
                this.isVirtualRepeatUpdating_ = !1;
            }
        };
        VirtualRepeatController.prototype.getBlock_ = function(index) {
            if (this.pooledBlocks.length) return this.pooledBlocks.pop();
            var block;
            this.transclude(angular.bind(this, function(clone, scope) {
                block = {
                    element: clone,
                    new: !0,
                    scope: scope
                };
                this.updateScope_(scope, index);
                this.parentNode.appendChild(clone[0]);
            }));
            return block;
        };
        VirtualRepeatController.prototype.updateBlock_ = function(block, index) {
            this.blocks[index] = block;
            if (block.new || block.scope.$index !== index || block.scope[this.repeatName] !== this.items[index]) {
                block.new = !1;
                this.updateScope_(block.scope, index);
                this.$rootScope.$$phase || block.scope.$digest();
            }
        };
        VirtualRepeatController.prototype.updateScope_ = function(scope, index) {
            scope.$index = index;
            scope[this.repeatName] = this.items && this.items[index];
            this.extraName && (scope[this.extraName(this.$scope)] = this.items[index]);
        };
        VirtualRepeatController.prototype.poolBlock_ = function(index) {
            this.pooledBlocks.push(this.blocks[index]);
            this.parentNode.removeChild(this.blocks[index].element[0]);
            delete this.blocks[index];
        };
        VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {
            var fragment = this.$document[0].createDocumentFragment();
            blocks.forEach(function(block) {
                fragment.appendChild(block.element[0]);
            });
            return fragment;
        };
        VirtualRepeatController.prototype.updateIndexes_ = function() {
            var itemsLength = this.items ? this.items.length : 0, containerLength = Math.ceil(this.container.getSize() / this.itemSize);
            this.newStartIndex = Math.max(0, Math.min(itemsLength - containerLength, Math.floor(this.container.getScrollOffset() / this.itemSize)));
            this.newVisibleEnd = this.newStartIndex + containerLength + 3;
            this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);
            this.newStartIndex = Math.max(0, this.newStartIndex - 3);
        };
        VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {
            for (var i = start; i < end; i++) this.hasOwnProperty(i) || (this[i] = this.model.getItemAtIndex(i));
            this.length = this.model.getLength();
        };
    }();
    !function() {
        function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {
            function postLink(scope, element, attr) {
                function updateContentOrigin() {
                    var origin = "center top";
                    switch (scope.direction) {
                      case "left":
                        origin = "right center";
                        break;

                      case "right":
                        origin = "left center";
                        break;

                      case "top":
                        origin = "center bottom";
                        break;

                      case "bottom":
                        origin = "center top";
                    }
                    content.css("transform-origin", origin);
                }
                function setVisible(value) {
                    setVisible.value = !!value;
                    if (!setVisible.queued) if (value) {
                        setVisible.queued = !0;
                        $timeout(function() {
                            scope.visible = setVisible.value;
                            setVisible.queued = !1;
                        }, scope.delay);
                    } else $mdUtil.nextTick(function() {
                        scope.visible = !1;
                    });
                }
                function showTooltip() {
                    tooltipParent.append(element);
                    if ($mdUtil.hasComputedStyle(element, "display", "none")) {
                        scope.visible = !1;
                        element.detach();
                    } else {
                        updatePosition();
                        angular.forEach([ element, content ], function(element) {
                            $animate.addClass(element, "md-show");
                        });
                    }
                }
                function hideTooltip() {
                    var promises = [];
                    angular.forEach([ element, content ], function(it) {
                        it.parent() && it.hasClass("md-show") && promises.push($animate.removeClass(it, "md-show"));
                    });
                    $q.all(promises).then(function() {
                        scope.visible || element.detach();
                    });
                }
                function updatePosition() {
                    if (scope.visible) {
                        updateContentOrigin();
                        positionTooltip();
                    }
                }
                function positionTooltip() {
                    function fitInParent(pos) {
                        var newPosition = {
                            left: pos.left,
                            top: pos.top
                        };
                        newPosition.left = Math.min(newPosition.left, tooltipParent.prop("scrollWidth") - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.left = Math.max(newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.min(newPosition.top, tooltipParent.prop("scrollHeight") - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.max(newPosition.top, TOOLTIP_WINDOW_EDGE_SPACE);
                        return newPosition;
                    }
                    function getPosition(dir) {
                        return "left" === dir ? {
                            left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : "right" === dir ? {
                            left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : "top" === dir ? {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE
                        } : {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE
                        };
                    }
                    var tipRect = $mdUtil.offsetRect(element, tooltipParent), parentRect = $mdUtil.offsetRect(parent, tooltipParent), newPosition = getPosition(scope.direction), offsetParent = element.prop("offsetParent");
                    scope.direction ? newPosition = fitInParent(newPosition) : offsetParent && newPosition.top > offsetParent.scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE && (newPosition = fitInParent(getPosition("top")));
                    element.css({
                        left: newPosition.left + "px",
                        top: newPosition.top + "px"
                    });
                }
                $mdTheming(element);
                var parent = $mdUtil.getParentWithPointerEvents(element), content = angular.element(element[0].getElementsByClassName("md-content")[0]), tooltipParent = angular.element(document.body), debouncedOnResize = $$rAF.throttle(function() {
                    updatePosition();
                });
                $animate.pin && $animate.pin(element, parent);
                !function() {
                    angular.isDefined(attr.mdDelay) || (scope.delay = TOOLTIP_SHOW_DELAY);
                }();
                !function() {
                    element.detach();
                    element.attr("role", "tooltip");
                }();
                !function() {
                    function windowScrollHandler() {
                        setVisible(!1);
                    }
                    var mouseActive = !1, ngWindow = angular.element($window);
                    if (parent[0] && "MutationObserver" in $window) {
                        var attributeObserver = new MutationObserver(function(mutations) {
                            mutations.forEach(function(mutation) {
                                if ("disabled" === mutation.attributeName && parent[0].disabled) {
                                    setVisible(!1);
                                    scope.$digest();
                                }
                            });
                        });
                        attributeObserver.observe(parent[0], {
                            attributes: !0
                        });
                    }
                    var windowBlurHandler = function() {
                        elementFocusedOnWindowBlur = document.activeElement === parent[0];
                    }, elementFocusedOnWindowBlur = !1;
                    ngWindow.on("blur", windowBlurHandler);
                    ngWindow.on("resize", debouncedOnResize);
                    document.addEventListener("scroll", windowScrollHandler, !0);
                    scope.$on("$destroy", function() {
                        ngWindow.off("blur", windowBlurHandler);
                        ngWindow.off("resize", debouncedOnResize);
                        document.removeEventListener("scroll", windowScrollHandler, !0);
                        attributeObserver && attributeObserver.disconnect();
                    });
                    var enterHandler = function(e) {
                        if ("focus" === e.type && elementFocusedOnWindowBlur) elementFocusedOnWindowBlur = !1; else {
                            parent.on("blur mouseleave touchend touchcancel", leaveHandler);
                            setVisible(!0);
                        }
                    }, leaveHandler = function() {
                        if ((scope.hasOwnProperty("autohide") ? scope.autohide : attr.hasOwnProperty("mdAutohide")) || mouseActive || $document[0].activeElement !== parent[0]) {
                            parent.off("blur mouseleave touchend touchcancel", leaveHandler);
                            parent.triggerHandler("blur");
                            setVisible(!1);
                        }
                        mouseActive = !1;
                    };
                    parent.on("mousedown", function() {
                        mouseActive = !0;
                    });
                    parent.on("focus mouseenter touchstart", enterHandler);
                }();
                updateContentOrigin();
                !function() {
                    scope.$on("$destroy", function() {
                        scope.visible = !1;
                        element.remove();
                        angular.element($window).off("resize", debouncedOnResize);
                    });
                    scope.$watch("visible", function(isVisible) {
                        isVisible ? showTooltip() : hideTooltip();
                    });
                    scope.$watch("direction", updatePosition);
                }();
                !function() {
                    parent.attr("aria-label") || parent.text().trim() || parent.attr("aria-label", element.text().trim());
                }();
            }
            var TOOLTIP_SHOW_DELAY = 0, TOOLTIP_WINDOW_EDGE_SPACE = 8;
            return {
                restrict: "E",
                transclude: !0,
                priority: 210,
                template: '<div class="md-content" ng-transclude></div>',
                scope: {
                    delay: "=?mdDelay",
                    visible: "=?mdVisible",
                    autohide: "=?mdAutohide",
                    direction: "@?mdDirection"
                },
                link: postLink
            };
        }
        angular.module("material.components.tooltip", [ "material.core" ]).directive("mdTooltip", MdTooltipDirective);
        MdTooltipDirective.$inject = [ "$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q" ];
    }();
    !function() {
        angular.module("material.components.whiteframe", []);
    }();
    !function() {
        function MdAutocompleteCtrl($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window, $animate, $rootElement, $attrs, $q) {
            function positionDropdown() {
                function correctHorizontalAlignment() {
                    var dropdown = elements.scrollContainer.getBoundingClientRect(), styles = {};
                    dropdown.right > root.right - MENU_PADDING && (styles.left = hrect.right - dropdown.width + "px");
                    elements.$.scrollContainer.css(styles);
                }
                if (!elements) return $mdUtil.nextTick(positionDropdown, !1, $scope);
                var styles, hrect = elements.wrap.getBoundingClientRect(), vrect = elements.snap.getBoundingClientRect(), root = elements.root.getBoundingClientRect(), top = vrect.bottom - root.top, bot = root.bottom - vrect.top, left = hrect.left - root.left, width = hrect.width, offset = function() {
                    var offset = 0, inputContainer = $element.find("md-input-container");
                    if (inputContainer.length) {
                        var input = inputContainer.find("input");
                        offset = inputContainer.prop("offsetHeight");
                        offset -= input.prop("offsetTop");
                        offset -= input.prop("offsetHeight");
                        offset += inputContainer.prop("offsetTop");
                    }
                    return offset;
                }();
                if ($attrs.mdFloatingLabel) {
                    left += INPUT_PADDING;
                    width -= 2 * INPUT_PADDING;
                }
                styles = {
                    left: left + "px",
                    minWidth: width + "px",
                    maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + "px"
                };
                if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {
                    styles.top = "auto";
                    styles.bottom = bot + "px";
                    styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + "px";
                } else {
                    styles.top = top - offset + "px";
                    styles.bottom = "auto";
                    styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom + $mdUtil.scrollTop() - hrect.bottom - MENU_PADDING) + "px";
                }
                elements.$.scrollContainer.css(styles);
                $mdUtil.nextTick(correctHorizontalAlignment, !1);
            }
            function moveDropdown() {
                if (elements.$.root.length) {
                    $mdTheming(elements.$.scrollContainer);
                    elements.$.scrollContainer.detach();
                    elements.$.root.append(elements.$.scrollContainer);
                    $animate.pin && $animate.pin(elements.$.scrollContainer, $rootElement);
                }
            }
            function focusElement() {
                $scope.autofocus && elements.input.focus();
            }
            function configureWatchers() {
                var wait = parseInt($scope.delay, 10) || 0;
                $attrs.$observe("disabled", function(value) {
                    ctrl.isDisabled = !!value;
                });
                $attrs.$observe("required", function(value) {
                    ctrl.isRequired = !!value;
                });
                $scope.$watch("searchText", wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);
                $scope.$watch("selectedItem", selectedItemChange);
                angular.element($window).on("resize", positionDropdown);
                $scope.$on("$destroy", cleanup);
            }
            function cleanup() {
                angular.element($window).off("resize", positionDropdown);
                if (elements) {
                    var items = "ul scroller scrollContainer input".split(" ");
                    angular.forEach(items, function(key) {
                        elements.$[key].remove();
                    });
                }
            }
            function gatherElements() {
                elements = {
                    main: $element[0],
                    scrollContainer: $element[0].getElementsByClassName("md-virtual-repeat-container")[0],
                    scroller: $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0],
                    ul: $element.find("ul")[0],
                    input: $element.find("input")[0],
                    wrap: $element.find("md-autocomplete-wrap")[0],
                    root: document.body
                };
                elements.li = elements.ul.getElementsByTagName("li");
                elements.snap = getSnapTarget();
                elements.$ = getAngularElements(elements);
            }
            function getSnapTarget() {
                for (var element = $element; element.length; element = element.parent()) if (angular.isDefined(element.attr("md-autocomplete-snap"))) return element[0];
                return elements.wrap;
            }
            function getAngularElements(elements) {
                var obj = {};
                for (var key in elements) elements.hasOwnProperty(key) && (obj[key] = angular.element(elements[key]));
                return obj;
            }
            function handleHiddenChange(hidden, oldHidden) {
                if (!hidden && oldHidden) {
                    positionDropdown();
                    elements && $mdUtil.nextTick(function() {
                        $mdUtil.disableScrollAround(elements.ul);
                    }, !1, $scope);
                } else hidden && !oldHidden && $mdUtil.nextTick(function() {
                    $mdUtil.enableScrolling();
                }, !1, $scope);
            }
            function onListEnter() {
                noBlur = !0;
            }
            function onListLeave() {
                hasFocus || elements.input.focus();
                noBlur = !1;
                ctrl.hidden = shouldHide();
            }
            function onMouseup() {
                elements.input.focus();
            }
            function selectedItemChange(selectedItem, previousSelectedItem) {
                selectedItem && getDisplayValue(selectedItem).then(function(val) {
                    $scope.searchText = val;
                    handleSelectedItemChange(selectedItem, previousSelectedItem);
                });
                selectedItem !== previousSelectedItem && announceItemChange();
            }
            function announceItemChange() {
                angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));
            }
            function announceTextChange() {
                angular.isFunction($scope.textChange) && $scope.textChange();
            }
            function handleSelectedItemChange(selectedItem, previousSelectedItem) {
                selectedItemWatchers.forEach(function(watcher) {
                    watcher(selectedItem, previousSelectedItem);
                });
            }
            function registerSelectedItemWatcher(cb) {
                -1 == selectedItemWatchers.indexOf(cb) && selectedItemWatchers.push(cb);
            }
            function unregisterSelectedItemWatcher(cb) {
                var i = selectedItemWatchers.indexOf(cb);
                -1 != i && selectedItemWatchers.splice(i, 1);
            }
            function handleSearchText(searchText, previousSearchText) {
                ctrl.index = getDefaultIndex();
                searchText !== previousSearchText && getDisplayValue($scope.selectedItem).then(function(val) {
                    if (searchText !== val) {
                        $scope.selectedItem = null;
                        searchText !== previousSearchText && announceTextChange();
                        if (isMinLengthMet()) handleQuery(); else {
                            ctrl.matches = [];
                            setLoading(!1);
                            updateMessages();
                        }
                    }
                });
            }
            function blur() {
                hasFocus = !1;
                noBlur || (ctrl.hidden = shouldHide());
            }
            function doBlur(forceBlur) {
                if (forceBlur) {
                    noBlur = !1;
                    hasFocus = !1;
                }
                elements.input.blur();
            }
            function focus() {
                hasFocus = !0;
                angular.isString($scope.searchText) || ($scope.searchText = "");
                ctrl.hidden = shouldHide();
                ctrl.hidden || handleQuery();
            }
            function keydown(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.DOWN_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = Math.min(ctrl.index + 1, ctrl.matches.length - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.UP_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.TAB:
                    onListLeave();
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ENTER:
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    if (hasSelection()) return;
                    event.stopPropagation();
                    event.preventDefault();
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ESCAPE:
                    event.stopPropagation();
                    event.preventDefault();
                    clearValue();
                    doBlur(!0);
                }
            }
            function getMinLength() {
                return angular.isNumber($scope.minLength) ? $scope.minLength : 1;
            }
            function getDisplayValue(item) {
                return $q.when(function(item) {
                    return item && $scope.itemText ? $scope.itemText(getItemAsNameVal(item)) : null;
                }(item) || item);
            }
            function getItemAsNameVal(item) {
                if (!item) return undefined;
                var locals = {};
                ctrl.itemName && (locals[ctrl.itemName] = item);
                return locals;
            }
            function getDefaultIndex() {
                return $scope.autoselect ? 0 : -1;
            }
            function setLoading(value) {
                ctrl.loading != value && (ctrl.loading = value);
                ctrl.hidden = shouldHide();
            }
            function shouldHide() {
                return !(!ctrl.loading || hasMatches()) || (!!hasSelection() || (!hasFocus || !shouldShow()));
            }
            function shouldShow() {
                return isMinLengthMet() && hasMatches() || notFoundVisible();
            }
            function hasMatches() {
                return !!ctrl.matches.length;
            }
            function hasSelection() {
                return !!ctrl.scope.selectedItem;
            }
            function loadingIsVisible() {
                return ctrl.loading && !hasSelection();
            }
            function getCurrentDisplayValue() {
                return getDisplayValue(ctrl.matches[ctrl.index]);
            }
            function isMinLengthMet() {
                return ($scope.searchText || "").length >= getMinLength();
            }
            function select(index) {
                $mdUtil.nextTick(function() {
                    getDisplayValue(ctrl.matches[index]).then(function(val) {
                        var ngModel = elements.$.input.controller("ngModel");
                        ngModel.$setViewValue(val);
                        ngModel.$render();
                    }).finally(function() {
                        $scope.selectedItem = ctrl.matches[index];
                        setLoading(!1);
                    });
                }, !1);
            }
            function clearValue() {
                setLoading(!0);
                ctrl.index = 0;
                ctrl.matches = [];
                $scope.searchText = "";
                select(-1);
                var eventObj = document.createEvent("CustomEvent");
                eventObj.initCustomEvent("input", !0, !0, {
                    value: $scope.searchText
                });
                elements.input.dispatchEvent(eventObj);
                elements.input.focus();
            }
            function fetchResults(searchText) {
                function handleResults(matches) {
                    cache[term] = matches;
                    if ((searchText || "") === ($scope.searchText || "")) {
                        ctrl.matches = matches;
                        ctrl.hidden = shouldHide();
                        $scope.selectOnMatch && selectItemOnMatch();
                        updateMessages();
                        positionDropdown();
                    }
                }
                var items = $scope.$parent.$eval(itemExpr), term = searchText.toLowerCase();
                if (angular.isArray(items)) handleResults(items); else if (items) {
                    setLoading(!0);
                    $mdUtil.nextTick(function() {
                        items.success && items.success(handleResults);
                        items.then && items.then(handleResults);
                        items.finally && items.finally(function() {
                            setLoading(!1);
                        });
                    }, !0, $scope);
                }
            }
            function updateMessages() {
                getCurrentDisplayValue().then(function(msg) {
                    ctrl.messages = [ getCountMessage(), msg ];
                });
            }
            function getCountMessage() {
                if (lastCount === ctrl.matches.length) return "";
                lastCount = ctrl.matches.length;
                switch (ctrl.matches.length) {
                  case 0:
                    return "There are no matches available.";

                  case 1:
                    return "There is 1 match available.";

                  default:
                    return "There are " + ctrl.matches.length + " matches available.";
                }
            }
            function updateScroll() {
                if (elements.li[0]) {
                    var height = elements.li[0].offsetHeight, top = height * ctrl.index, bot = top + height, hgt = elements.scroller.clientHeight, scrollTop = elements.scroller.scrollTop;
                    top < scrollTop ? scrollTo(top) : bot > scrollTop + hgt && scrollTo(bot - hgt);
                }
            }
            function scrollTo(offset) {
                elements.$.scrollContainer.controller("mdVirtualRepeatContainer").scrollTo(offset);
            }
            function notFoundVisible() {
                var textLength = (ctrl.scope.searchText || "").length;
                return ctrl.hasNotFound && !hasMatches() && !ctrl.loading && textLength >= getMinLength() && hasFocus && !hasSelection();
            }
            function handleQuery() {
                var searchText = $scope.searchText || "", term = searchText.toLowerCase();
                if (!$scope.noCache && cache[term]) {
                    ctrl.matches = cache[term];
                    updateMessages();
                } else fetchResults(searchText);
                ctrl.hidden = shouldHide();
            }
            function selectItemOnMatch() {
                var searchText = $scope.searchText, matches = ctrl.matches, item = matches[0];
                1 === matches.length && getDisplayValue(item).then(function(displayValue) {
                    searchText == displayValue && select(0);
                });
            }
            var ctrl = this, itemParts = $scope.itemsExpr.split(/ in /i), itemExpr = itemParts[1], elements = null, cache = {}, noBlur = !1, selectedItemWatchers = [], hasFocus = !1, lastCount = 0;
            !function(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler(newValue, oldValue);
                    }
                });
            }("hidden", handleHiddenChange, !0);
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.itemName = itemParts[0];
            ctrl.matches = [];
            ctrl.loading = !1;
            ctrl.hidden = !0;
            ctrl.index = null;
            ctrl.messages = [];
            ctrl.id = $mdUtil.nextUid();
            ctrl.isDisabled = null;
            ctrl.isRequired = null;
            ctrl.hasNotFound = !1;
            ctrl.keydown = keydown;
            ctrl.blur = blur;
            ctrl.focus = focus;
            ctrl.clear = clearValue;
            ctrl.select = select;
            ctrl.listEnter = onListEnter;
            ctrl.listLeave = onListLeave;
            ctrl.mouseUp = onMouseup;
            ctrl.getCurrentDisplayValue = getCurrentDisplayValue;
            ctrl.registerSelectedItemWatcher = registerSelectedItemWatcher;
            ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;
            ctrl.notFoundVisible = notFoundVisible;
            ctrl.loadingIsVisible = loadingIsVisible;
            return function() {
                $mdUtil.initOptionalProperties($scope, $attrs, {
                    searchText: null,
                    selectedItem: null
                });
                $mdTheming($element);
                configureWatchers();
                $mdUtil.nextTick(function() {
                    gatherElements();
                    moveDropdown();
                    focusElement();
                    $element.on("focus", focusElement);
                });
            }();
        }
        angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl", MdAutocompleteCtrl);
        var MAX_HEIGHT = 225.5, MENU_PADDING = 8, INPUT_PADDING = 2;
        MdAutocompleteCtrl.$inject = [ "$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q" ];
    }();
    !function() {
        function MdAutocomplete() {
            var hasNotFoundTemplate = !1;
            return {
                controller: "MdAutocompleteCtrl",
                controllerAs: "$mdAutocompleteCtrl",
                scope: {
                    inputName: "@mdInputName",
                    inputMinlength: "@mdInputMinlength",
                    inputMaxlength: "@mdInputMaxlength",
                    searchText: "=?mdSearchText",
                    selectedItem: "=?mdSelectedItem",
                    itemsExpr: "@mdItems",
                    itemText: "&mdItemText",
                    placeholder: "@placeholder",
                    noCache: "=?mdNoCache",
                    selectOnMatch: "=?mdSelectOnMatch",
                    itemChange: "&?mdSelectedItemChange",
                    textChange: "&?mdSearchTextChange",
                    minLength: "=?mdMinLength",
                    delay: "=?mdDelay",
                    autofocus: "=?mdAutofocus",
                    floatingLabel: "@?mdFloatingLabel",
                    autoselect: "=?mdAutoselect",
                    menuClass: "@?mdMenuClass",
                    inputId: "@?mdInputId"
                },
                link: function(scope, element, attrs, controller) {
                    controller.hasNotFound = hasNotFoundTemplate;
                },
                template: function(element, attr) {
                    var noItemsTemplate = function() {
                        var templateTag = element.find("md-not-found").detach(), template = templateTag.length ? templateTag.html() : "";
                        return template ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"                         md-autocomplete-parent-scope>' + template + "</li>" : "";
                    }(), itemTemplate = function() {
                        var templateTag = element.find("md-item-template").detach(), html = templateTag.length ? templateTag.html() : element.html();
                        templateTag.length || element.empty();
                        return "<md-autocomplete-parent-scope md-autocomplete-replace>" + html + "</md-autocomplete-parent-scope>";
                    }(), leftover = element.html(), tabindex = attr.tabindex;
                    hasNotFoundTemplate = !!noItemsTemplate;
                    attr.hasOwnProperty("tabindex") || element.attr("tabindex", "-1");
                    return '        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"            role="listbox">          ' + function() {
                        return attr.mdFloatingLabel ? '            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="$mdAutocompleteCtrl.isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + "</div>            </md-input-container>" : '            <input flex type="search"                ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="$mdAutocompleteCtrl.isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                ';
                    }() + '          <md-progress-linear              class="' + (attr.mdFloatingLabel ? "md-inline" : "") + '"              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"              md-mode="indeterminate"></md-progress-linear>          <md-virtual-repeat-container              md-auto-shrink              md-auto-shrink-min="1"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"              ng-hide="$mdAutocompleteCtrl.hidden"              class="md-autocomplete-suggestions-container md-whiteframe-z1"              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"              role="presentation">            <ul class="md-autocomplete-suggestions"                ng-class="::menuClass"                id="ul-{{$mdAutocompleteCtrl.id}}">              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"                  ng-click="$mdAutocompleteCtrl.select($index)"                  md-extra-name="$mdAutocompleteCtrl.itemName">                  ' + itemTemplate + "                  </li>" + noItemsTemplate + '            </ul>          </md-virtual-repeat-container>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>        </aria-status>';
                }
            };
        }
        angular.module("material.components.autocomplete").directive("mdAutocomplete", MdAutocomplete);
    }();
    !function() {
        function MdAutocompleteItemScopeDirective($compile, $mdUtil) {
            function compile(tElement, tAttr, transclude) {
                return function(scope, element, attr) {
                    function watchVariable(variable, alias) {
                        newScope[alias] = scope[variable];
                        scope.$watch(variable, function(value) {
                            $mdUtil.nextTick(function() {
                                newScope[alias] = value;
                            });
                        });
                    }
                    var ctrl = scope.$mdAutocompleteCtrl, newScope = ctrl.parent.$new(), itemName = ctrl.itemName;
                    watchVariable("$index", "$index");
                    watchVariable("item", itemName);
                    !function() {
                        var scopeDigesting = !1, newScopeDigesting = !1;
                        scope.$watch(function() {
                            if (!newScopeDigesting && !scopeDigesting) {
                                scopeDigesting = !0;
                                scope.$$postDigest(function() {
                                    newScopeDigesting || newScope.$digest();
                                    scopeDigesting = newScopeDigesting = !1;
                                });
                            }
                        });
                        newScope.$watch(function() {
                            newScopeDigesting = !0;
                        });
                    }();
                    transclude(newScope, function(clone) {
                        element.after(clone);
                    });
                };
            }
            return {
                restrict: "AE",
                compile: compile,
                terminal: !0,
                transclude: "element"
            };
        }
        angular.module("material.components.autocomplete").directive("mdAutocompleteParentScope", MdAutocompleteItemScopeDirective);
        MdAutocompleteItemScopeDirective.$inject = [ "$compile", "$mdUtil" ];
    }();
    !function() {
        function MdHighlightCtrl($scope, $element, $attrs) {
            function init(termExpr, unsafeTextExpr) {
                var text = null, regex = null, flags = $attrs.mdHighlightFlags || "", watcher = $scope.$watch(function($scope) {
                    return {
                        term: termExpr($scope),
                        unsafeText: unsafeTextExpr($scope)
                    };
                }, function(state, prevState) {
                    null !== text && state.unsafeText === prevState.unsafeText || (text = angular.element("<div>").text(state.unsafeText).html());
                    null !== regex && state.term === prevState.term || (regex = getRegExp(state.term, flags));
                    $element.html(text.replace(regex, '<span class="highlight">$&</span>'));
                }, !0);
                $element.on("$destroy", watcher);
            }
            function sanitize(term) {
                return term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, "\\$&");
            }
            function getRegExp(text, flags) {
                var str = "";
                flags.indexOf("^") >= 1 && (str += "^");
                str += text;
                flags.indexOf("$") >= 1 && (str += "$");
                return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ""));
            }
            this.init = init;
        }
        angular.module("material.components.autocomplete").controller("MdHighlightCtrl", MdHighlightCtrl);
        MdHighlightCtrl.$inject = [ "$scope", "$element", "$attrs" ];
    }();
    !function() {
        function MdHighlight($interpolate, $parse) {
            return {
                terminal: !0,
                controller: "MdHighlightCtrl",
                compile: function(tElement, tAttr) {
                    var termExpr = $parse(tAttr.mdHighlightText), unsafeTextExpr = $interpolate(tElement.html());
                    return function(scope, element, attr, ctrl) {
                        ctrl.init(termExpr, unsafeTextExpr);
                    };
                }
            };
        }
        angular.module("material.components.autocomplete").directive("mdHighlightText", MdHighlight);
        MdHighlight.$inject = [ "$interpolate", "$parse" ];
    }();
    !function() {
        function MdChip($mdTheming, $mdUtil) {
            function compile(element, attr) {
                element.append($mdUtil.processTemplate(hintTemplate));
                return function(scope, element, attr, ctrl) {
                    element.addClass("md-chip");
                    $mdTheming(element);
                    ctrl && angular.element(element[0].querySelector(".md-chip-content")).on("blur", function() {
                        ctrl.selectedChip = -1;
                    });
                };
            }
            var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);
            return {
                restrict: "E",
                require: "^?mdChips",
                compile: compile
            };
        }
        angular.module("material.components.chips").directive("mdChip", MdChip);
        var DELETE_HINT_TEMPLATE = '    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';
        MdChip.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        function MdChipRemove($timeout) {
            function postLink(scope, element, attr, ctrl) {
                element.on("click", function(event) {
                    scope.$apply(function() {
                        ctrl.removeChip(scope.$$replacedScope.$index);
                    });
                });
                $timeout(function() {
                    element.attr({
                        tabindex: -1,
                        "aria-hidden": !0
                    });
                    element.find("button").attr("tabindex", "-1");
                });
            }
            return {
                restrict: "A",
                require: "^mdChips",
                scope: !1,
                link: postLink
            };
        }
        angular.module("material.components.chips").directive("mdChipRemove", MdChipRemove);
        MdChipRemove.$inject = [ "$timeout" ];
    }();
    !function() {
        function MdChipTransclude($compile) {
            function link(scope, element, attr) {
                var ctrl = scope.$parent.$mdChipsCtrl, newScope = ctrl.parent.$new(!1, ctrl.parent);
                newScope.$$replacedScope = scope;
                newScope.$chip = scope.$chip;
                newScope.$index = scope.$index;
                newScope.$mdChipsCtrl = ctrl;
                var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);
                element.html(newHtml);
                $compile(element.contents())(newScope);
            }
            return {
                restrict: "EA",
                terminal: !0,
                link: link,
                scope: !1
            };
        }
        angular.module("material.components.chips").directive("mdChipTransclude", MdChipTransclude);
        MdChipTransclude.$inject = [ "$compile" ];
    }();
    !function() {
        function MdChipsCtrl($scope, $mdConstant, $log, $element, $timeout) {
            this.$timeout = $timeout;
            this.$mdConstant = $mdConstant;
            this.$scope = $scope;
            this.parent = $scope.$parent;
            this.$log = $log;
            this.$element = $element;
            this.ngModelCtrl = null;
            this.userInputNgModelCtrl = null;
            this.userInputElement = null;
            this.items = [];
            this.selectedChip = -1;
            this.hasAutocomplete = !1;
            this.deleteHint = "Press delete to remove this chip.";
            this.deleteButtonLabel = "Remove";
            this.chipBuffer = "";
            this.useOnAppend = !1;
            this.useTransformChip = !1;
            this.useOnAdd = !1;
            this.useOnRemove = !1;
            this.useOnSelect = !1;
        }
        angular.module("material.components.chips").controller("MdChipsCtrl", MdChipsCtrl);
        MdChipsCtrl.$inject = [ "$scope", "$mdConstant", "$log", "$element", "$timeout" ];
        MdChipsCtrl.prototype.inputKeydown = function(event) {
            var chipBuffer = this.getChipBuffer();
            if (!(this.hasAutocomplete && event.isDefaultPrevented && event.isDefaultPrevented())) if (event.keyCode !== this.$mdConstant.KEY_CODE.BACKSPACE) {
                (!this.separatorKeys || this.separatorKeys.length < 1) && (this.separatorKeys = [ this.$mdConstant.KEY_CODE.ENTER ]);
                if (-1 !== this.separatorKeys.indexOf(event.keyCode)) {
                    if (this.hasAutocomplete && this.requireMatch || !chipBuffer) return;
                    event.preventDefault();
                    this.appendChip(chipBuffer);
                    this.resetChipBuffer();
                }
            } else {
                if (chipBuffer) return;
                event.preventDefault();
                event.stopPropagation();
                this.items.length && this.selectAndFocusChipSafe(this.items.length - 1);
            }
        };
        MdChipsCtrl.prototype.chipKeydown = function(event) {
            if (!this.getChipBuffer()) switch (event.keyCode) {
              case this.$mdConstant.KEY_CODE.BACKSPACE:
              case this.$mdConstant.KEY_CODE.DELETE:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.removeAndSelectAdjacentChip(this.selectedChip);
                break;

              case this.$mdConstant.KEY_CODE.LEFT_ARROW:
                event.preventDefault();
                this.selectedChip < 0 && (this.selectedChip = this.items.length);
                this.items.length && this.selectAndFocusChipSafe(this.selectedChip - 1);
                break;

              case this.$mdConstant.KEY_CODE.RIGHT_ARROW:
                event.preventDefault();
                this.selectAndFocusChipSafe(this.selectedChip + 1);
                break;

              case this.$mdConstant.KEY_CODE.ESCAPE:
              case this.$mdConstant.KEY_CODE.TAB:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.onFocus();
            }
        };
        MdChipsCtrl.prototype.getPlaceholder = function() {
            return this.items.length && ("" == this.secondaryPlaceholder || this.secondaryPlaceholder) ? this.placeholder : this.secondaryPlaceholder;
        };
        MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {
            var selIndex = this.getAdjacentChipIndex(index);
            this.removeChip(index);
            this.$timeout(angular.bind(this, function() {
                this.selectAndFocusChipSafe(selIndex);
            }));
        };
        MdChipsCtrl.prototype.resetSelectedChip = function() {
            this.selectedChip = -1;
        };
        MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {
            var len = this.items.length - 1;
            return 0 == len ? -1 : index == len ? index - 1 : index;
        };
        MdChipsCtrl.prototype.appendChip = function(newChip) {
            if (this.useTransformChip && this.transformChip) {
                var transformedChip = this.transformChip({
                    $chip: newChip
                });
                angular.isDefined(transformedChip) && (newChip = transformedChip);
            }
            if (angular.isObject(newChip)) {
                if (this.items.some(function(item) {
                    return angular.equals(newChip, item);
                })) return;
            }
            if (!(null == newChip || this.items.indexOf(newChip) + 1)) {
                var index = this.items.push(newChip);
                this.useOnAdd && this.onAdd && this.onAdd({
                    $chip: newChip,
                    $index: index
                });
            }
        };
        MdChipsCtrl.prototype.useOnAppendExpression = function() {
            this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead");
            if (!this.useTransformChip || !this.transformChip) {
                this.useTransformChip = !0;
                this.transformChip = this.onAppend;
            }
        };
        MdChipsCtrl.prototype.useTransformChipExpression = function() {
            this.useTransformChip = !0;
        };
        MdChipsCtrl.prototype.useOnAddExpression = function() {
            this.useOnAdd = !0;
        };
        MdChipsCtrl.prototype.useOnRemoveExpression = function() {
            this.useOnRemove = !0;
        };
        MdChipsCtrl.prototype.useOnSelectExpression = function() {
            this.useOnSelect = !0;
        };
        MdChipsCtrl.prototype.getChipBuffer = function() {
            return this.userInputElement ? this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue : this.userInputElement[0].value : this.chipBuffer;
        };
        MdChipsCtrl.prototype.resetChipBuffer = function() {
            if (this.userInputElement) if (this.userInputNgModelCtrl) {
                this.userInputNgModelCtrl.$setViewValue("");
                this.userInputNgModelCtrl.$render();
            } else this.userInputElement[0].value = ""; else this.chipBuffer = "";
        };
        MdChipsCtrl.prototype.removeChip = function(index) {
            var removed = this.items.splice(index, 1);
            removed && removed.length && this.useOnRemove && this.onRemove && this.onRemove({
                $chip: removed[0],
                $index: index
            });
        };
        MdChipsCtrl.prototype.removeChipAndFocusInput = function(index) {
            this.removeChip(index);
            this.onFocus();
        };
        MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {
            if (this.items.length) {
                if (index === this.items.length) return this.onFocus();
                index = Math.max(index, 0);
                index = Math.min(index, this.items.length - 1);
                this.selectChip(index);
                this.focusChip(index);
            } else {
                this.selectChip(-1);
                this.onFocus();
            }
        };
        MdChipsCtrl.prototype.selectChip = function(index) {
            if (index >= -1 && index <= this.items.length) {
                this.selectedChip = index;
                this.useOnSelect && this.onSelect && this.onSelect({
                    $chip: this.items[this.selectedChip]
                });
            } else this.$log.warn("Selected Chip index out of bounds; ignoring.");
        };
        MdChipsCtrl.prototype.selectAndFocusChip = function(index) {
            this.selectChip(index);
            -1 != index && this.focusChip(index);
        };
        MdChipsCtrl.prototype.focusChip = function(index) {
            this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();
        };
        MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;
            var self = this;
            ngModelCtrl.$render = function() {
                self.items = self.ngModelCtrl.$viewValue;
            };
        };
        MdChipsCtrl.prototype.onFocus = function() {
            var input = this.$element[0].querySelector("input");
            input && input.focus();
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputFocus = function() {
            this.inputHasFocus = !0;
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputBlur = function() {
            this.inputHasFocus = !1;
        };
        MdChipsCtrl.prototype.configureUserInput = function(inputElement) {
            this.userInputElement = inputElement;
            var ngModelCtrl = inputElement.controller("ngModel");
            ngModelCtrl != this.ngModelCtrl && (this.userInputNgModelCtrl = ngModelCtrl);
            var scope = this.$scope, ctrl = this, scopeApplyFn = function(event, fn) {
                scope.$evalAsync(angular.bind(ctrl, fn, event));
            };
            inputElement.attr({
                tabindex: 0
            }).on("keydown", function(event) {
                scopeApplyFn(event, ctrl.inputKeydown);
            }).on("focus", function(event) {
                scopeApplyFn(event, ctrl.onInputFocus);
            }).on("blur", function(event) {
                scopeApplyFn(event, ctrl.onInputBlur);
            });
        };
        MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {
            if (ctrl) {
                this.hasAutocomplete = !0;
                ctrl.registerSelectedItemWatcher(angular.bind(this, function(item) {
                    if (item) {
                        this.appendChip(item);
                        this.resetChipBuffer();
                    }
                }));
                this.$element.find("input").on("focus", angular.bind(this, this.onInputFocus)).on("blur", angular.bind(this, this.onInputBlur));
            }
        };
        MdChipsCtrl.prototype.hasFocus = function() {
            return this.inputHasFocus || this.selectedChip >= 0;
        };
    }();
    !function() {
        function MdChips($mdTheming, $mdUtil, $compile, $log, $timeout) {
            function compile(element, attr) {
                function getTemplateByQuery(query) {
                    if (attr.ngModel) {
                        var element = userTemplate[0].querySelector(query);
                        return element && element.outerHTML;
                    }
                }
                var userTemplate = attr.$mdUserTemplate;
                attr.$mdUserTemplate = null;
                var chipRemoveTemplate = getTemplateByQuery("md-chips>*[md-chip-remove]") || templates.remove, chipContentsTemplate = getTemplateByQuery("md-chips>md-chip-template") || templates.default, chipInputTemplate = getTemplateByQuery("md-chips>md-autocomplete") || getTemplateByQuery("md-chips>input") || templates.input, staticChips = userTemplate.find("md-chip");
                userTemplate[0].querySelector("md-chip-template>*[md-chip-remove]") && $log.warn("invalid placement of md-chip-remove within md-chip-template.");
                return function(scope, element, attrs, controllers) {
                    $mdUtil.initOptionalProperties(scope, attr);
                    $mdTheming(element);
                    var mdChipsCtrl = controllers[0];
                    mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;
                    mdChipsCtrl.chipRemoveTemplate = chipRemoveTemplate;
                    mdChipsCtrl.chipInputTemplate = chipInputTemplate;
                    element.attr({
                        "aria-hidden": !0,
                        tabindex: -1
                    }).on("focus", function() {
                        mdChipsCtrl.onFocus();
                    });
                    if (attr.ngModel) {
                        mdChipsCtrl.configureNgModel(element.controller("ngModel"));
                        attrs.mdTransformChip && mdChipsCtrl.useTransformChipExpression();
                        attrs.mdOnAppend && mdChipsCtrl.useOnAppendExpression();
                        attrs.mdOnAdd && mdChipsCtrl.useOnAddExpression();
                        attrs.mdOnRemove && mdChipsCtrl.useOnRemoveExpression();
                        attrs.mdOnSelect && mdChipsCtrl.useOnSelectExpression();
                        chipInputTemplate != templates.input && scope.$watch("$mdChipsCtrl.readonly", function(readonly) {
                            readonly || $mdUtil.nextTick(function() {
                                0 === chipInputTemplate.indexOf("<md-autocomplete") && mdChipsCtrl.configureAutocomplete(element.find("md-autocomplete").controller("mdAutocomplete"));
                                mdChipsCtrl.configureUserInput(element.find("input"));
                            });
                        });
                        $mdUtil.nextTick(function() {
                            var input = element.find("input");
                            input && input.toggleClass("md-input", !0);
                        });
                    }
                    if (staticChips.length > 0) {
                        var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);
                        $timeout(function() {
                            element.find("md-chips-wrap").prepend(compiledStaticChips);
                        });
                    }
                };
            }
            var templates = function() {
                return {
                    chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),
                    input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),
                    default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),
                    remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)
                };
            }();
            return {
                template: function(element, attrs) {
                    attrs.$mdUserTemplate = element.clone();
                    return templates.chips;
                },
                require: [ "mdChips" ],
                restrict: "E",
                controller: "MdChipsCtrl",
                controllerAs: "$mdChipsCtrl",
                bindToController: !0,
                compile: compile,
                scope: {
                    readonly: "=readonly",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    transformChip: "&mdTransformChip",
                    onAppend: "&mdOnAppend",
                    onAdd: "&mdOnAdd",
                    onRemove: "&mdOnRemove",
                    onSelect: "&mdOnSelect",
                    deleteHint: "@",
                    deleteButtonLabel: "@",
                    separatorKeys: "=?mdSeparatorKeys",
                    requireMatch: "=?mdRequireMatch"
                }
            };
        }
        angular.module("material.components.chips").directive("mdChips", MdChips);
        var MD_CHIPS_TEMPLATE = '      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div ng-if="!$mdChipsCtrl.readonly"               class="md-chip-remove-container"               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>', CHIP_INPUT_TEMPLATE = '        <input            class="md-input"            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">', CHIP_DEFAULT_TEMPLATE = "      <span>{{$chip}}</span>", CHIP_REMOVE_TEMPLATE = '      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';
        MdChips.$inject = [ "$mdTheming", "$mdUtil", "$compile", "$log", "$timeout" ];
    }();
    !function() {
        function MdContactChipsCtrl() {
            this.selectedItem = null;
            this.searchText = "";
        }
        angular.module("material.components.chips").controller("MdContactChipsCtrl", MdContactChipsCtrl);
        MdContactChipsCtrl.prototype.queryContact = function(searchText) {
            var results = this.contactQuery({
                $query: searchText
            });
            return this.filterSelected ? results.filter(angular.bind(this, this.filterSelectedContacts)) : results;
        };
        MdContactChipsCtrl.prototype.itemName = function(item) {
            return item[this.contactName];
        };
        MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {
            return -1 == this.contacts.indexOf(contact);
        };
    }();
    !function() {
        function MdContactChips($mdTheming, $mdUtil) {
            function compile(element, attr) {
                return function(scope, element, attrs, controllers) {
                    $mdUtil.initOptionalProperties(scope, attr);
                    $mdTheming(element);
                    element.attr("tabindex", "-1");
                };
            }
            return {
                template: function(element, attrs) {
                    return MD_CONTACT_CHIPS_TEMPLATE;
                },
                restrict: "E",
                controller: "MdContactChipsCtrl",
                controllerAs: "$mdContactChipsCtrl",
                bindToController: !0,
                compile: compile,
                scope: {
                    contactQuery: "&mdContacts",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    contactName: "@mdContactName",
                    contactImage: "@mdContactImage",
                    contactEmail: "@mdContactEmail",
                    contacts: "=ngModel",
                    requireMatch: "=?mdRequireMatch",
                    highlightFlags: "@?mdHighlightFlags"
                }
            };
        }
        angular.module("material.components.chips").directive("mdContactChips", MdContactChips);
        var MD_CONTACT_CHIPS_TEMPLATE = '      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.itemName(item)"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}"                  ng-if="item[$mdContactChipsCtrl.contactImage]" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';
        MdContactChips.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        function mdIconDirective($mdIcon, $mdTheming, $mdAria) {
            function postLink(scope, element, attr) {
                $mdTheming(element);
                !function() {
                    if (!scope.svgIcon && !scope.svgSrc) {
                        scope.fontIcon && element.addClass("md-font " + scope.fontIcon);
                        element.addClass($mdIcon.fontSet(scope.fontSet));
                    }
                }();
                var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text(), attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || "");
                if (!attr["aria-label"]) if ("" == label || function() {
                    var parent = element.parent();
                    return !(!parent.attr("aria-label") && !parent.text()) || !(!parent.parent().attr("aria-label") && !parent.parent().text());
                }()) element.text() || $mdAria.expect(element, "aria-hidden", "true"); else {
                    $mdAria.expect(element, "aria-label", label);
                    $mdAria.expect(element, "role", "img");
                }
                attrName && attr.$observe(attrName, function(attrVal) {
                    element.empty();
                    attrVal && $mdIcon(attrVal).then(function(svg) {
                        element.append(svg);
                    });
                });
            }
            return {
                scope: {
                    fontSet: "@mdFontSet",
                    fontIcon: "@mdFontIcon",
                    svgIcon: "@mdSvgIcon",
                    svgSrc: "@mdSvgSrc"
                },
                restrict: "E",
                link: postLink
            };
        }
        angular.module("material.components.icon").directive("mdIcon", [ "$mdIcon", "$mdTheming", "$mdAria", mdIconDirective ]);
    }();
    !function() {
        function MdIconProvider() {}
        function ConfigurationItem(url, viewBoxSize) {
            this.url = url;
            this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
        }
        function MdIconService(config, $http, $q, $log, $templateCache) {
            function getIcon(id) {
                id = id || "";
                if (iconCache[id]) return $q.when(iconCache[id].clone());
                if (urlRegex.test(id)) return loadByURL(id).then(cacheIcon(id));
                -1 == id.indexOf(":") && (id = "$default:" + id);
                return (config[id] ? loadByID : loadFromIconSet)(id).then(cacheIcon(id));
            }
            function findRegisteredFontSet(alias) {
                if (angular.isUndefined(alias) || !(alias && alias.length)) return config.defaultFontSet;
                var result = alias;
                angular.forEach(config.fontSets, function(it) {
                    it.alias == alias && (result = it.fontSet || result);
                });
                return result;
            }
            function cacheIcon(id) {
                return function(icon) {
                    iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);
                    return iconCache[id].clone();
                };
            }
            function loadByID(id) {
                var iconConfig = config[id];
                return loadByURL(iconConfig.url).then(function(icon) {
                    return new Icon(icon, iconConfig);
                });
            }
            function loadFromIconSet(id) {
                function extractFromSet(set) {
                    var iconName = id.slice(id.lastIndexOf(":") + 1), icon = set.querySelector("#" + iconName);
                    return icon ? new Icon(icon, iconSetConfig) : announceIdNotFound(id);
                }
                function announceIdNotFound(id) {
                    var msg = "icon " + id + " not found";
                    $log.warn(msg);
                    return $q.reject(msg || id);
                }
                var setName = id.substring(0, id.lastIndexOf(":")) || "$default", iconSetConfig = config[setName];
                return iconSetConfig ? loadByURL(iconSetConfig.url).then(extractFromSet) : announceIdNotFound(id);
            }
            function loadByURL(url) {
                return $http.get(url, {
                    cache: $templateCache
                }).then(function(response) {
                    return angular.element("<div>").append(response.data).find("svg")[0];
                }).catch(announceNotFound);
            }
            function announceNotFound(err) {
                var msg = angular.isString(err) ? err : err.message || err.data || err.statusText;
                $log.warn(msg);
                return $q.reject(msg);
            }
            function isIcon(target) {
                return angular.isDefined(target.element) && angular.isDefined(target.config);
            }
            function Icon(el, config) {
                el && "svg" != el.tagName && (el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0]);
                el.getAttribute("xmlns") || el.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                this.element = el;
                this.config = config;
                this.prepare();
            }
            function prepareAndStyle() {
                var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
                angular.forEach({
                    fit: "",
                    height: "100%",
                    width: "100%",
                    preserveAspectRatio: "xMidYMid meet",
                    viewBox: this.element.getAttribute("viewBox") || "0 0 " + viewBoxSize + " " + viewBoxSize
                }, function(val, attr) {
                    this.element.setAttribute(attr, val);
                }, this);
                angular.forEach({
                    "pointer-events": "none",
                    display: "block"
                }, function(val, style) {
                    this.element.style[style] = val;
                }, this);
            }
            function cloneSVG() {
                return this.element.cloneNode(!0);
            }
            var iconCache = {}, urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&\/\/=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)?/i;
            Icon.prototype = {
                clone: cloneSVG,
                prepare: prepareAndStyle
            };
            getIcon.fontSet = findRegisteredFontSet;
            return getIcon;
        }
        angular.module("material.components.icon").provider("$mdIcon", MdIconProvider);
        var config = {
            defaultViewBoxSize: 24,
            defaultFontSet: "material-icons",
            fontSets: []
        };
        MdIconProvider.prototype = {
            icon: function(id, url, viewBoxSize) {
                -1 == id.indexOf(":") && (id = "$default:" + id);
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            iconSet: function(id, url, viewBoxSize) {
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            defaultIconSet: function(url, viewBoxSize) {
                config.$default || (config.$default = new ConfigurationItem(url, viewBoxSize));
                config.$default.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
                return this;
            },
            defaultViewBoxSize: function(viewBoxSize) {
                config.defaultViewBoxSize = viewBoxSize;
                return this;
            },
            fontSet: function(alias, className) {
                config.fontSets.push({
                    alias: alias,
                    fontSet: className || alias
                });
                return this;
            },
            defaultFontSet: function(className) {
                config.defaultFontSet = className || "";
                return this;
            },
            defaultIconSize: function(iconSize) {
                config.defaultIconSize = iconSize;
                return this;
            },
            preloadIcons: function($templateCache) {
                var iconProvider = this;
                [ {
                    id: "md-tabs-arrow",
                    url: "md-tabs-arrow.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
                }, {
                    id: "md-close",
                    url: "md-close.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
                }, {
                    id: "md-cancel",
                    url: "md-cancel.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
                }, {
                    id: "md-menu",
                    url: "md-menu.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
                }, {
                    id: "md-toggle-arrow",
                    url: "md-toggle-arrow-svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
                }, {
                    id: "md-calendar",
                    url: "md-calendar.svg",
                    svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
                } ].forEach(function(asset) {
                    iconProvider.icon(asset.id, asset.url);
                    $templateCache.put(asset.url, asset.svg);
                });
            },
            $get: [ "$http", "$q", "$log", "$templateCache", function($http, $q, $log, $templateCache) {
                this.preloadIcons($templateCache);
                return MdIconService(config, $http, $q, $log, $templateCache);
            } ]
        };
        MdIconService.$inject = [ "config", "$http", "$q", "$log", "$templateCache" ];
    }();
    !function() {
        function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout, $rootScope, $q) {
            var menuContainer, triggerElement, self = this;
            this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;
            this.init = function(setMenuContainer, opts) {
                opts = opts || {};
                menuContainer = setMenuContainer;
                triggerElement = $element[0].querySelector("[ng-click],[ng-mouseenter]");
                triggerElement.setAttribute("aria-expanded", "false");
                this.isInMenuBar = opts.isInMenuBar;
                this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll(".md-nested-menu"));
                menuContainer.on("$mdInterimElementRemove", function() {
                    self.isOpen = !1;
                });
                var menuContainerId = "menu_container_" + $mdUtil.nextUid();
                menuContainer.attr("id", menuContainerId);
                angular.element(triggerElement).attr({
                    "aria-owns": menuContainerId,
                    "aria-haspopup": "true"
                });
                $scope.$on("$destroy", this.disableHoverListener);
            };
            var openMenuTimeout, menuItems, deregisterScopeListeners = [];
            this.enableHoverListener = function() {
                deregisterScopeListeners.push($rootScope.$on("$mdMenuOpen", function(event, el) {
                    if (menuContainer[0].contains(el[0])) {
                        self.currentlyOpenMenu = el.controller("mdMenu");
                        self.isAlreadyOpening = !1;
                        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));
                    }
                }));
                deregisterScopeListeners.push($rootScope.$on("$mdMenuClose", function(event, el) {
                    menuContainer[0].contains(el[0]) && (self.currentlyOpenMenu = undefined);
                }));
                menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].children[0].children));
                menuItems.on("mouseenter", self.handleMenuItemHover);
                menuItems.on("mouseleave", self.handleMenuItemMouseLeave);
            };
            this.disableHoverListener = function() {
                for (;deregisterScopeListeners.length; ) deregisterScopeListeners.shift()();
                menuItems && menuItems.off("mouseenter", self.handleMenuItemHover);
                menuItems && menuItems.off("mouseleave", self.handleMenuMouseLeave);
            };
            this.handleMenuItemHover = function(event) {
                if (!self.isAlreadyOpening) {
                    var nestedMenu = event.target.querySelector("md-menu") || $mdUtil.getClosest(event.target, "MD-MENU");
                    openMenuTimeout = $timeout(function() {
                        nestedMenu && (nestedMenu = angular.element(nestedMenu).controller("mdMenu"));
                        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {
                            var closeTo = self.nestLevel + 1;
                            self.currentlyOpenMenu.close(!0, {
                                closeTo: closeTo
                            });
                        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {
                            self.isAlreadyOpening = !0;
                            nestedMenu.open();
                        }
                    }, nestedMenu ? 100 : 250);
                    var focusableTarget = event.currentTarget.querySelector("button:not([disabled])");
                    focusableTarget && focusableTarget.focus();
                }
            };
            this.handleMenuItemMouseLeave = function() {
                if (openMenuTimeout) {
                    $timeout.cancel(openMenuTimeout);
                    openMenuTimeout = undefined;
                }
            };
            this.open = function(ev) {
                ev && ev.stopPropagation();
                ev && ev.preventDefault();
                if (!self.isOpen) {
                    self.enableHoverListener();
                    self.isOpen = !0;
                    triggerElement = triggerElement || (ev ? ev.target : $element[0]);
                    triggerElement.setAttribute("aria-expanded", "true");
                    $scope.$emit("$mdMenuOpen", $element);
                    $mdMenu.show({
                        scope: $scope,
                        mdMenuCtrl: self,
                        nestLevel: self.nestLevel,
                        element: menuContainer,
                        target: triggerElement,
                        preserveElement: !0,
                        parent: "body"
                    }).finally(function() {
                        triggerElement.setAttribute("aria-expanded", "false");
                        self.disableHoverListener();
                    });
                }
            };
            $scope.$mdOpenMenu = this.open;
            $scope.$watch(function() {
                return self.isOpen;
            }, function(isOpen) {
                if (isOpen) {
                    menuContainer.attr("aria-hidden", "false");
                    $element[0].classList.add("md-open");
                    angular.forEach(self.nestedMenus, function(el) {
                        el.classList.remove("md-open");
                    });
                } else {
                    menuContainer.attr("aria-hidden", "true");
                    $element[0].classList.remove("md-open");
                }
                $scope.$mdMenuIsOpen = self.isOpen;
            });
            this.focusMenuContainer = function() {
                var focusTarget = menuContainer[0].querySelector("[md-menu-focus-target]");
                focusTarget || (focusTarget = menuContainer[0].querySelector(".md-button"));
                focusTarget.focus();
            };
            this.registerContainerProxy = function(handler) {
                this.containerProxy = handler;
            };
            this.triggerContainerProxy = function(ev) {
                this.containerProxy && this.containerProxy(ev);
            };
            this.destroy = function() {
                return self.isOpen ? $mdMenu.destroy() : $q.when(!1);
            };
            this.close = function(skipFocus, closeOpts) {
                if (self.isOpen) {
                    self.isOpen = !1;
                    var eventDetails = angular.extend({}, closeOpts, {
                        skipFocus: skipFocus
                    });
                    $scope.$emit("$mdMenuClose", $element, eventDetails);
                    $mdMenu.hide(null, closeOpts);
                    if (!skipFocus) {
                        var el = self.restoreFocusTo || $element.find("button")[0];
                        el instanceof angular.element && (el = el[0]);
                        el && el.focus();
                    }
                }
            };
            this.positionMode = function() {
                var attachment = ($attrs.mdPositionMode || "target").split(" ");
                1 == attachment.length && attachment.push(attachment[0]);
                return {
                    left: attachment[0],
                    top: attachment[1]
                };
            };
            this.offsets = function() {
                var position = ($attrs.mdOffset || "0 0").split(" ").map(parseFloat);
                if (2 == position.length) return {
                    left: position[0],
                    top: position[1]
                };
                if (1 == position.length) return {
                    top: position[0],
                    left: position[0]
                };
                throw Error("Invalid offsets specified. Please follow format <x, y> or <n>");
            };
        }
        angular.module("material.components.menu").controller("mdMenuCtrl", MenuController);
        MenuController.$inject = [ "$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout", "$rootScope", "$q" ];
    }();
    !function() {
        function MenuDirective($mdUtil) {
            function compile(templateElement) {
                templateElement.addClass("md-menu");
                var triggerElement = templateElement.children()[0];
                triggerElement.hasAttribute("ng-click") || (triggerElement = triggerElement.querySelector("[ng-click],[ng-mouseenter]") || triggerElement);
                !triggerElement || "MD-BUTTON" != triggerElement.nodeName && "BUTTON" != triggerElement.nodeName || triggerElement.hasAttribute("type") || triggerElement.setAttribute("type", "button");
                if (2 != templateElement.children().length) throw Error(INVALID_PREFIX + "Expected two children elements.");
                triggerElement && triggerElement.setAttribute("aria-haspopup", "true");
                var nestedMenus = templateElement[0].querySelectorAll("md-menu"), nestingDepth = parseInt(templateElement[0].getAttribute("md-nest-level"), 10) || 0;
                nestedMenus && angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {
                    menuEl.hasAttribute("md-position-mode") || menuEl.setAttribute("md-position-mode", "cascade");
                    menuEl.classList.add("md-nested-menu");
                    menuEl.setAttribute("md-nest-level", nestingDepth + 1);
                });
                return link;
            }
            function link(scope, element, attrs, ctrls) {
                var mdMenuCtrl = ctrls[0], isInMenuBar = ctrls[1] != undefined, menuContainer = angular.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'), menuContents = element.children()[1];
                menuContents.hasAttribute("role") || menuContents.setAttribute("role", "menu");
                menuContainer.append(menuContents);
                element.on("$destroy", function() {
                    menuContainer.remove();
                });
                element.append(menuContainer);
                menuContainer[0].style.display = "none";
                mdMenuCtrl.init(menuContainer, {
                    isInMenuBar: isInMenuBar
                });
            }
            var INVALID_PREFIX = "Invalid HTML for md-menu: ";
            return {
                restrict: "E",
                require: [ "mdMenu", "?^mdMenuBar" ],
                controller: "mdMenuCtrl",
                scope: !0,
                compile: compile
            };
        }
        angular.module("material.components.menu").directive("mdMenu", MenuDirective);
        MenuDirective.$inject = [ "$mdUtil" ];
    }();
    !function() {
        function MenuProvider($$interimElementProvider) {
            function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
                function showBackdrop(scope, element, options) {
                    if (options.nestLevel) return angular.noop;
                    options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");
                        $animate.enter(options.backdrop, $document[0].body);
                    }
                    return function() {
                        options.backdrop && options.backdrop.remove();
                        options.disableParentScroll && options.restoreScroll();
                    };
                }
                function onRemove(scope, element, opts) {
                    function detachAndClean() {
                        element.removeClass("md-active");
                        detachElement(element, opts);
                        opts.alreadyOpen = !1;
                    }
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();
                    return !0 === opts.$destroy ? detachAndClean() : function() {
                        return $animateCss(element, {
                            addClass: "md-leave"
                        }).start();
                    }().then(detachAndClean);
                }
                function onShow(scope, element, opts) {
                    function activateInteraction() {
                        function onMenuKeyDown(ev) {
                            var handled;
                            switch (ev.keyCode) {
                              case $mdConstant.KEY_CODE.ESCAPE:
                                opts.mdMenuCtrl.close(!1, {
                                    closeAll: !0
                                });
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.UP_ARROW:
                                focusMenuItem(ev, opts.menuContentEl, opts, -1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.DOWN_ARROW:
                                focusMenuItem(ev, opts.menuContentEl, opts, 1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.LEFT_ARROW:
                                opts.nestLevel ? opts.mdMenuCtrl.close() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.RIGHT_ARROW:
                                var parentMenu = $mdUtil.getClosest(ev.target, "MD-MENU");
                                parentMenu && parentMenu != opts.parent[0] ? ev.target.click() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                            }
                            if (handled) {
                                ev.preventDefault();
                                ev.stopImmediatePropagation();
                            }
                        }
                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            scope.$apply(function() {
                                opts.mdMenuCtrl.close(!0, {
                                    closeAll: !0
                                });
                            });
                        }
                        function captureClickListener(e) {
                            function hasAnyAttribute(target, attrs) {
                                if (!target) return !1;
                                for (var attr, i = 0; attr = attrs[i]; ++i) for (var rawAttr, altForms = [ attr, "data-" + attr, "x-" + attr ], j = 0; rawAttr = altForms[j]; ++j) if (target.hasAttribute(rawAttr)) return !0;
                                return !1;
                            }
                            var target = e.target;
                            do {
                                if (target == opts.menuContentEl[0]) return;
                                if ((hasAnyAttribute(target, [ "ng-click", "ng-href", "ui-sref" ]) || "BUTTON" == target.nodeName || "MD-BUTTON" == target.nodeName) && !hasAnyAttribute(target, [ "md-prevent-menu-close" ])) {
                                    var closestMenu = $mdUtil.getClosest(target, "MD-MENU");
                                    target.hasAttribute("disabled") || closestMenu && closestMenu != opts.parent[0] || function() {
                                        scope.$apply(function() {
                                            opts.mdMenuCtrl.close(!0, {
                                                closeAll: !0
                                            });
                                        });
                                    }();
                                    break;
                                }
                            } while (target = target.parentNode);
                        }
                        element.addClass("md-clickable");
                        opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                        opts.menuContentEl.on("keydown", onMenuKeyDown);
                        opts.menuContentEl[0].addEventListener("click", captureClickListener, !0);
                        var focusTarget = opts.menuContentEl[0].querySelector("[md-menu-focus-target]");
                        if (!focusTarget) {
                            var firstChild = opts.menuContentEl[0].firstElementChild;
                            focusTarget = firstChild && (firstChild.querySelector(".md-button:not([disabled])") || firstChild.firstElementChild);
                        }
                        focusTarget && focusTarget.focus();
                        return function() {
                            element.removeClass("md-clickable");
                            opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                            opts.menuContentEl.off("keydown", onMenuKeyDown);
                            opts.menuContentEl[0].removeEventListener("click", captureClickListener, !0);
                        };
                    }
                    !function() {
                        if (!opts.target) throw Error("$mdMenu.show() expected a target to animate from in options.target");
                        angular.extend(opts, {
                            alreadyOpen: !1,
                            isRemoved: !1,
                            target: angular.element(opts.target),
                            parent: angular.element(opts.parent),
                            menuContentEl: angular.element(element[0].querySelector("md-menu-content"))
                        });
                    }();
                    $mdTheming.inherit(opts.menuContentEl, opts.target);
                    opts.cleanupResizing = function() {
                        var repositionMenu = function(target, options) {
                            return $$rAF.throttle(function() {
                                if (!opts.isRemoved) {
                                    var position = calculateMenuPosition(target, options);
                                    target.css(animator.toCss(position));
                                }
                            });
                        }(element, opts);
                        $window.addEventListener("resize", repositionMenu);
                        $window.addEventListener("orientationchange", repositionMenu);
                        return function() {
                            $window.removeEventListener("resize", repositionMenu);
                            $window.removeEventListener("orientationchange", repositionMenu);
                        };
                    }();
                    opts.hideBackdrop = showBackdrop(scope, element, opts);
                    return function() {
                        opts.parent.append(element);
                        element[0].style.display = "";
                        return $q(function(resolve) {
                            var position = calculateMenuPosition(element, opts);
                            element.removeClass("md-leave");
                            $animateCss(element, {
                                addClass: "md-active",
                                from: animator.toCss(position),
                                to: animator.toCss({
                                    transform: ""
                                })
                            }).start().then(resolve);
                        });
                    }().then(function(response) {
                        opts.alreadyOpen = !0;
                        opts.cleanupInteraction = activateInteraction();
                        return response;
                    });
                }
                function focusMenuItem(e, menuEl, opts, direction) {
                    for (var didFocus, currentItem = $mdUtil.getClosest(e.target, "MD-MENU-ITEM"), items = $mdUtil.nodesToArray(menuEl[0].children), currentIndex = items.indexOf(currentItem), i = currentIndex + direction; i >= 0 && i < items.length; i += direction) {
                        didFocus = attemptFocus(items[i].querySelector(".md-button"));
                        if (didFocus) break;
                    }
                    return didFocus;
                }
                function attemptFocus(el) {
                    if (el && -1 != el.getAttribute("tabindex")) {
                        el.focus();
                        return $document[0].activeElement == el;
                    }
                }
                function detachElement(element, opts) {
                    opts.preserveElement ? toNode(element).style.display = "none" : toNode(element).parentNode === toNode(opts.parent) && toNode(opts.parent).removeChild(toNode(element));
                }
                function calculateMenuPosition(el, opts) {
                    var alignTarget, containerNode = el[0], openMenuNode = el[0].firstElementChild, openMenuNodeRect = openMenuNode.getBoundingClientRect(), boundryNode = $document[0].body, boundryNodeRect = boundryNode.getBoundingClientRect(), menuStyle = $window.getComputedStyle(openMenuNode), originNode = opts.target[0].querySelector("[md-menu-origin]") || opts.target[0], originNodeRect = originNode.getBoundingClientRect(), bounds = {
                        left: boundryNodeRect.left + MENU_EDGE_MARGIN,
                        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,
                        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
                        right: boundryNodeRect.right - MENU_EDGE_MARGIN
                    }, alignTargetRect = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, existingOffsets = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, positionMode = opts.mdMenuCtrl.positionMode();
                    if ("target" == positionMode.top || "target" == positionMode.left || "target-right" == positionMode.left) {
                        alignTarget = function() {
                            for (var i = 0; i < openMenuNode.children.length; ++i) if ("none" != $window.getComputedStyle(openMenuNode.children[i]).display) return openMenuNode.children[i];
                        }();
                        if (alignTarget) {
                            alignTarget = alignTarget.firstElementChild || alignTarget;
                            alignTarget = alignTarget.querySelector("[md-menu-align-target]") || alignTarget;
                            alignTargetRect = alignTarget.getBoundingClientRect();
                            existingOffsets = {
                                top: parseFloat(containerNode.style.top || 0),
                                left: parseFloat(containerNode.style.left || 0)
                            };
                        }
                    }
                    var position = {}, transformOrigin = "top ";
                    switch (positionMode.top) {
                      case "target":
                        position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;
                        break;

                      case "cascade":
                        position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;
                        break;

                      case "bottom":
                        position.top = originNodeRect.top + originNodeRect.height;
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');
                    }
                    switch (positionMode.left) {
                      case "target":
                        position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;
                        transformOrigin += "left";
                        break;

                      case "target-right":
                        position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
                        transformOrigin += "right";
                        break;

                      case "cascade":
                        var willFitRight = originNodeRect.right + openMenuNodeRect.width < bounds.right;
                        position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
                        transformOrigin += willFitRight ? "left" : "right";
                        break;

                      case "left":
                        position.left = originNodeRect.left;
                        transformOrigin += "left";
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');
                    }
                    var offsets = opts.mdMenuCtrl.offsets();
                    position.top += offsets.top;
                    position.left += offsets.left;
                    !function(pos) {
                        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);
                        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);
                    }(position);
                    var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1)) / 100, scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1)) / 100;
                    return {
                        top: Math.round(position.top),
                        left: Math.round(position.left),
                        transform: opts.alreadyOpen ? undefined : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ]),
                        transformOrigin: transformOrigin
                    };
                }
                var animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: !0,
                    disableParentScroll: !0,
                    skipCompile: !0,
                    preserveScope: !0,
                    skipHide: !0,
                    themable: !0
                };
            }
            function toNode(el) {
                el instanceof angular.element && (el = el[0]);
                return el;
            }
            var MENU_EDGE_MARGIN = 8;
            menuDefaultOptions.$inject = [ "$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate" ];
            return $$interimElementProvider("$mdMenu").setDefaults({
                methods: [ "target" ],
                options: menuDefaultOptions
            });
        }
        angular.module("material.components.menu").provider("$mdMenu", MenuProvider);
        MenuProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function MenuBarController($scope, $rootScope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$mdConstant = $mdConstant;
            this.$mdUtil = $mdUtil;
            this.$document = $document;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$timeout = $timeout;
            var self = this;
            angular.forEach(BOUND_MENU_METHODS, function(methodName) {
                self[methodName] = angular.bind(self, self[methodName]);
            });
        }
        angular.module("material.components.menuBar").controller("MenuBarController", MenuBarController);
        var BOUND_MENU_METHODS = [ "handleKeyDown", "handleMenuHover", "scheduleOpenHoveredMenu", "cancelScheduledOpen" ];
        MenuBarController.$inject = [ "$scope", "$rootScope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout" ];
        MenuBarController.prototype.init = function() {
            var $element = this.$element, $mdUtil = this.$mdUtil, $scope = this.$scope, self = this, deregisterFns = [];
            $element.on("keydown", this.handleKeyDown);
            this.parentToolbar = $mdUtil.getClosest($element, "MD-TOOLBAR");
            deregisterFns.push(this.$rootScope.$on("$mdMenuOpen", function(event, el) {
                if (-1 != self.getMenus().indexOf(el[0])) {
                    $element[0].classList.add("md-open");
                    el[0].classList.add("md-open");
                    self.currentlyOpenMenu = el.controller("mdMenu");
                    self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);
                    self.enableOpenOnHover();
                }
            }));
            deregisterFns.push(this.$rootScope.$on("$mdMenuClose", function(event, el, opts) {
                var rootMenus = self.getMenus();
                if (-1 != rootMenus.indexOf(el[0])) {
                    $element[0].classList.remove("md-open");
                    el[0].classList.remove("md-open");
                }
                if ($element[0].contains(el[0])) {
                    for (var parentMenu = el[0]; parentMenu && -1 == rootMenus.indexOf(parentMenu); ) parentMenu = $mdUtil.getClosest(parentMenu, "MD-MENU", !0);
                    if (parentMenu) {
                        opts.skipFocus || parentMenu.querySelector("button:not([disabled])").focus();
                        self.currentlyOpenMenu = undefined;
                        self.disableOpenOnHover();
                        self.setKeyboardMode(!0);
                    }
                }
            }));
            $scope.$on("$destroy", function() {
                for (;deregisterFns.length; ) deregisterFns.shift()();
            });
            this.setKeyboardMode(!0);
        };
        MenuBarController.prototype.setKeyboardMode = function(enabled) {
            enabled ? this.$element[0].classList.add("md-keyboard-mode") : this.$element[0].classList.remove("md-keyboard-mode");
        };
        MenuBarController.prototype.enableOpenOnHover = function() {
            if (!this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !0;
                var parentToolbar;
                if (parentToolbar = this.parentToolbar) {
                    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute("style");
                    parentToolbar.style.position = "relative";
                    parentToolbar.style.zIndex = 100;
                }
                angular.element(this.getMenus()).on("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.handleMenuHover = function(e) {
            this.setKeyboardMode(!1);
            this.openOnHoverEnabled && this.scheduleOpenHoveredMenu(e);
        };
        MenuBarController.prototype.disableOpenOnHover = function() {
            if (this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !1;
                var parentToolbar;
                (parentToolbar = this.parentToolbar) && parentToolbar.setAttribute("style", parentToolbar.dataset.mdRestoreStyle || "");
                angular.element(this.getMenus()).off("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {
            var menuEl = angular.element(e.currentTarget), menuCtrl = menuEl.controller("mdMenu");
            this.setKeyboardMode(!1);
            this.scheduleOpenMenu(menuCtrl);
        };
        MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {
            var self = this, $timeout = this.$timeout;
            if (menuCtrl != self.currentlyOpenMenu) {
                $timeout.cancel(self.pendingMenuOpen);
                self.pendingMenuOpen = $timeout(function() {
                    self.pendingMenuOpen = undefined;
                    self.currentlyOpenMenu && self.currentlyOpenMenu.close(!0, {
                        closeAll: !0
                    });
                    menuCtrl.open();
                }, 200, !1);
            }
        };
        MenuBarController.prototype.handleKeyDown = function(e) {
            var keyCodes = this.$mdConstant.KEY_CODE, currentMenu = this.currentlyOpenMenu, wasOpen = currentMenu && currentMenu.isOpen;
            this.setKeyboardMode(!0);
            var handled, newMenu, newMenuCtrl;
            switch (e.keyCode) {
              case keyCodes.DOWN_ARROW:
                currentMenu ? currentMenu.focusMenuContainer() : this.openFocusedMenu();
                handled = !0;
                break;

              case keyCodes.UP_ARROW:
                currentMenu && currentMenu.close();
                handled = !0;
                break;

              case keyCodes.LEFT_ARROW:
                newMenu = this.focusMenu(-1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
                break;

              case keyCodes.RIGHT_ARROW:
                newMenu = this.focusMenu(1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
            }
            if (handled) {
                e && e.preventDefault && e.preventDefault();
                e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            }
        };
        MenuBarController.prototype.focusMenu = function(direction) {
            var menus = this.getMenus(), focusedIndex = this.getFocusedMenuIndex();
            -1 == focusedIndex && (focusedIndex = this.getOpenMenuIndex());
            var changed = !1;
            if (-1 == focusedIndex) focusedIndex = 0; else if (direction < 0 && focusedIndex > 0 || direction > 0 && focusedIndex < menus.length - direction) {
                focusedIndex += direction;
                changed = !0;
            }
            if (changed) {
                menus[focusedIndex].querySelector("button").focus();
                return menus[focusedIndex];
            }
        };
        MenuBarController.prototype.openFocusedMenu = function() {
            var menu = this.getFocusedMenu();
            menu && angular.element(menu).controller("mdMenu").open();
        };
        MenuBarController.prototype.getMenus = function() {
            var $element = this.$element;
            return this.$mdUtil.nodesToArray($element[0].children).filter(function(el) {
                return "MD-MENU" == el.nodeName;
            });
        };
        MenuBarController.prototype.getFocusedMenu = function() {
            return this.getMenus()[this.getFocusedMenuIndex()];
        };
        MenuBarController.prototype.getFocusedMenuIndex = function() {
            var $mdUtil = this.$mdUtil, focusedEl = $mdUtil.getClosest(this.$document[0].activeElement, "MD-MENU");
            return focusedEl ? this.getMenus().indexOf(focusedEl) : -1;
        };
        MenuBarController.prototype.getOpenMenuIndex = function() {
            for (var menus = this.getMenus(), i = 0; i < menus.length; ++i) if (menus[i].classList.contains("md-open")) return i;
            return -1;
        };
    }();
    !function() {
        function MenuBarDirective($mdUtil, $mdTheming) {
            return {
                restrict: "E",
                require: "mdMenuBar",
                controller: "MenuBarController",
                compile: function(templateEl, templateAttrs) {
                    templateAttrs.ariaRole || templateEl[0].setAttribute("role", "menubar");
                    angular.forEach(templateEl[0].children, function(menuEl) {
                        if ("MD-MENU" == menuEl.nodeName) {
                            if (!menuEl.hasAttribute("md-position-mode")) {
                                menuEl.setAttribute("md-position-mode", "left bottom");
                                menuEl.querySelector("button,a").setAttribute("role", "menuitem");
                            }
                            var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll("md-menu-content"));
                            angular.forEach(contentEls, function(contentEl) {
                                contentEl.classList.add("md-menu-bar-menu");
                                contentEl.classList.add("md-dense");
                                contentEl.hasAttribute("width") || contentEl.setAttribute("width", 5);
                            });
                        }
                    });
                    return function(scope, el, attrs, ctrl) {
                        $mdTheming(scope, el);
                        ctrl.init();
                    };
                }
            };
        }
        angular.module("material.components.menuBar").directive("mdMenuBar", MenuBarDirective);
        MenuBarDirective.$inject = [ "$mdUtil", "$mdTheming" ];
    }();
    !function() {
        function MenuDividerDirective() {
            return {
                restrict: "E",
                compile: function(templateEl, templateAttrs) {
                    templateAttrs.role || templateEl[0].setAttribute("role", "separator");
                }
            };
        }
        angular.module("material.components.menuBar").directive("mdMenuDivider", MenuDividerDirective);
    }();
    !function() {
        function MenuItemController($scope, $element, $attrs) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$scope = $scope;
        }
        angular.module("material.components.menuBar").controller("MenuItemController", MenuItemController);
        MenuItemController.$inject = [ "$scope", "$element", "$attrs" ];
        MenuItemController.prototype.init = function(ngModel) {
            var $element = this.$element, $attrs = this.$attrs;
            this.ngModel = ngModel;
            if ("checkbox" == $attrs.type || "radio" == $attrs.type) {
                this.mode = $attrs.type;
                this.iconEl = $element[0].children[0];
                this.buttonEl = $element[0].children[1];
                ngModel && this.initClickListeners();
            }
        };
        MenuItemController.prototype.clearNgAria = function() {
            var el = this.$element[0], clearAttrs = [ "role", "tabindex", "aria-invalid", "aria-checked" ];
            angular.forEach(clearAttrs, function(attr) {
                el.removeAttribute(attr);
            });
        };
        MenuItemController.prototype.initClickListeners = function() {
            function isSelected() {
                if ("radio" == mode) {
                    var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;
                    return ngModel.$modelValue == val;
                }
                return ngModel.$modelValue;
            }
            function setDisabled(disabled) {
                disabled ? button.off("click", handleClick) : button.on("click", handleClick);
            }
            var self = this, ngModel = this.ngModel, $scope = this.$scope, $attrs = this.$attrs, mode = (this.$element, 
            this.mode);
            this.handleClick = angular.bind(this, this.handleClick);
            var icon = this.iconEl, button = angular.element(this.buttonEl), handleClick = this.handleClick;
            $attrs.$observe("disabled", setDisabled);
            setDisabled($attrs.disabled);
            ngModel.$render = function() {
                self.clearNgAria();
                if (isSelected()) {
                    icon.style.display = "";
                    button.attr("aria-checked", "true");
                } else {
                    icon.style.display = "none";
                    button.attr("aria-checked", "false");
                }
            };
            $scope.$$postDigest(ngModel.$render);
        };
        MenuItemController.prototype.handleClick = function(e) {
            var newVal, mode = this.mode, ngModel = this.ngModel, $attrs = this.$attrs;
            "checkbox" == mode ? newVal = !ngModel.$modelValue : "radio" == mode && (newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value);
            ngModel.$setViewValue(newVal);
            ngModel.$render();
        };
    }();
    !function() {
        function MenuItemDirective() {
            return {
                require: [ "mdMenuItem", "?ngModel" ],
                priority: 210,
                compile: function(templateEl, templateAttrs) {
                    function setDefault(attr, val, el) {
                        el = el || templateEl;
                        el instanceof angular.element && (el = el[0]);
                        el.hasAttribute(attr) || el.setAttribute(attr, val);
                    }
                    function moveAttrToButton(attr) {
                        if (templateEl[0].hasAttribute(attr)) {
                            var val = templateEl[0].getAttribute(attr);
                            buttonEl[0].setAttribute(attr, val);
                            templateEl[0].removeAttribute(attr);
                        }
                    }
                    if ("checkbox" == templateAttrs.type || "radio" == templateAttrs.type) {
                        var text = templateEl[0].textContent, buttonEl = angular.element('<md-button type="button"></md-button>');
                        buttonEl.html(text);
                        buttonEl.attr("tabindex", "0");
                        templateEl.html("");
                        templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));
                        templateEl.append(buttonEl);
                        templateEl[0].classList.add("md-indent");
                        setDefault("role", "checkbox" == templateAttrs.type ? "menuitemcheckbox" : "menuitemradio", buttonEl);
                        angular.forEach([ "ng-disabled" ], moveAttrToButton);
                    } else setDefault("role", "menuitem", templateEl[0].querySelector("md-button,button,a"));
                    return function(scope, el, attrs, ctrls) {
                        var ctrl = ctrls[0], ngModel = ctrls[1];
                        ctrl.init(ngModel);
                    };
                },
                controller: "MenuItemController"
            };
        }
        angular.module("material.components.menuBar").directive("mdMenuItem", MenuItemDirective);
    }();
    !function() {
        function MdTab() {
            function postLink(scope, element, attr, ctrl) {
                if (ctrl) {
                    var index = ctrl.getTabElementIndex(element), body = firstChild(element, "md-tab-body").remove(), label = firstChild(element, "md-tab-label").remove(), data = ctrl.insertTab({
                        scope: scope,
                        parent: scope.$parent,
                        index: index,
                        element: element,
                        template: body.html(),
                        label: label.html()
                    }, index);
                    scope.select = scope.select || angular.noop;
                    scope.deselect = scope.deselect || angular.noop;
                    scope.$watch("active", function(active) {
                        active && ctrl.select(data.getIndex());
                    });
                    scope.$watch("disabled", function() {
                        ctrl.refreshIndex();
                    });
                    scope.$watch(function() {
                        return ctrl.getTabElementIndex(element);
                    }, function(newIndex) {
                        data.index = newIndex;
                        ctrl.updateTabOrder();
                    });
                    scope.$on("$destroy", function() {
                        ctrl.removeTab(data);
                    });
                }
            }
            function firstChild(element, tagName) {
                for (var children = element[0].children, i = 0, len = children.length; i < len; i++) {
                    var child = children[i];
                    if (child.tagName === tagName.toUpperCase()) return angular.element(child);
                }
                return angular.element();
            }
            return {
                require: "^?mdTabs",
                terminal: !0,
                compile: function(element, attr) {
                    var label = firstChild(element, "md-tab-label"), body = firstChild(element, "md-tab-body");
                    if (0 == label.length) {
                        label = angular.element("<md-tab-label></md-tab-label>");
                        attr.label ? label.text(attr.label) : label.append(element.contents());
                        if (0 == body.length) {
                            var contents = element.contents().detach();
                            body = angular.element("<md-tab-body></md-tab-body>");
                            body.append(contents);
                        }
                    }
                    element.append(label);
                    body.html() && element.append(body);
                    return postLink;
                },
                scope: {
                    active: "=?mdActive",
                    disabled: "=?ngDisabled",
                    select: "&?mdOnSelect",
                    deselect: "&?mdOnDeselect"
                }
            };
        }
        angular.module("material.components.tabs").directive("mdTab", MdTab);
    }();
    !function() {
        function MdTabItem() {
            return {
                require: "^?mdTabs",
                link: function(scope, element, attr, ctrl) {
                    ctrl && ctrl.attachRipple(scope, element);
                }
            };
        }
        angular.module("material.components.tabs").directive("mdTabItem", MdTabItem);
    }();
    !function() {
        function MdTabLabel() {
            return {
                terminal: !0
            };
        }
        angular.module("material.components.tabs").directive("mdTabLabel", MdTabLabel);
    }();
    !function() {
        function MdTabScroll($parse) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr.mdTabScroll, null, !0);
                    return function(scope, element) {
                        element.on("mousewheel", function(event) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    };
                }
            };
        }
        angular.module("material.components.tabs").directive("mdTabScroll", MdTabScroll);
        MdTabScroll.$inject = [ "$parse" ];
    }();
    !function() {
        function MdTabsController($scope, $element, $window, $mdConstant, $mdTabInkRipple, $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {
            function compileTemplate() {
                var template = $attrs.$mdTabsTemplate, element = angular.element(elements.data);
                element.html(template);
                $compile(element.contents())(ctrl.parent);
                delete $attrs.$mdTabsTemplate;
            }
            function bindEvents() {
                angular.element($window).on("resize", handleWindowResize);
                $scope.$on("$destroy", cleanup);
            }
            function configureWatchers() {
                $scope.$watch("$mdTabsCtrl.selectedIndex", handleSelectedIndexChange);
            }
            function defineBooleanAttribute(key, handler) {
                function updateValue(newValue) {
                    ctrl[key] = "false" !== newValue;
                }
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.hasOwnProperty(attr) && updateValue($attrs[attr]);
                $attrs.$observe(attr, updateValue);
            }
            function cleanup() {
                destroyed = !0;
                angular.element($window).off("resize", handleWindowResize);
            }
            function handleStretchTabs(stretchTabs) {
                angular.element(elements.wrapper).toggleClass("md-stretch-tabs", shouldStretchTabs());
                updateInkBarStyles();
            }
            function handleCenterTabs(newValue) {
                ctrl.shouldCenterTabs = shouldCenterTabs();
            }
            function handleMaxTabWidth(newWidth, oldWidth) {
                newWidth !== oldWidth && $mdUtil.nextTick(ctrl.updateInkBarStyles);
            }
            function handleShouldPaginate(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.maxTabWidth = getMaxTabWidth();
                    ctrl.shouldCenterTabs = shouldCenterTabs();
                    $mdUtil.nextTick(function() {
                        ctrl.maxTabWidth = getMaxTabWidth();
                        adjustOffset(ctrl.selectedIndex);
                    });
                }
            }
            function handleHasContent(hasContent) {
                $element[hasContent ? "removeClass" : "addClass"]("md-no-tab-content");
            }
            function handleOffsetChange(left) {
                var newValue = ctrl.shouldCenterTabs ? "" : "-" + left + "px";
                angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, "translate3d(" + newValue + ", 0, 0)");
                $scope.$broadcast("$mdTabsPaginationChanged");
            }
            function handleFocusIndexChange(newIndex, oldIndex) {
                if (newIndex !== oldIndex && elements.tabs[newIndex]) {
                    adjustOffset();
                    redirectFocus();
                }
            }
            function handleSelectedIndexChange(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.selectedIndex = getNearestSafeIndex(newValue);
                    ctrl.lastSelectedIndex = oldValue;
                    ctrl.updateInkBarStyles();
                    updateHeightFromContent();
                    adjustOffset(newValue);
                    $scope.$broadcast("$mdTabsChanged");
                    ctrl.tabs[oldValue] && ctrl.tabs[oldValue].scope.deselect();
                    ctrl.tabs[newValue] && ctrl.tabs[newValue].scope.select();
                }
            }
            function getTabElementIndex(tabEl) {
                var tabs = $element[0].getElementsByTagName("md-tab");
                return Array.prototype.indexOf.call(tabs, tabEl[0]);
            }
            function handleResizeWhenVisible() {
                handleResizeWhenVisible.watcher || (handleResizeWhenVisible.watcher = $scope.$watch(function() {
                    $mdUtil.nextTick(function() {
                        if (handleResizeWhenVisible.watcher && $element.prop("offsetParent")) {
                            handleResizeWhenVisible.watcher();
                            handleResizeWhenVisible.watcher = null;
                            handleWindowResize();
                        }
                    }, !1);
                }));
            }
            function keydown(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.LEFT_ARROW:
                    event.preventDefault();
                    incrementIndex(-1, !0);
                    break;

                  case $mdConstant.KEY_CODE.RIGHT_ARROW:
                    event.preventDefault();
                    incrementIndex(1, !0);
                    break;

                  case $mdConstant.KEY_CODE.SPACE:
                  case $mdConstant.KEY_CODE.ENTER:
                    event.preventDefault();
                    locked || (ctrl.selectedIndex = ctrl.focusIndex);
                }
                ctrl.lastClick = !1;
            }
            function select(index) {
                locked || (ctrl.focusIndex = ctrl.selectedIndex = index);
                ctrl.lastClick = !0;
                $mdUtil.nextTick(function() {
                    ctrl.tabs[index].element.triggerHandler("click");
                }, !1);
            }
            function scroll(event) {
                if (ctrl.shouldPaginate) {
                    event.preventDefault();
                    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);
                }
            }
            function nextPage() {
                var i, tab, viewportWidth = elements.canvas.clientWidth, totalWidth = viewportWidth + ctrl.offsetLeft;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft);
            }
            function previousPage() {
                var i, tab;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);
            }
            function handleWindowResize() {
                ctrl.lastSelectedIndex = ctrl.selectedIndex;
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                $mdUtil.nextTick(function() {
                    ctrl.updateInkBarStyles();
                    updatePagination();
                });
            }
            function handleInkBar(hide) {
                angular.element(elements.inkBar).toggleClass("ng-hide", hide);
            }
            function handleDynamicHeight(value) {
                $element.toggleClass("md-dynamic-height", value);
            }
            function removeTab(tabData) {
                if (!destroyed) {
                    var selectedIndex = ctrl.selectedIndex, tab = ctrl.tabs.splice(tabData.getIndex(), 1)[0];
                    refreshIndex();
                    if (ctrl.selectedIndex === selectedIndex) {
                        tab.scope.deselect();
                        ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    }
                    $mdUtil.nextTick(function() {
                        updatePagination();
                        ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                    });
                }
            }
            function insertTab(tabData, index) {
                var hasLoaded = loaded, proto = {
                    getIndex: function() {
                        return ctrl.tabs.indexOf(tab);
                    },
                    isActive: function() {
                        return this.getIndex() === ctrl.selectedIndex;
                    },
                    isLeft: function() {
                        return this.getIndex() < ctrl.selectedIndex;
                    },
                    isRight: function() {
                        return this.getIndex() > ctrl.selectedIndex;
                    },
                    shouldRender: function() {
                        return !ctrl.noDisconnect || this.isActive();
                    },
                    hasFocus: function() {
                        return !ctrl.lastClick && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;
                    },
                    id: $mdUtil.nextUid()
                }, tab = angular.extend(proto, tabData);
                angular.isDefined(index) ? ctrl.tabs.splice(index, 0, tab) : ctrl.tabs.push(tab);
                processQueue();
                updateHasContent();
                $mdUtil.nextTick(function() {
                    updatePagination();
                    hasLoaded && ctrl.autoselect && $mdUtil.nextTick(function() {
                        $mdUtil.nextTick(function() {
                            select(ctrl.tabs.indexOf(tab));
                        });
                    });
                });
                return tab;
            }
            function getElements() {
                var elements = {};
                elements.wrapper = $element[0].getElementsByTagName("md-tabs-wrapper")[0];
                elements.data = $element[0].getElementsByTagName("md-tab-data")[0];
                elements.canvas = elements.wrapper.getElementsByTagName("md-tabs-canvas")[0];
                elements.paging = elements.canvas.getElementsByTagName("md-pagination-wrapper")[0];
                elements.tabs = elements.paging.getElementsByTagName("md-tab-item");
                elements.dummies = elements.canvas.getElementsByTagName("md-dummy-tab");
                elements.inkBar = elements.paging.getElementsByTagName("md-ink-bar")[0];
                elements.contentsWrapper = $element[0].getElementsByTagName("md-tabs-content-wrapper")[0];
                elements.contents = elements.contentsWrapper.getElementsByTagName("md-tab-content");
                return elements;
            }
            function canPageBack() {
                return ctrl.offsetLeft > 0;
            }
            function canPageForward() {
                var lastTab = elements.tabs[elements.tabs.length - 1];
                return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth + ctrl.offsetLeft;
            }
            function shouldStretchTabs() {
                switch (ctrl.stretchTabs) {
                  case "always":
                    return !0;

                  case "never":
                    return !1;

                  default:
                    return !ctrl.shouldPaginate && $window.matchMedia("(max-width: 600px)").matches;
                }
            }
            function shouldCenterTabs() {
                return ctrl.centerTabs && !ctrl.shouldPaginate;
            }
            function shouldPaginate() {
                if (ctrl.noPagination || !loaded) return !1;
                var canvasWidth = $element.prop("clientWidth");
                angular.forEach(getElements().dummies, function(tab) {
                    canvasWidth -= tab.offsetWidth;
                });
                return canvasWidth < 0;
            }
            function getNearestSafeIndex(newIndex) {
                if (-1 === newIndex) return -1;
                var i, tab, maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex);
                for (i = 0; i <= maxOffset; i++) {
                    tab = ctrl.tabs[newIndex + i];
                    if (tab && !0 !== tab.scope.disabled) return tab.getIndex();
                    tab = ctrl.tabs[newIndex - i];
                    if (tab && !0 !== tab.scope.disabled) return tab.getIndex();
                }
                return newIndex;
            }
            function defineProperty(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler && handler(newValue, oldValue);
                    }
                });
            }
            function updatePagination() {
                shouldStretchTabs() || updatePagingWidth();
                ctrl.maxTabWidth = getMaxTabWidth();
                ctrl.shouldPaginate = shouldPaginate();
            }
            function updatePagingWidth() {
                var width = 1;
                angular.forEach(getElements().dummies, function(element) {
                    width += Math.ceil(element.offsetWidth);
                });
                angular.element(elements.paging).css("width", width + "px");
            }
            function getMaxTabWidth() {
                return $element.prop("clientWidth");
            }
            function updateTabOrder() {
                var selectedItem = ctrl.tabs[ctrl.selectedIndex], focusItem = ctrl.tabs[ctrl.focusIndex];
                ctrl.tabs = ctrl.tabs.sort(function(a, b) {
                    return a.index - b.index;
                });
                ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);
                ctrl.focusIndex = ctrl.tabs.indexOf(focusItem);
            }
            function incrementIndex(inc, focus) {
                var newIndex, key = focus ? "focusIndex" : "selectedIndex", index = ctrl[key];
                for (newIndex = index + inc; ctrl.tabs[newIndex] && ctrl.tabs[newIndex].scope.disabled; newIndex += inc) ;
                ctrl.tabs[newIndex] && (ctrl[key] = newIndex);
            }
            function redirectFocus() {
                getElements().dummies[ctrl.focusIndex].focus();
            }
            function adjustOffset(index) {
                null == index && (index = ctrl.focusIndex);
                if (elements.tabs[index] && !ctrl.shouldCenterTabs) {
                    var tab = elements.tabs[index], left = tab.offsetLeft, right = tab.offsetWidth + left;
                    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 64));
                    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));
                }
            }
            function processQueue() {
                queue.forEach(function(func) {
                    $mdUtil.nextTick(func);
                });
                queue = [];
            }
            function updateHasContent() {
                var hasContent = !1;
                angular.forEach(ctrl.tabs, function(tab) {
                    tab.template && (hasContent = !0);
                });
                ctrl.hasContent = hasContent;
            }
            function refreshIndex() {
                ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);
                ctrl.focusIndex = getNearestSafeIndex(ctrl.focusIndex);
            }
            function updateHeightFromContent() {
                if (!ctrl.dynamicHeight) return $element.css("height", "");
                if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);
                var tabContent = elements.contents[ctrl.selectedIndex], contentHeight = tabContent ? tabContent.offsetHeight : 0, tabsHeight = elements.wrapper.offsetHeight, newHeight = contentHeight + tabsHeight, currentHeight = $element.prop("clientHeight");
                if (currentHeight !== newHeight) {
                    if ("bottom" === $element.attr("md-align-tabs")) {
                        currentHeight -= tabsHeight;
                        newHeight -= tabsHeight;
                        $element.attr("md-border-bottom") !== undefined && ++currentHeight;
                    }
                    locked = !0;
                    var fromHeight = {
                        height: currentHeight + "px"
                    }, toHeight = {
                        height: newHeight + "px"
                    };
                    $element.css(fromHeight);
                    $animateCss($element, {
                        from: fromHeight,
                        to: toHeight,
                        easing: "cubic-bezier(0.35, 0, 0.25, 1)",
                        duration: .5
                    }).start().done(function() {
                        $element.css({
                            transition: "none",
                            height: ""
                        });
                        $mdUtil.nextTick(function() {
                            $element.css("transition", "");
                        });
                        locked = !1;
                    });
                }
            }
            function updateInkBarStyles() {
                if (elements.tabs[ctrl.selectedIndex]) {
                    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);
                    if (!$element.prop("offsetParent")) return handleResizeWhenVisible();
                    var tabWidth, index = ctrl.selectedIndex, totalWidth = elements.paging.offsetWidth, tab = elements.tabs[index], left = tab.offsetLeft, right = totalWidth - left - tab.offsetWidth;
                    if (ctrl.shouldCenterTabs) {
                        tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function(value, element) {
                            return value + element.offsetWidth;
                        }, 0);
                        totalWidth > tabWidth && $mdUtil.nextTick(updateInkBarStyles, !1);
                    }
                    updateInkBarClassName();
                    angular.element(elements.inkBar).css({
                        left: left + "px",
                        right: right + "px"
                    });
                } else angular.element(elements.inkBar).css({
                    left: "auto",
                    right: "auto"
                });
            }
            function updateInkBarClassName() {
                var newIndex = ctrl.selectedIndex, oldIndex = ctrl.lastSelectedIndex, ink = angular.element(elements.inkBar);
                angular.isNumber(oldIndex) && ink.toggleClass("md-left", newIndex < oldIndex).toggleClass("md-right", newIndex > oldIndex);
            }
            function fixOffset(value) {
                if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;
                var lastTab = elements.tabs[elements.tabs.length - 1], totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;
                value = Math.max(0, value);
                value = Math.min(totalWidth - elements.canvas.clientWidth, value);
                return value;
            }
            function attachRipple(scope, element) {
                var options = {
                    colorElement: angular.element(elements.inkBar)
                };
                $mdTabInkRipple.attach(scope, element, options);
            }
            var ctrl = this, locked = !1, elements = getElements(), queue = [], destroyed = !1, loaded = !1;
            !function(key, handler) {
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.$observe(attr, function(newValue) {
                    ctrl[key] = newValue;
                });
            }("stretchTabs", handleStretchTabs);
            defineProperty("focusIndex", handleFocusIndexChange, ctrl.selectedIndex || 0);
            defineProperty("offsetLeft", handleOffsetChange, 0);
            defineProperty("hasContent", handleHasContent, !1);
            defineProperty("maxTabWidth", handleMaxTabWidth, getMaxTabWidth());
            defineProperty("shouldPaginate", handleShouldPaginate, !1);
            defineBooleanAttribute("noInkBar", handleInkBar);
            defineBooleanAttribute("dynamicHeight", handleDynamicHeight);
            defineBooleanAttribute("noPagination");
            defineBooleanAttribute("swipeContent");
            defineBooleanAttribute("noDisconnect");
            defineBooleanAttribute("autoselect");
            defineBooleanAttribute("centerTabs", handleCenterTabs);
            defineBooleanAttribute("enableDisconnect");
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.tabs = [];
            ctrl.lastSelectedIndex = null;
            ctrl.hasFocus = !1;
            ctrl.lastClick = !0;
            ctrl.shouldCenterTabs = shouldCenterTabs();
            ctrl.updatePagination = $mdUtil.debounce(updatePagination, 100);
            ctrl.redirectFocus = redirectFocus;
            ctrl.attachRipple = attachRipple;
            ctrl.insertTab = insertTab;
            ctrl.removeTab = removeTab;
            ctrl.select = select;
            ctrl.scroll = scroll;
            ctrl.nextPage = nextPage;
            ctrl.previousPage = previousPage;
            ctrl.keydown = keydown;
            ctrl.canPageForward = canPageForward;
            ctrl.canPageBack = canPageBack;
            ctrl.refreshIndex = refreshIndex;
            ctrl.incrementIndex = incrementIndex;
            ctrl.getTabElementIndex = getTabElementIndex;
            ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);
            ctrl.updateTabOrder = $mdUtil.debounce(updateTabOrder, 100);
            !function() {
                ctrl.selectedIndex = ctrl.selectedIndex || 0;
                compileTemplate();
                configureWatchers();
                bindEvents();
                $mdTheming($element);
                $mdUtil.nextTick(function() {
                    updateHeightFromContent();
                    adjustOffset();
                    updateInkBarStyles();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    loaded = !0;
                    updatePagination();
                });
            }();
        }
        angular.module("material.components.tabs").controller("MdTabsController", MdTabsController);
        MdTabsController.$inject = [ "$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming" ];
    }();
    !function() {
        function MdTabs() {
            return {
                scope: {
                    selectedIndex: "=?mdSelected"
                },
                template: function(element, attr) {
                    attr.$mdTabsTemplate = element.html();
                    return '<md-tabs-wrapper> <md-tab-data></md-tab-data> <md-prev-button tabindex="-1" role="button" aria-label="Previous Page" aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.previousPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-prev-button> <md-next-button tabindex="-1" role="button" aria-label="Next Page" aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.nextPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-next-button> <md-tabs-canvas tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ng-focus="$mdTabsCtrl.redirectFocus()" ng-class="{ \'md-paginated\': $mdTabsCtrl.shouldPaginate, \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ng-keydown="$mdTabsCtrl.keydown($event)" role="tablist"> <md-pagination-wrapper ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" md-tab-scroll="$mdTabsCtrl.scroll($event)"> <md-tab-item tabindex="-1" class="md-tab" style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}" ng-repeat="tab in $mdTabsCtrl.tabs" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-click="$mdTabsCtrl.select(tab.getIndex())" ng-class="{ \'md-active\':    tab.isActive(), \'md-focused\':   tab.hasFocus(), \'md-disabled\':  tab.scope.disabled }" ng-disabled="tab.scope.disabled" md-swipe-left="$mdTabsCtrl.nextPage()" md-swipe-right="$mdTabsCtrl.previousPage()" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-tab-item> <md-ink-bar></md-ink-bar> </md-pagination-wrapper> <div class="md-visually-hidden md-dummy-wrapper"> <md-dummy-tab class="md-tab" tabindex="-1" id="tab-item-{{::tab.id}}" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-focus="$mdTabsCtrl.hasFocus = true" ng-blur="$mdTabsCtrl.hasFocus = false" ng-repeat="tab in $mdTabsCtrl.tabs" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-dummy-tab> </div> </md-tabs-canvas> </md-tabs-wrapper> <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> <md-tab-content id="tab-content-{{::tab.id}}" role="tabpanel" aria-labelledby="tab-item-{{::tab.id}}" md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ng-if="$mdTabsCtrl.hasContent" ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ng-class="{ \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, \'md-active\':        tab.isActive(), \'md-left\':          tab.isLeft(), \'md-right\':         tab.isRight(), \'md-no-scroll\':     $mdTabsCtrl.dynamicHeight }"> <div md-tabs-template="::tab.template" md-connected-if="tab.isActive()" md-scope="::tab.parent" ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> </md-tab-content> </md-tabs-content-wrapper>';
                },
                controller: "MdTabsController",
                controllerAs: "$mdTabsCtrl",
                bindToController: !0
            };
        }
        angular.module("material.components.tabs").directive("mdTabs", MdTabs);
    }();
    !function() {
        function MdTabsTemplate($compile, $mdUtil) {
            function link(scope, element, attr, ctrl) {
                function handleScope() {
                    scope.$watch("connected", function(value) {
                        !1 === value ? disconnect() : reconnect();
                    });
                    scope.$on("$destroy", reconnect);
                }
                function disconnect() {
                    ctrl.enableDisconnect && $mdUtil.disconnectScope(compileScope);
                }
                function reconnect() {
                    ctrl.enableDisconnect && $mdUtil.reconnectScope(compileScope);
                }
                if (ctrl) {
                    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;
                    element.html(scope.template);
                    $compile(element.contents())(compileScope);
                    element.on("DOMSubtreeModified", function() {
                        ctrl.updatePagination();
                        ctrl.updateInkBarStyles();
                    });
                    return $mdUtil.nextTick(handleScope);
                }
            }
            return {
                restrict: "A",
                link: link,
                scope: {
                    template: "=mdTabsTemplate",
                    connected: "=?mdConnectedIf",
                    compileScope: "=mdScope"
                },
                require: "^?mdTabs"
            };
        }
        angular.module("material.components.tabs").directive("mdTabsTemplate", MdTabsTemplate);
        MdTabsTemplate.$inject = [ "$compile", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.core").constant("$MD_THEME_CSS", "md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }");
    }();
}(window, window.angular);

window.ngMaterial = {
    version: {
        full: "1.0.0"
    }
};

!function(window, angular, undefined) {
    "use strict";
    function ngMessageDirectiveFactory(restrict) {
        function contains(collection, key) {
            if (collection) return isArray(collection) ? collection.indexOf(key) >= 0 : collection.hasOwnProperty(key);
        }
        return [ "$animate", function($animate) {
            return {
                restrict: "AE",
                transclude: "element",
                terminal: !0,
                require: "^^ngMessages",
                link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {
                    var records, commentNode = element[0], staticExp = attrs.ngMessage || attrs.when, dynamicExp = attrs.ngMessageExp || attrs.whenExp, assignRecords = function(items) {
                        records = items ? isArray(items) ? items : items.split(/[\s,]+/) : null;
                        ngMessagesCtrl.reRender();
                    };
                    if (dynamicExp) {
                        assignRecords(scope.$eval(dynamicExp));
                        scope.$watchCollection(dynamicExp, assignRecords);
                    } else assignRecords(staticExp);
                    var currentElement, messageCtrl;
                    ngMessagesCtrl.register(commentNode, messageCtrl = {
                        test: function(name) {
                            return contains(records, name);
                        },
                        attach: function() {
                            currentElement || $transclude(scope, function(elm) {
                                $animate.enter(elm, null, element);
                                currentElement = elm;
                                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();
                                currentElement.on("$destroy", function() {
                                    if (currentElement && currentElement.$$attachId === $$attachId) {
                                        ngMessagesCtrl.deregister(commentNode);
                                        messageCtrl.detach();
                                    }
                                });
                            });
                        },
                        detach: function() {
                            if (currentElement) {
                                var elm = currentElement;
                                currentElement = null;
                                $animate.leave(elm);
                            }
                        }
                    });
                }
            };
        } ];
    }
    var isArray = angular.isArray, forEach = angular.forEach, isString = angular.isString, jqLite = angular.element;
    angular.module("ngMessages", []).directive("ngMessages", [ "$animate", function($animate) {
        function isAttrTruthy(scope, attr) {
            return isString(attr) && 0 === attr.length || truthy(scope.$eval(attr));
        }
        function truthy(val) {
            return isString(val) ? val.length : !!val;
        }
        return {
            require: "ngMessages",
            restrict: "AE",
            controller: [ "$element", "$scope", "$attrs", function($element, $scope, $attrs) {
                function findPreviousMessage(parent, comment) {
                    for (var prevNode = comment, parentLookup = []; prevNode && prevNode !== parent; ) {
                        var prevKey = prevNode.$$ngMessageNode;
                        if (prevKey && prevKey.length) return messages[prevKey];
                        if (prevNode.childNodes.length && -1 == parentLookup.indexOf(prevNode)) {
                            parentLookup.push(prevNode);
                            prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];
                        } else prevNode = prevNode.previousSibling || prevNode.parentNode;
                    }
                }
                function insertMessageNode(parent, comment, key) {
                    var messageNode = messages[key];
                    if (ctrl.head) {
                        var match = findPreviousMessage(parent, comment);
                        if (match) {
                            messageNode.next = match.next;
                            match.next = messageNode;
                        } else {
                            messageNode.next = ctrl.head;
                            ctrl.head = messageNode;
                        }
                    } else ctrl.head = messageNode;
                }
                function removeMessageNode(parent, comment, key) {
                    var messageNode = messages[key], match = findPreviousMessage(parent, comment);
                    match ? match.next = messageNode.next : ctrl.head = messageNode.next;
                }
                var ctrl = this, latestKey = 0, nextAttachId = 0;
                this.getAttachId = function() {
                    return nextAttachId++;
                };
                var renderLater, cachedCollection, messages = this.messages = {};
                this.render = function(collection) {
                    collection = collection || {};
                    renderLater = !1;
                    cachedCollection = collection;
                    for (var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) || isAttrTruthy($scope, $attrs.multiple), unmatchedMessages = [], matchedKeys = {}, messageItem = ctrl.head, messageFound = !1, totalMessages = 0; null != messageItem; ) {
                        totalMessages++;
                        var messageCtrl = messageItem.message, messageUsed = !1;
                        messageFound || forEach(collection, function(value, key) {
                            if (!messageUsed && truthy(value) && messageCtrl.test(key)) {
                                if (matchedKeys[key]) return;
                                matchedKeys[key] = !0;
                                messageUsed = !0;
                                messageCtrl.attach();
                            }
                        });
                        messageUsed ? messageFound = !multiple : unmatchedMessages.push(messageCtrl);
                        messageItem = messageItem.next;
                    }
                    forEach(unmatchedMessages, function(messageCtrl) {
                        messageCtrl.detach();
                    });
                    unmatchedMessages.length !== totalMessages ? $animate.setClass($element, "ng-active", "ng-inactive") : $animate.setClass($element, "ng-inactive", "ng-active");
                };
                $scope.$watchCollection($attrs.ngMessages || $attrs.for, ctrl.render);
                this.reRender = function() {
                    if (!renderLater) {
                        renderLater = !0;
                        $scope.$evalAsync(function() {
                            renderLater && cachedCollection && ctrl.render(cachedCollection);
                        });
                    }
                };
                this.register = function(comment, messageCtrl) {
                    var nextKey = latestKey.toString();
                    messages[nextKey] = {
                        message: messageCtrl
                    };
                    insertMessageNode($element[0], comment, nextKey);
                    comment.$$ngMessageNode = nextKey;
                    latestKey++;
                    ctrl.reRender();
                };
                this.deregister = function(comment) {
                    var key = comment.$$ngMessageNode;
                    delete comment.$$ngMessageNode;
                    removeMessageNode($element[0], comment, key);
                    delete messages[key];
                    ctrl.reRender();
                };
            } ]
        };
    } ]).directive("ngMessagesInclude", [ "$templateRequest", "$document", "$compile", function($templateRequest, $document, $compile) {
        return {
            restrict: "AE",
            require: "^^ngMessages",
            link: function($scope, element, attrs) {
                var src = attrs.ngMessagesInclude || attrs.src;
                $templateRequest(src).then(function(html) {
                    $compile(html)($scope, function(contents) {
                        element.after(contents);
                        var anchor = jqLite($document[0].createComment(" ngMessagesInclude: " + src + " "));
                        element.after(anchor);
                        element.remove();
                    });
                });
            }
        };
    } ]).directive("ngMessage", ngMessageDirectiveFactory("AE")).directive("ngMessageExp", ngMessageDirectiveFactory("A"));
}(window, window.angular);

!function(window, angular, undefined) {
    "use strict";
    function isValidDottedPath(path) {
        return null != path && "" !== path && "hasOwnProperty" !== path && MEMBER_NAME_REGEX.test("." + path);
    }
    function lookupDottedPath(obj, path) {
        if (!isValidDottedPath(path)) throw $resourceMinErr("badmember", 'Dotted member path "@{0}" is invalid.', path);
        for (var keys = path.split("."), i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
            var key = keys[i];
            obj = null !== obj ? obj[key] : undefined;
        }
        return obj;
    }
    function shallowClearAndCopy(src, dst) {
        dst = dst || {};
        angular.forEach(dst, function(value, key) {
            delete dst[key];
        });
        for (var key in src) !src.hasOwnProperty(key) || "$" === key.charAt(0) && "$" === key.charAt(1) || (dst[key] = src[key]);
        return dst;
    }
    var $resourceMinErr = angular.$$minErr("$resource"), MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    angular.module("ngResource", [ "ng" ]).provider("$resource", function() {
        var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\/\/[^\/]*/, provider = this;
        this.defaults = {
            stripTrailingSlashes: !0,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: !0
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        };
        this.$get = [ "$http", "$log", "$q", function($http, $log, $q) {
            function encodeUriSegment(val) {
                return encodeUriQuery(val, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
            }
            function encodeUriQuery(val, pctEncodeSpaces) {
                return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
            }
            function Route(template, defaults) {
                this.template = template;
                this.defaults = extend({}, provider.defaults, defaults);
                this.urlParams = {};
            }
            function resourceFactory(url, paramDefaults, actions, options) {
                function extractParams(data, actionParams) {
                    var ids = {};
                    actionParams = extend({}, paramDefaults, actionParams);
                    forEach(actionParams, function(value, key) {
                        isFunction(value) && (value = value());
                        ids[key] = value && value.charAt && "@" == value.charAt(0) ? lookupDottedPath(data, value.substr(1)) : value;
                    });
                    return ids;
                }
                function defaultResponseInterceptor(response) {
                    return response.resource;
                }
                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }
                var route = new Route(url, options);
                actions = extend({}, provider.defaults.actions, actions);
                Resource.prototype.toJSON = function() {
                    var data = extend({}, this);
                    delete data.$promise;
                    delete data.$resolved;
                    return data;
                };
                forEach(actions, function(action, name) {
                    var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
                    Resource[name] = function(a1, a2, a3, a4) {
                        var data, success, error, params = {};
                        switch (arguments.length) {
                          case 4:
                            error = a4;
                            success = a3;

                          case 3:
                          case 2:
                            if (!isFunction(a2)) {
                                params = a1;
                                data = a2;
                                success = a3;
                                break;
                            }
                            if (isFunction(a1)) {
                                success = a1;
                                error = a2;
                                break;
                            }
                            success = a2;
                            error = a3;

                          case 1:
                            isFunction(a1) ? success = a1 : hasBody ? data = a1 : params = a1;
                            break;

                          case 0:
                            break;

                          default:
                            throw $resourceMinErr("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var isInstanceCall = this instanceof Resource, value = isInstanceCall ? data : action.isArray ? [] : new Resource(data), httpConfig = {}, responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor, responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
                        forEach(action, function(value, key) {
                            switch (key) {
                              default:
                                httpConfig[key] = copy(value);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                                break;

                              case "timeout":
                                value && !angular.isNumber(value) && $log.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests.\n  If you need support for cancellable $resource actions, you should upgrade to version 1.5 or higher.");
                            }
                        });
                        hasBody && (httpConfig.data = data);
                        route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
                        var promise = $http(httpConfig).then(function(response) {
                            var data = response.data, promise = value.$promise;
                            if (data) {
                                if (angular.isArray(data) !== !!action.isArray) throw $resourceMinErr("badcfg", "Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})", name, action.isArray ? "array" : "object", angular.isArray(data) ? "array" : "object", httpConfig.method, httpConfig.url);
                                if (action.isArray) {
                                    value.length = 0;
                                    forEach(data, function(item) {
                                        "object" == typeof item ? value.push(new Resource(item)) : value.push(item);
                                    });
                                } else {
                                    shallowClearAndCopy(data, value);
                                    value.$promise = promise;
                                }
                            }
                            value.$resolved = !0;
                            response.resource = value;
                            return response;
                        }, function(response) {
                            value.$resolved = !0;
                            (error || noop)(response);
                            return $q.reject(response);
                        });
                        promise = promise.then(function(response) {
                            var value = responseInterceptor(response);
                            (success || noop)(value, response.headers);
                            return value;
                        }, responseErrorInterceptor);
                        if (!isInstanceCall) {
                            value.$promise = promise;
                            value.$resolved = !1;
                            return value;
                        }
                        return promise;
                    };
                    Resource.prototype["$" + name] = function(params, success, error) {
                        if (isFunction(params)) {
                            error = success;
                            success = params;
                            params = {};
                        }
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                });
                Resource.bind = function(additionalParamDefaults) {
                    return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
                };
                return Resource;
            }
            var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isFunction = angular.isFunction;
            Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var val, encodedVal, self = this, url = actionUrl || self.template, protocolAndDomain = "", urlParams = self.urlParams = {};
                    forEach(url.split(/\W/), function(param) {
                        if ("hasOwnProperty" === param) throw $resourceMinErr("badname", "hasOwnProperty is not a valid parameter name.");
                        !new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url) && (urlParams[param] = !0);
                    });
                    url = url.replace(/\\:/g, ":");
                    url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {
                        protocolAndDomain = match;
                        return "";
                    });
                    params = params || {};
                    forEach(self.urlParams, function(_, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
                        if (angular.isDefined(val) && null !== val) {
                            encodedVal = encodeUriSegment(val);
                            url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                                return encodedVal + p1;
                            });
                        } else url = url.replace(new RegExp("(/?):" + urlParam + "(\\W|$)", "g"), function(match, leadingSlashes, tail) {
                            return "/" == tail.charAt(0) ? tail : leadingSlashes + tail;
                        });
                    });
                    self.defaults.stripTrailingSlashes && (url = url.replace(/\/+$/, "") || "/");
                    url = url.replace(/\/\.(?=\w+($|\?))/, ".");
                    config.url = protocolAndDomain + url.replace(/\/\\\./, "/.");
                    forEach(params, function(value, key) {
                        if (!self.urlParams[key]) {
                            config.params = config.params || {};
                            config.params[key] = value;
                        }
                    });
                }
            };
            return resourceFactory;
        } ];
    });
}(window, window.angular);

!function() {
    "use strict";
    var legacySupport = 1 === angular.version.major && 0 === angular.version.minor;
    angular.module("ui-rangeSlider", []).directive("rangeSlider", [ "$document", "$filter", "$log", function($document, $filter, $log) {
        var eventNamespace = ".rangeSlider", defaults = {
            disabled: !1,
            orientation: "horizontal",
            step: 0,
            decimalPlaces: 0,
            showValues: !0,
            preventEqualMinMax: !1,
            attachHandleValues: !1
        }, actions = window.navigator.pointerEnabled ? {
            start: "pointerdown",
            move: "pointermove",
            end: "pointerup",
            over: "pointerdown",
            out: "mouseout"
        } : window.navigator.msPointerEnabled ? {
            start: "MSPointerDown",
            move: "MSPointerMove",
            end: "MSPointerUp",
            over: "MSPointerDown",
            out: "mouseout"
        } : {
            start: "mousedown touchstart",
            move: "mousemove touchmove",
            end: "mouseup touchend",
            over: "mouseover touchstart",
            out: "mouseout"
        }, onEvent = actions.start + eventNamespace, moveEvent = actions.move + eventNamespace, offEvent = actions.end + eventNamespace, overEvent = actions.over + eventNamespace, outEvent = actions.out + eventNamespace, client = function(f) {
            try {
                return [ f.clientX || f.originalEvent.clientX || f.originalEvent.touches[0].clientX, f.clientY || f.originalEvent.clientY || f.originalEvent.touches[0].clientY ];
            } catch (e) {
                return [ "x", "y" ];
            }
        }, restrict = function(value) {
            return value < 0 ? 0 : value > 100 ? 100 : value;
        }, isNumber = function(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }, scopeOptions = {
            disabled: "=?",
            min: "=",
            max: "=",
            modelMin: "=?",
            modelMax: "=?",
            onHandleDown: "&",
            onHandleUp: "&",
            orientation: "@",
            step: "@",
            decimalPlaces: "@",
            filter: "@",
            filterOptions: "@",
            showValues: "@",
            pinHandle: "@",
            preventEqualMinMax: "@",
            attachHandleValues: "@",
            getterSetter: "@"
        };
        if (legacySupport) {
            scopeOptions.disabled = "=";
            scopeOptions.modelMin = "=";
            scopeOptions.modelMax = "=";
        }
        return {
            restrict: "A",
            replace: !0,
            template: [ '<div class="ngrs-range-slider">', '<div class="ngrs-runner">', '<div class="ngrs-handle ngrs-handle-min"><i></i></div>', '<div class="ngrs-handle ngrs-handle-max"><i></i></div>', '<div class="ngrs-join"></div>', "</div>", '<div class="ngrs-value-runner">', '<div class="ngrs-value ngrs-value-min" ng-show="showValues"><div>{{filteredModelMin}}</div></div>', '<div class="ngrs-value ngrs-value-max" ng-show="showValues"><div>{{filteredModelMax}}</div></div>', "</div>", "</div>" ].join(""),
            scope: scopeOptions,
            link: function(scope, element, attrs, controller) {
                function modelMin(newValue) {
                    return scope.getterSetter ? arguments.length ? scope.modelMin(newValue) : scope.modelMin() : arguments.length ? scope.modelMin = newValue : scope.modelMin;
                }
                function modelMax(newValue) {
                    return scope.getterSetter ? arguments.length ? scope.modelMax(newValue) : scope.modelMax() : arguments.length ? scope.modelMax = newValue : scope.modelMax;
                }
                function setPinHandle(status) {
                    if ("min" === status) {
                        angular.element(handles[0]).css("display", "none");
                        angular.element(handles[1]).css("display", "block");
                    } else if ("max" === status) {
                        angular.element(handles[0]).css("display", "block");
                        angular.element(handles[1]).css("display", "none");
                    } else {
                        angular.element(handles[0]).css("display", "block");
                        angular.element(handles[1]).css("display", "block");
                    }
                }
                function setDisabledStatus(status) {
                    status ? $slider.addClass("ngrs-disabled") : $slider.removeClass("ngrs-disabled");
                }
                function setMinMax() {
                    scope.min > scope.max && throwError("min must be less than or equal to max");
                    if (angular.isDefined(scope.min) && angular.isDefined(scope.max)) {
                        isNumber(scope.min) || throwError("min must be a number");
                        isNumber(scope.max) || throwError("max must be a number");
                        range = scope.max - scope.min;
                        allowedRange = [ scope.min, scope.max ];
                        setModelMinMax();
                    }
                }
                function setModelMinMax() {
                    if (modelMin() > modelMax()) {
                        throwWarning("modelMin must be less than or equal to modelMax");
                        modelMin(modelMax());
                    }
                    if ((angular.isDefined(modelMin()) || "min" === scope.pinHandle) && (angular.isDefined(modelMax()) || "max" === scope.pinHandle)) {
                        if (!isNumber(modelMin())) {
                            "min" !== scope.pinHandle && throwWarning("modelMin must be a number");
                            modelMin(scope.min);
                        }
                        if (!isNumber(modelMax())) {
                            "max" !== scope.pinHandle && throwWarning("modelMax must be a number");
                            modelMax(scope.max);
                        }
                        var value1pos, value2pos, handle1pos = restrict((modelMin() - scope.min) / range * 100), handle2pos = restrict((modelMax() - scope.min) / range * 100);
                        if (scope.attachHandleValues) {
                            value1pos = handle1pos;
                            value2pos = handle2pos;
                        }
                        modelMin(Math.max(scope.min, modelMin()));
                        modelMax(Math.min(scope.max, modelMax()));
                        if (scope.filter && scope.filterOptions) {
                            scope.filteredModelMin = $filter(scope.filter)(modelMin(), scope.filterOptions);
                            scope.filteredModelMax = $filter(scope.filter)(modelMax(), scope.filterOptions);
                        } else if (scope.filter) {
                            var modelMinOptions, modelMaxOptions, filterTokens = scope.filter.split(":"), filterName = scope.filter.split(":")[0], filterOptions = filterTokens.slice().slice(1);
                            filterOptions = filterOptions.map(function(arg) {
                                return isNumber(arg) ? +arg : '"' == arg[0] && '"' == arg[arg.length - 1] || "'" == arg[0] && "'" == arg[arg.length - 1] ? arg.slice(1, -1) : void 0;
                            });
                            modelMinOptions = filterOptions.slice();
                            modelMaxOptions = filterOptions.slice();
                            modelMinOptions.unshift(modelMin());
                            modelMaxOptions.unshift(modelMax());
                            scope.filteredModelMin = $filter(filterName).apply(null, modelMinOptions);
                            scope.filteredModelMax = $filter(filterName).apply(null, modelMaxOptions);
                        } else {
                            scope.filteredModelMin = modelMin();
                            scope.filteredModelMax = modelMax();
                        }
                        if (scope.min === scope.max && modelMin() == modelMax()) {
                            angular.element(handles[0]).css(pos, "0%");
                            angular.element(handles[1]).css(pos, "100%");
                            if (scope.attachHandleValues) {
                                angular.element(values[0]).css(pos, "0%");
                                angular.element(values[1]).css(pos, "100%");
                            }
                            angular.element(join).css(pos, "0%").css(posOpp, "0%");
                        } else {
                            angular.element(handles[0]).css(pos, handle1pos + "%");
                            angular.element(handles[1]).css(pos, handle2pos + "%");
                            if (scope.attachHandleValues) {
                                angular.element(values[0]).css(pos, value1pos + "%");
                                angular.element(values[1]).css(pos, value2pos + "%");
                                angular.element(values[1]).css(posOpp, "auto");
                            }
                            angular.element(join).css(pos, handle1pos + "%").css(posOpp, 100 - handle2pos + "%");
                            handle1pos > 95 && angular.element(handles[0]).css("z-index", 3);
                        }
                    }
                }
                function handleMove(index) {
                    var $handle = handles[index];
                    $handle.bind(onEvent + "X", function(event) {
                        var handleDownClass = (0 === index ? "ngrs-handle-min" : "ngrs-handle-max") + "-down", modelValue = (0 === index ? modelMin() : modelMax()) - scope.min, originalPosition = modelValue / range * 100, originalClick = client(event), previousClick = originalClick, previousProposal = !1;
                        angular.isFunction(scope.onHandleDown) && scope.onHandleDown();
                        angular.element("body").bind("selectstart" + eventNamespace, function() {
                            return !1;
                        });
                        if (!scope.disabled) {
                            down = !0;
                            $handle.addClass("ngrs-down");
                            $slider.addClass("ngrs-focus " + handleDownClass);
                            angular.element("body").addClass("ngrs-touching");
                            $document.bind(moveEvent, function(e) {
                                e.preventDefault();
                                var movement, proposal, currentClick = client(e), per = scope.step / range * 100, otherModelPosition = ((0 === index ? modelMax() : modelMin()) - scope.min) / range * 100;
                                if ("x" !== currentClick[0]) {
                                    currentClick[0] -= originalClick[0];
                                    currentClick[1] -= originalClick[1];
                                    movement = [ previousClick[0] !== currentClick[0], previousClick[1] !== currentClick[1] ];
                                    proposal = originalPosition + 100 * currentClick[orientation] / (orientation ? $slider.height() : $slider.width());
                                    proposal = restrict(proposal);
                                    if (scope.preventEqualMinMax) {
                                        0 === per && (per = 1 / range * 100);
                                        0 === index ? otherModelPosition -= per : 1 === index && (otherModelPosition += per);
                                    }
                                    0 === index ? proposal = proposal > otherModelPosition ? otherModelPosition : proposal : 1 === index && (proposal = proposal < otherModelPosition ? otherModelPosition : proposal);
                                    scope.step > 0 && proposal < 100 && proposal > 0 && (proposal = Math.round(proposal / per) * per);
                                    proposal > 95 && 0 === index ? $handle.css("z-index", 3) : $handle.css("z-index", "");
                                    if (movement[orientation] && proposal != previousProposal) {
                                        0 === index ? modelMin(parseFloat(parseFloat(proposal * range / 100 + scope.min).toFixed(scope.decimalPlaces))) : 1 === index && modelMax(parseFloat(parseFloat(proposal * range / 100 + scope.min).toFixed(scope.decimalPlaces)));
                                        scope.$apply();
                                        previousProposal = proposal;
                                    }
                                    previousClick = currentClick;
                                }
                            }).bind(offEvent, function() {
                                angular.isFunction(scope.onHandleUp) && scope.onHandleUp();
                                $document.off(moveEvent);
                                $document.off(offEvent);
                                angular.element("body").removeClass("ngrs-touching");
                                down = !1;
                                $handle.removeClass("ngrs-down");
                                $handle.removeClass("ngrs-over");
                                $slider.removeClass("ngrs-focus " + handleDownClass);
                            });
                        }
                    }).on(overEvent, function() {
                        $handle.addClass("ngrs-over");
                    }).on(outEvent, function() {
                        down || $handle.removeClass("ngrs-over");
                    });
                }
                function throwError(message) {
                    scope.disabled = !0;
                    throw new Error("RangeSlider: " + message);
                }
                function throwWarning(message) {
                    $log.warn(message);
                }
                var $slider = angular.element(element), handles = [ element.find(".ngrs-handle-min"), element.find(".ngrs-handle-max") ], values = [ element.find(".ngrs-value-min"), element.find(".ngrs-value-max") ], join = element.find(".ngrs-join"), pos = "left", posOpp = "right", orientation = 0, allowedRange = [ 0, 0 ], range = 0, down = !1;
                scope.filteredModelMin = modelMin();
                scope.filteredModelMax = modelMax();
                attrs.$observe("disabled", function(val) {
                    angular.isDefined(val) || (scope.disabled = defaults.disabled);
                    scope.$watch("disabled", setDisabledStatus);
                });
                attrs.$observe("orientation", function(val) {
                    angular.isDefined(val) || (scope.orientation = defaults.orientation);
                    for (var useClass, classNames = scope.orientation.split(" "), i = 0, l = classNames.length; i < l; i++) classNames[i] = "ngrs-" + classNames[i];
                    useClass = classNames.join(" ");
                    $slider.addClass(useClass);
                    if ("vertical" === scope.orientation || "vertical left" === scope.orientation || "vertical right" === scope.orientation) {
                        pos = "top";
                        posOpp = "bottom";
                        orientation = 1;
                    }
                });
                attrs.$observe("step", function(val) {
                    angular.isDefined(val) || (scope.step = defaults.step);
                });
                attrs.$observe("decimalPlaces", function(val) {
                    angular.isDefined(val) || (scope.decimalPlaces = defaults.decimalPlaces);
                });
                attrs.$observe("showValues", function(val) {
                    angular.isDefined(val) ? scope.showValues = "false" !== val : scope.showValues = defaults.showValues;
                });
                attrs.$observe("pinHandle", function(val) {
                    angular.isDefined(val) ? scope.pinHandle = "min" === val || "max" === val ? val : null : scope.pinHandle = null;
                    scope.$watch("pinHandle", setPinHandle);
                });
                attrs.$observe("preventEqualMinMax", function(val) {
                    angular.isDefined(val) ? scope.preventEqualMinMax = "false" !== val : scope.preventEqualMinMax = defaults.preventEqualMinMax;
                });
                attrs.$observe("attachHandleValues", function(val) {
                    if (angular.isDefined(val)) if ("true" === val || "" === val) {
                        scope.attachHandleValues = !0;
                        element.find(".ngrs-value-runner").addClass("ngrs-attached-handles");
                    } else scope.attachHandleValues = !1; else scope.attachHandleValues = defaults.attachHandleValues;
                });
                scope.$watch("min", setMinMax);
                scope.$watch("max", setMinMax);
                scope.$watch(function() {
                    return modelMin();
                }, setModelMinMax);
                scope.$watch(function() {
                    return modelMax();
                }, setModelMinMax);
                scope.$on("$destroy", function() {
                    $slider.off(eventNamespace);
                    angular.element("body").off(eventNamespace);
                    $document.off(eventNamespace);
                    for (var i = 0, l = handles.length; i < l; i++) {
                        handles[i].off(eventNamespace);
                        handles[i].off(eventNamespace + "X");
                    }
                });
                $slider.bind("selectstart" + eventNamespace, function(event) {
                    return !1;
                }).bind("click", function(event) {
                    event.stopPropagation();
                });
                handleMove(0);
                handleMove(1);
            }
        };
    } ]);
    window.requestAnimFrame = function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
            window.setTimeout(callback, 1e3 / 60);
        };
    }();
}();

"undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "ui.router");

!function(window, angular, undefined) {
    "use strict";
    function inherit(parent, extra) {
        return extend(new (extend(function() {}, {
            prototype: parent
        }))(), extra);
    }
    function merge(dst) {
        forEach(arguments, function(obj) {
            obj !== dst && forEach(obj, function(value, key) {
                dst.hasOwnProperty(key) || (dst[key] = value);
            });
        });
        return dst;
    }
    function ancestors(first, second) {
        var path = [];
        for (var n in first.path) {
            if (first.path[n] !== second.path[n]) break;
            path.push(first.path[n]);
        }
        return path;
    }
    function objectKeys(object) {
        if (Object.keys) return Object.keys(object);
        var result = [];
        forEach(object, function(val, key) {
            result.push(key);
        });
        return result;
    }
    function indexOf(array, value) {
        if (Array.prototype.indexOf) return array.indexOf(value, Number(arguments[2]) || 0);
        var len = array.length >>> 0, from = Number(arguments[2]) || 0;
        from = from < 0 ? Math.ceil(from) : Math.floor(from);
        from < 0 && (from += len);
        for (;from < len; from++) if (from in array && array[from] === value) return from;
        return -1;
    }
    function inheritParams(currentParams, newParams, $current, $to) {
        var parentParams, parents = ancestors($current, $to), inherited = {}, inheritList = [];
        for (var i in parents) if (parents[i] && parents[i].params) {
            parentParams = objectKeys(parents[i].params);
            if (parentParams.length) for (var j in parentParams) if (!(indexOf(inheritList, parentParams[j]) >= 0)) {
                inheritList.push(parentParams[j]);
                inherited[parentParams[j]] = currentParams[parentParams[j]];
            }
        }
        return extend({}, inherited, newParams);
    }
    function equalForKeys(a, b, keys) {
        if (!keys) {
            keys = [];
            for (var n in a) keys.push(n);
        }
        for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            if (a[k] != b[k]) return !1;
        }
        return !0;
    }
    function filterByKeys(keys, values) {
        var filtered = {};
        forEach(keys, function(name) {
            filtered[name] = values[name];
        });
        return filtered;
    }
    function pick(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        forEach(keys, function(key) {
            key in obj && (copy[key] = obj[key]);
        });
        return copy;
    }
    function omit(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var key in obj) -1 == indexOf(keys, key) && (copy[key] = obj[key]);
        return copy;
    }
    function filter(collection, callback) {
        var array = isArray(collection), result = array ? [] : {};
        forEach(collection, function(val, i) {
            callback(val, i) && (result[array ? result.length : i] = val);
        });
        return result;
    }
    function map(collection, callback) {
        var result = isArray(collection) ? [] : {};
        forEach(collection, function(val, i) {
            result[i] = callback(val, i);
        });
        return result;
    }
    function $Resolve($q, $injector) {
        var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
            $$promises: NOTHING,
            $$values: NOTHING
        });
        this.study = function(invocables) {
            function visit(value, key) {
                if (visited[key] !== VISIT_DONE) {
                    cycle.push(key);
                    if (visited[key] === VISIT_IN_PROGRESS) {
                        cycle.splice(0, indexOf(cycle, key));
                        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
                    }
                    visited[key] = VISIT_IN_PROGRESS;
                    if (isString(value)) plan.push(key, [ function() {
                        return $injector.get(value);
                    } ], NO_DEPENDENCIES); else {
                        var params = $injector.annotate(value);
                        forEach(params, function(param) {
                            param !== key && invocables.hasOwnProperty(param) && visit(invocables[param], param);
                        });
                        plan.push(key, value, params);
                    }
                    cycle.pop();
                    visited[key] = VISIT_DONE;
                }
            }
            function isResolve(value) {
                return isObject(value) && value.then && value.$$promises;
            }
            if (!isObject(invocables)) throw new Error("'invocables' must be an object");
            var invocableKeys = objectKeys(invocables || {}), plan = [], cycle = [], visited = {};
            forEach(invocables, visit);
            invocables = cycle = visited = null;
            return function(locals, parent, self) {
                function done() {
                    if (!--wait) {
                        merged || merge(values, parent.$$values);
                        result.$$values = values;
                        result.$$promises = result.$$promises || !0;
                        delete result.$$inheritedValues;
                        resolution.resolve(values);
                    }
                }
                function fail(reason) {
                    result.$$failure = reason;
                    resolution.reject(reason);
                }
                if (isResolve(locals) && self === undefined) {
                    self = parent;
                    parent = locals;
                    locals = null;
                }
                if (locals) {
                    if (!isObject(locals)) throw new Error("'locals' must be an object");
                } else locals = NO_LOCALS;
                if (parent) {
                    if (!isResolve(parent)) throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                } else parent = NO_PARENT;
                var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = !1;
                if (isDefined(parent.$$failure)) {
                    fail(parent.$$failure);
                    return result;
                }
                parent.$$inheritedValues && merge(values, omit(parent.$$inheritedValues, invocableKeys));
                extend(promises, parent.$$promises);
                if (parent.$$values) {
                    merged = merge(values, omit(parent.$$values, invocableKeys));
                    result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                    done();
                } else {
                    parent.$$inheritedValues && (result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys));
                    parent.then(done, fail);
                }
                for (var i = 0, ii = plan.length; i < ii; i += 3) locals.hasOwnProperty(plan[i]) ? done() : function(key, invocable, params) {
                    function onfailure(reason) {
                        invocation.reject(reason);
                        fail(reason);
                    }
                    function proceed() {
                        if (!isDefined(result.$$failure)) try {
                            invocation.resolve($injector.invoke(invocable, self, values));
                            invocation.promise.then(function(result) {
                                values[key] = result;
                                done();
                            }, onfailure);
                        } catch (e) {
                            onfailure(e);
                        }
                    }
                    var invocation = $q.defer(), waitParams = 0;
                    forEach(params, function(dep) {
                        if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                            waitParams++;
                            promises[dep].then(function(result) {
                                values[dep] = result;
                                --waitParams || proceed();
                            }, onfailure);
                        }
                    });
                    waitParams || proceed();
                    promises[key] = invocation.promise;
                }(plan[i], plan[i + 1], plan[i + 2]);
                return result;
            };
        };
        this.resolve = function(invocables, locals, parent, self) {
            return this.study(invocables)(locals, parent, self);
        };
    }
    function $TemplateFactory($http, $templateCache, $injector) {
        this.fromConfig = function(config, params, locals) {
            return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
        };
        this.fromString = function(template, params) {
            return isFunction(template) ? template(params) : template;
        };
        this.fromUrl = function(url, params) {
            isFunction(url) && (url = url(params));
            return null == url ? null : $http.get(url, {
                cache: $templateCache,
                headers: {
                    Accept: "text/html"
                }
            }).then(function(response) {
                return response.data;
            });
        };
        this.fromProvider = function(provider, params, locals) {
            return $injector.invoke(provider, null, locals || {
                params: params
            });
        };
    }
    function UrlMatcher(pattern, config, parentMatcher) {
        function addParameter(id, type, config, location) {
            paramNames.push(id);
            if (parentParams[id]) return parentParams[id];
            if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
            params[id] = new $$UMFP.Param(id, type, config, location);
            return params[id];
        }
        function quoteRegExp(string, pattern, squash, optional) {
            var surroundPattern = [ "", "" ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!pattern) return result;
            switch (squash) {
              case !1:
                surroundPattern = [ "(", ")" + (optional ? "?" : "") ];
                break;

              case !0:
                result = result.replace(/\/$/, "");
                surroundPattern = [ "(?:/(", ")|/)?" ];
                break;

              default:
                surroundPattern = [ "(" + squash + "|", ")?" ];
            }
            return result + surroundPattern[0] + pattern + surroundPattern[1];
        }
        function matchDetails(m, isSearch) {
            var id, regexp, segment, type, cfg;
            id = m[2] || m[3];
            cfg = config.params[id];
            segment = pattern.substring(last, m.index);
            regexp = isSearch ? m[4] : m[4] || ("*" == m[1] ? ".*" : null);
            regexp && (type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), {
                pattern: new RegExp(regexp, config.caseInsensitive ? "i" : undefined)
            }));
            return {
                id: id,
                regexp: regexp,
                segment: segment,
                type: type,
                cfg: cfg
            };
        }
        config = extend({
            params: {}
        }, isObject(config) ? config : {});
        var m, placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = "^", last = 0, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
        this.source = pattern;
        for (var p, param, segment; m = placeholder.exec(pattern); ) {
            p = matchDetails(m, !1);
            if (p.segment.indexOf("?") >= 0) break;
            param = addParameter(p.id, p.type, p.cfg, "path");
            compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
            segments.push(p.segment);
            last = placeholder.lastIndex;
        }
        segment = pattern.substring(last);
        var i = segment.indexOf("?");
        if (i >= 0) {
            var search = this.sourceSearch = segment.substring(i);
            segment = segment.substring(0, i);
            this.sourcePath = pattern.substring(0, last + i);
            if (search.length > 0) {
                last = 0;
                for (;m = searchPlaceholder.exec(search); ) {
                    p = matchDetails(m, !0);
                    param = addParameter(p.id, p.type, p.cfg, "search");
                    last = placeholder.lastIndex;
                }
            }
        } else {
            this.sourcePath = pattern;
            this.sourceSearch = "";
        }
        compiled += quoteRegExp(segment) + (!1 === config.strict ? "/?" : "") + "$";
        segments.push(segment);
        this.regexp = new RegExp(compiled, config.caseInsensitive ? "i" : undefined);
        this.prefix = segments[0];
        this.$$paramNames = paramNames;
    }
    function Type(config) {
        extend(this, config);
    }
    function $UrlMatcherFactory() {
        function valToString(val) {
            return null != val ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val;
        }
        function valFromString(val) {
            return null != val ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val;
        }
        function getDefaultConfig() {
            return {
                strict: isStrictMode,
                caseInsensitive: isCaseInsensitive
            };
        }
        function isInjectable(value) {
            return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
        }
        function flushTypeQueue() {
            for (;typeQueue.length; ) {
                var type = typeQueue.shift();
                if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                angular.extend($types[type.name], injector.invoke(type.def));
            }
        }
        function ParamSet(params) {
            extend(this, params || {});
        }
        $$UMFP = this;
        var injector, isCaseInsensitive = !1, isStrictMode = !0, defaultSquashPolicy = !1, $types = {}, enqueue = !0, typeQueue = [], defaultTypes = {
            string: {
                encode: valToString,
                decode: valFromString,
                is: function(val) {
                    return null == val || !isDefined(val) || "string" == typeof val;
                },
                pattern: /[^\/]*/
            },
            int: {
                encode: valToString,
                decode: function(val) {
                    return parseInt(val, 10);
                },
                is: function(val) {
                    return isDefined(val) && this.decode(val.toString()) === val;
                },
                pattern: /\d+/
            },
            bool: {
                encode: function(val) {
                    return val ? 1 : 0;
                },
                decode: function(val) {
                    return 0 !== parseInt(val, 10);
                },
                is: function(val) {
                    return !0 === val || !1 === val;
                },
                pattern: /0|1/
            },
            date: {
                encode: function(val) {
                    return this.is(val) ? [ val.getFullYear(), ("0" + (val.getMonth() + 1)).slice(-2), ("0" + val.getDate()).slice(-2) ].join("-") : undefined;
                },
                decode: function(val) {
                    if (this.is(val)) return val;
                    var match = this.capture.exec(val);
                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                },
                is: function(val) {
                    return val instanceof Date && !isNaN(val.valueOf());
                },
                equals: function(a, b) {
                    return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                },
                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
            },
            json: {
                encode: angular.toJson,
                decode: angular.fromJson,
                is: angular.isObject,
                equals: angular.equals,
                pattern: /[^\/]*/
            },
            any: {
                encode: angular.identity,
                decode: angular.identity,
                equals: angular.equals,
                pattern: /.*/
            }
        };
        $UrlMatcherFactory.$$getDefaultValue = function(config) {
            if (!isInjectable(config.value)) return config.value;
            if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
            return injector.invoke(config.value);
        };
        this.caseInsensitive = function(value) {
            isDefined(value) && (isCaseInsensitive = value);
            return isCaseInsensitive;
        };
        this.strictMode = function(value) {
            isDefined(value) && (isStrictMode = value);
            return isStrictMode;
        };
        this.defaultSquashPolicy = function(value) {
            if (!isDefined(value)) return defaultSquashPolicy;
            if (!0 !== value && !1 !== value && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
            defaultSquashPolicy = value;
            return value;
        };
        this.compile = function(pattern, config) {
            return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
        };
        this.isMatcher = function(o) {
            if (!isObject(o)) return !1;
            var result = !0;
            forEach(UrlMatcher.prototype, function(val, name) {
                isFunction(val) && (result = result && isDefined(o[name]) && isFunction(o[name]));
            });
            return result;
        };
        this.type = function(name, definition, definitionFn) {
            if (!isDefined(definition)) return $types[name];
            if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
            $types[name] = new Type(extend({
                name: name
            }, definition));
            if (definitionFn) {
                typeQueue.push({
                    name: name,
                    def: definitionFn
                });
                enqueue || flushTypeQueue();
            }
            return this;
        };
        forEach(defaultTypes, function(type, name) {
            $types[name] = new Type(extend({
                name: name
            }, type));
        });
        $types = inherit($types, {});
        this.$get = [ "$injector", function($injector) {
            injector = $injector;
            enqueue = !1;
            flushTypeQueue();
            forEach(defaultTypes, function(type, name) {
                $types[name] || ($types[name] = new Type(type));
            });
            return this;
        } ];
        this.Param = function(id, type, config, location) {
            function $$getDefaultValue() {
                if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
                var defaultValue = injector.invoke(config.$$fn);
                if (null !== defaultValue && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
                return defaultValue;
            }
            function $value(value) {
                function hasReplaceVal(val) {
                    return function(obj) {
                        return obj.from === val;
                    };
                }
                value = function(value) {
                    var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) {
                        return obj.to;
                    });
                    return replacement.length ? replacement[0] : value;
                }(value);
                return isDefined(value) ? self.type.$normalize(value) : $$getDefaultValue();
            }
            function toString() {
                return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
            }
            var self = this;
            config = function(config) {
                var keys = isObject(config) ? objectKeys(config) : [];
                -1 === indexOf(keys, "value") && -1 === indexOf(keys, "type") && -1 === indexOf(keys, "squash") && -1 === indexOf(keys, "array") && (config = {
                    value: config
                });
                config.$$fn = isInjectable(config.value) ? config.value : function() {
                    return config.value;
                };
                return config;
            }(config);
            type = function(config, urlType, location) {
                if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
                return urlType || (config.type ? angular.isString(config.type) ? $types[config.type] : config.type instanceof Type ? config.type : new Type(config.type) : "config" === location ? $types.any : $types.string);
            }(config, type, location);
            var arrayMode = function() {
                var arrayDefaults = {
                    array: "search" === location && "auto"
                }, arrayParamNomenclature = id.match(/\[\]$/) ? {
                    array: !0
                } : {};
                return extend(arrayDefaults, arrayParamNomenclature, config).array;
            }();
            type = arrayMode ? type.$asArray(arrayMode, "search" === location) : type;
            "string" !== type.name || arrayMode || "path" !== location || config.value !== undefined || (config.value = "");
            var isOptional = config.value !== undefined, squash = function(config, isOptional) {
                var squash = config.squash;
                if (!isOptional || !1 === squash) return !1;
                if (!isDefined(squash) || null == squash) return defaultSquashPolicy;
                if (!0 === squash || isString(squash)) return squash;
                throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
            }(config, isOptional), replace = function(config, arrayMode, isOptional, squash) {
                var replace, configuredKeys, defaultPolicy = [ {
                    from: "",
                    to: isOptional || arrayMode ? undefined : ""
                }, {
                    from: null,
                    to: isOptional || arrayMode ? undefined : ""
                } ];
                replace = isArray(config.replace) ? config.replace : [];
                isString(squash) && replace.push({
                    from: squash,
                    to: undefined
                });
                configuredKeys = map(replace, function(item) {
                    return item.from;
                });
                return filter(defaultPolicy, function(item) {
                    return -1 === indexOf(configuredKeys, item.from);
                }).concat(replace);
            }(config, arrayMode, isOptional, squash);
            extend(this, {
                id: id,
                type: type,
                location: location,
                array: arrayMode,
                squash: squash,
                replace: replace,
                isOptional: isOptional,
                value: $value,
                dynamic: undefined,
                config: config,
                toString: toString
            });
        };
        ParamSet.prototype = {
            $$new: function() {
                return inherit(this, extend(new ParamSet(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                for (var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype); parent; ) {
                    chain.push(parent);
                    parent = parent.$$parent;
                }
                chain.reverse();
                forEach(chain, function(paramset) {
                    forEach(objectKeys(paramset), function(key) {
                        -1 === indexOf(keys, key) && -1 === indexOf(ignore, key) && keys.push(key);
                    });
                });
                return keys;
            },
            $$values: function(paramValues) {
                var values = {}, self = this;
                forEach(self.$$keys(), function(key) {
                    values[key] = self[key].value(paramValues && paramValues[key]);
                });
                return values;
            },
            $$equals: function(paramValues1, paramValues2) {
                var equal = !0, self = this;
                forEach(self.$$keys(), function(key) {
                    var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
                    self[key].type.equals(left, right) || (equal = !1);
                });
                return equal;
            },
            $$validates: function(paramValues) {
                var i, param, rawVal, normalized, encoded, keys = this.$$keys();
                for (i = 0; i < keys.length; i++) {
                    param = this[keys[i]];
                    rawVal = paramValues[keys[i]];
                    if ((rawVal === undefined || null === rawVal) && param.isOptional) break;
                    normalized = param.type.$normalize(rawVal);
                    if (!param.type.is(normalized)) return !1;
                    encoded = param.type.encode(normalized);
                    if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return !1;
                }
                return !0;
            },
            $$parent: undefined
        };
        this.ParamSet = ParamSet;
    }
    function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
        function regExpPrefix(re) {
            var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
            return null != prefix ? prefix[1].replace(/\\(.)/g, "$1") : "";
        }
        function interpolate(pattern, match) {
            return pattern.replace(/\$(\$|\d{1,2})/, function(m, what) {
                return match["$" === what ? 0 : Number(what)];
            });
        }
        function handleIfMatch($injector, handler, match) {
            if (!match) return !1;
            var result = $injector.invoke(handler, handler, {
                $match: match
            });
            return !isDefined(result) || result;
        }
        function $get($location, $rootScope, $injector, $browser, $sniffer) {
            function appendBasePath(url, isHtml5, absolute) {
                return "/" === baseHref ? url : isHtml5 ? baseHref.slice(0, -1) + url : absolute ? baseHref.slice(1) + url : url;
            }
            function update(evt) {
                function check(rule) {
                    var handled = rule($injector, $location);
                    if (!handled) return !1;
                    isString(handled) && $location.replace().url(handled);
                    return !0;
                }
                if (!evt || !evt.defaultPrevented) {
                    lastPushedUrl && $location.url();
                    lastPushedUrl = undefined;
                    var i, n = rules.length;
                    for (i = 0; i < n; i++) if (check(rules[i])) return;
                    otherwise && check(otherwise);
                }
            }
            function listen() {
                listener = listener || $rootScope.$on("$locationChangeSuccess", update);
                return listener;
            }
            var lastPushedUrl, baseHref = $browser.baseHref(), location = $location.url();
            interceptDeferred || listen();
            return {
                sync: function() {
                    update();
                },
                listen: function() {
                    return listen();
                },
                update: function(read) {
                    if (read) location = $location.url(); else if ($location.url() !== location) {
                        $location.url(location);
                        $location.replace();
                    }
                },
                push: function(urlMatcher, params, options) {
                    var url = urlMatcher.format(params || {});
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    $location.url(url);
                    lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                    options && options.replace && $location.replace();
                },
                href: function(urlMatcher, params, options) {
                    if (!urlMatcher.validates(params)) return null;
                    var isHtml5 = $locationProvider.html5Mode();
                    angular.isObject(isHtml5) && (isHtml5 = isHtml5.enabled);
                    isHtml5 = isHtml5 && $sniffer.history;
                    var url = urlMatcher.format(params);
                    options = options || {};
                    isHtml5 || null === url || (url = "#" + $locationProvider.hashPrefix() + url);
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    url = appendBasePath(url, isHtml5, options.absolute);
                    if (!options.absolute || !url) return url;
                    var slash = !isHtml5 && url ? "/" : "", port = $location.port();
                    port = 80 === port || 443 === port ? "" : ":" + port;
                    return [ $location.protocol(), "://", $location.host(), port, slash, url ].join("");
                }
            };
        }
        var listener, rules = [], otherwise = null, interceptDeferred = !1;
        this.rule = function(rule) {
            if (!isFunction(rule)) throw new Error("'rule' must be a function");
            rules.push(rule);
            return this;
        };
        this.otherwise = function(rule) {
            if (isString(rule)) {
                var redirect = rule;
                rule = function() {
                    return redirect;
                };
            } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
            otherwise = rule;
            return this;
        };
        this.when = function(what, handler) {
            var redirect, handlerIsString = isString(handler);
            isString(what) && (what = $urlMatcherFactory.compile(what));
            if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");
            var strategies = {
                matcher: function(what, handler) {
                    if (handlerIsString) {
                        redirect = $urlMatcherFactory.compile(handler);
                        handler = [ "$match", function($match) {
                            return redirect.format($match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                    }, {
                        prefix: isString(what.prefix) ? what.prefix : ""
                    });
                },
                regex: function(what, handler) {
                    if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");
                    if (handlerIsString) {
                        redirect = handler;
                        handler = [ "$match", function($match) {
                            return interpolate(redirect, $match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path()));
                    }, {
                        prefix: regExpPrefix(what)
                    });
                }
            }, check = {
                matcher: $urlMatcherFactory.isMatcher(what),
                regex: what instanceof RegExp
            };
            for (var n in check) if (check[n]) return this.rule(strategies[n](what, handler));
            throw new Error("invalid 'what' in when()");
        };
        this.deferIntercept = function(defer) {
            defer === undefined && (defer = !0);
            interceptDeferred = defer;
        };
        this.$get = $get;
        $get.$inject = [ "$location", "$rootScope", "$injector", "$browser", "$sniffer" ];
    }
    function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
        function isRelative(stateName) {
            return 0 === stateName.indexOf(".") || 0 === stateName.indexOf("^");
        }
        function findState(stateOrName, base) {
            if (!stateOrName) return undefined;
            var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name;
            if (isRelative(name)) {
                if (!base) throw new Error("No reference point given for path '" + name + "'");
                base = findState(base);
                for (var rel = name.split("."), i = 0, pathLength = rel.length, current = base; i < pathLength; i++) if ("" !== rel[i] || 0 !== i) {
                    if ("^" !== rel[i]) break;
                    if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
                    current = current.parent;
                } else current = base;
                rel = rel.slice(i).join(".");
                name = current.name + (current.name && rel ? "." : "") + rel;
            }
            var state = states[name];
            return !state || !isStr && (isStr || state !== stateOrName && state.self !== stateOrName) ? undefined : state;
        }
        function queueState(parentName, state) {
            queue[parentName] || (queue[parentName] = []);
            queue[parentName].push(state);
        }
        function flushQueuedChildren(parentName) {
            for (var queued = queue[parentName] || []; queued.length; ) registerState(queued.shift());
        }
        function registerState(state) {
            state = inherit(state, {
                self: state,
                resolve: state.resolve || {},
                toString: function() {
                    return this.name;
                }
            });
            var name = state.name;
            if (!isString(name) || name.indexOf("@") >= 0) throw new Error("State must have a valid name");
            if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");
            var parentName = -1 !== name.indexOf(".") ? name.substring(0, name.lastIndexOf(".")) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : "";
            if (parentName && !states[parentName]) return queueState(parentName, state.self);
            for (var key in stateBuilder) isFunction(stateBuilder[key]) && (state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]));
            states[name] = state;
            !state[abstractKey] && state.url && $urlRouterProvider.when(state.url, [ "$match", "$stateParams", function($match, $stateParams) {
                $state.$current.navigable == state && equalForKeys($match, $stateParams) || $state.transitionTo(state, $match, {
                    inherit: !0,
                    location: !1
                });
            } ]);
            flushQueuedChildren(name);
            return state;
        }
        function isGlob(text) {
            return text.indexOf("*") > -1;
        }
        function doesStateMatchGlob(glob) {
            for (var globSegments = glob.split("."), segments = $state.$current.name.split("."), i = 0, l = globSegments.length; i < l; i++) "*" === globSegments[i] && (segments[i] = "*");
            if ("**" === globSegments[0]) {
                segments = segments.slice(indexOf(segments, globSegments[1]));
                segments.unshift("**");
            }
            if ("**" === globSegments[globSegments.length - 1]) {
                segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                segments.push("**");
            }
            return globSegments.length == segments.length && segments.join("") === globSegments.join("");
        }
        function decorator(name, func) {
            if (isString(name) && !isDefined(func)) return stateBuilder[name];
            if (!isFunction(func) || !isString(name)) return this;
            stateBuilder[name] && !stateBuilder.$delegates[name] && (stateBuilder.$delegates[name] = stateBuilder[name]);
            stateBuilder[name] = func;
            return this;
        }
        function state(name, definition) {
            isObject(name) ? definition = name : definition.name = name;
            registerState(definition);
            return this;
        }
        function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
            function handleRedirect(redirect, state, params, options) {
                var evt = $rootScope.$broadcast("$stateNotFound", redirect, state, params);
                if (evt.defaultPrevented) {
                    $urlRouter.update();
                    return TransitionAborted;
                }
                if (!evt.retry) return null;
                if (options.$retry) {
                    $urlRouter.update();
                    return TransitionFailed;
                }
                var retryTransition = $state.transition = $q.when(evt.retry);
                retryTransition.then(function() {
                    if (retryTransition !== $state.transition) return TransitionSuperseded;
                    redirect.options.$retry = !0;
                    return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                }, function() {
                    return TransitionAborted;
                });
                $urlRouter.update();
                return retryTransition;
            }
            function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                function resolveViews() {
                    var viewsPromises = [];
                    forEach(state.views, function(view, name) {
                        var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
                        injectables.$template = [ function() {
                            return $view.load(name, {
                                view: view,
                                locals: dst.globals,
                                params: $stateParams,
                                notify: options.notify
                            }) || "";
                        } ];
                        viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function(result) {
                            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                var injectLocals = angular.extend({}, injectables, dst.globals);
                                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                            } else result.$$controller = view.controller;
                            result.$$state = state;
                            result.$$controllerAs = view.controllerAs;
                            dst[name] = result;
                        }));
                    });
                    return $q.all(viewsPromises).then(function() {
                        return dst.globals;
                    });
                }
                var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params), locals = {
                    $stateParams: $stateParams
                };
                dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                var promises = [ dst.resolve.then(function(globals) {
                    dst.globals = globals;
                }) ];
                inherited && promises.push(inherited);
                return $q.all(promises).then(resolveViews).then(function(values) {
                    return dst;
                });
            }
            var TransitionSuperseded = $q.reject(new Error("transition superseded")), TransitionPrevented = $q.reject(new Error("transition prevented")), TransitionAborted = $q.reject(new Error("transition aborted")), TransitionFailed = $q.reject(new Error("transition failed"));
            root.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            };
            $state = {
                params: {},
                current: root.self,
                $current: root,
                transition: null
            };
            $state.reload = function(state) {
                return $state.transitionTo($state.current, $stateParams, {
                    reload: state || !0,
                    inherit: !1,
                    notify: !0
                });
            };
            $state.go = function(to, params, options) {
                return $state.transitionTo(to, params, extend({
                    inherit: !0,
                    relative: $state.$current
                }, options));
            };
            $state.transitionTo = function(to, toParams, options) {
                toParams = toParams || {};
                options = extend({
                    location: !0,
                    inherit: !1,
                    relative: null,
                    notify: !0,
                    reload: !1,
                    $retry: !1
                }, options || {});
                var evt, from = $state.$current, fromParams = $state.params, fromPath = from.path, toState = findState(to, options.relative), hash = toParams["#"];
                if (!isDefined(toState)) {
                    var redirect = {
                        to: to,
                        toParams: toParams,
                        options: options
                    }, redirectResult = handleRedirect(redirect, from.self, fromParams, options);
                    if (redirectResult) return redirectResult;
                    to = redirect.to;
                    toParams = redirect.toParams;
                    options = redirect.options;
                    toState = findState(to, options.relative);
                    if (!isDefined(toState)) {
                        if (!options.relative) throw new Error("No such state '" + to + "'");
                        throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
                    }
                }
                if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
                options.inherit && (toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState));
                if (!toState.params.$$validates(toParams)) return TransitionFailed;
                toParams = toState.params.$$values(toParams);
                to = toState;
                var toPath = to.path, keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
                if (options.reload) {
                    if (isString(options.reload) || isObject(options.reload)) {
                        if (isObject(options.reload) && !options.reload.name) throw new Error("Invalid reload state object");
                        var reloadState = !0 === options.reload ? fromPath[0] : findState(options.reload);
                        if (options.reload && !reloadState) throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
                        for (;state && state === fromPath[keep] && state !== reloadState; ) {
                            locals = toLocals[keep] = state.locals;
                            keep++;
                            state = toPath[keep];
                        }
                    }
                } else for (;state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams); ) {
                    locals = toLocals[keep] = state.locals;
                    keep++;
                    state = toPath[keep];
                }
                if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
                    hash && (toParams["#"] = hash);
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
                    if (options.location && to.navigable && to.navigable.url) {
                        $urlRouter.push(to.navigable.url, toParams, {
                            $$avoidResync: !0,
                            replace: "replace" === options.location
                        });
                        $urlRouter.update(!0);
                    }
                    $state.transition = null;
                    return $q.when($state.current);
                }
                toParams = filterByKeys(to.params.$$keys(), toParams || {});
                hash && (toParams["#"] = hash);
                if (options.notify && $rootScope.$broadcast("$stateChangeStart", to.self, toParams, from.self, fromParams, options).defaultPrevented) {
                    $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                    null == $state.transition && $urlRouter.update();
                    return TransitionPrevented;
                }
                for (var resolved = $q.when(locals), l = keep; l < toPath.length; l++, state = toPath[l]) {
                    locals = toLocals[l] = inherit(locals);
                    resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                }
                var transition = $state.transition = resolved.then(function() {
                    var l, entering, exiting;
                    if ($state.transition !== transition) return TransitionSuperseded;
                    for (l = fromPath.length - 1; l >= keep; l--) {
                        exiting = fromPath[l];
                        exiting.self.onExit && $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                        exiting.locals = null;
                    }
                    for (l = keep; l < toPath.length; l++) {
                        entering = toPath[l];
                        entering.locals = toLocals[l];
                        entering.self.onEnter && $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                    }
                    if ($state.transition !== transition) return TransitionSuperseded;
                    $state.$current = to;
                    $state.current = to.self;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    $state.transition = null;
                    options.location && to.navigable && $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                        $$avoidResync: !0,
                        replace: "replace" === options.location
                    });
                    options.notify && $rootScope.$broadcast("$stateChangeSuccess", to.self, toParams, from.self, fromParams);
                    $urlRouter.update(!0);
                    return $state.current;
                }, function(error) {
                    if ($state.transition !== transition) return TransitionSuperseded;
                    $state.transition = null;
                    evt = $rootScope.$broadcast("$stateChangeError", to.self, toParams, from.self, fromParams, error);
                    evt.defaultPrevented || $urlRouter.update();
                    return $q.reject(error);
                });
                return transition;
            };
            $state.is = function(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                return isDefined(state) ? $state.$current === state && (!params || equalForKeys(state.params.$$values(params), $stateParams)) : undefined;
            };
            $state.includes = function(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                if (isString(stateOrName) && isGlob(stateOrName)) {
                    if (!doesStateMatchGlob(stateOrName)) return !1;
                    stateOrName = $state.$current.name;
                }
                var state = findState(stateOrName, options.relative);
                return isDefined(state) ? !!isDefined($state.$current.includes[state.name]) && (!params || equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params))) : undefined;
            };
            $state.href = function(stateOrName, params, options) {
                options = extend({
                    lossy: !0,
                    inherit: !0,
                    absolute: !1,
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) return null;
                options.inherit && (params = inheritParams($stateParams, params || {}, $state.$current, state));
                var nav = state && options.lossy ? state.navigable : state;
                return nav && nav.url !== undefined && null !== nav.url ? $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat("#"), params || {}), {
                    absolute: options.absolute
                }) : null;
            };
            $state.get = function(stateOrName, context) {
                if (0 === arguments.length) return map(objectKeys(states), function(name) {
                    return states[name].self;
                });
                var state = findState(stateOrName, context || $state.$current);
                return state && state.self ? state.self : null;
            };
            return $state;
        }
        function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
            if (!options.reload && to === from && (locals === from.locals || !1 === to.self.reloadOnSearch && function(fromAndToState, fromParams, toParams) {
                function notSearchParam(key) {
                    return "search" != fromAndToState.params[key].location;
                }
                var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam), nonQueryParams = pick.apply({}, [ fromAndToState.params ].concat(nonQueryParamKeys));
                return new $$UMFP.ParamSet(nonQueryParams).$$equals(fromParams, toParams);
            }(from, fromParams, toParams))) return !0;
        }
        var root, $state, states = {}, queue = {}, abstractKey = "abstract", stateBuilder = {
            parent: function(state) {
                if (isDefined(state.parent) && state.parent) return findState(state.parent);
                var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                return compositeName ? findState(compositeName[1]) : root;
            },
            data: function(state) {
                state.parent && state.parent.data && (state.data = state.self.data = inherit(state.parent.data, state.data));
                return state.data;
            },
            url: function(state) {
                var url = state.url, config = {
                    params: state.params || {}
                };
                if (isString(url)) return "^" == url.charAt(0) ? $urlMatcherFactory.compile(url.substring(1), config) : (state.parent.navigable || root).url.concat(url, config);
                if (!url || $urlMatcherFactory.isMatcher(url)) return url;
                throw new Error("Invalid url '" + url + "' in state '" + state + "'");
            },
            navigable: function(state) {
                return state.url ? state : state.parent ? state.parent.navigable : null;
            },
            ownParams: function(state) {
                var params = state.url && state.url.params || new $$UMFP.ParamSet();
                forEach(state.params || {}, function(config, id) {
                    params[id] || (params[id] = new $$UMFP.Param(id, null, config, "config"));
                });
                return params;
            },
            params: function(state) {
                var ownParams = pick(state.ownParams, state.ownParams.$$keys());
                return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
            },
            views: function(state) {
                var views = {};
                forEach(isDefined(state.views) ? state.views : {
                    "": state
                }, function(view, name) {
                    name.indexOf("@") < 0 && (name += "@" + state.parent.name);
                    views[name] = view;
                });
                return views;
            },
            path: function(state) {
                return state.parent ? state.parent.path.concat(state) : [];
            },
            includes: function(state) {
                var includes = state.parent ? extend({}, state.parent.includes) : {};
                includes[state.name] = !0;
                return includes;
            },
            $delegates: {}
        };
        root = registerState({
            name: "",
            url: "^",
            views: null,
            abstract: !0
        });
        root.navigable = null;
        this.decorator = decorator;
        this.state = state;
        this.$get = $get;
        $get.$inject = [ "$rootScope", "$q", "$view", "$injector", "$resolve", "$stateParams", "$urlRouter", "$location", "$urlMatcherFactory" ];
    }
    function $ViewProvider() {
        function $get($rootScope, $templateFactory) {
            return {
                load: function(name, options) {
                    var result;
                    options = extend({
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: !0,
                        async: !0,
                        params: {}
                    }, options);
                    options.view && (result = $templateFactory.fromConfig(options.view, options.params, options.locals));
                    return result;
                }
            };
        }
        this.$get = $get;
        $get.$inject = [ "$rootScope", "$templateFactory" ];
    }
    function $ViewScrollProvider() {
        var useAnchorScroll = !1;
        this.useAnchorScroll = function() {
            useAnchorScroll = !0;
        };
        this.$get = [ "$anchorScroll", "$timeout", function($anchorScroll, $timeout) {
            return useAnchorScroll ? $anchorScroll : function($element) {
                return $timeout(function() {
                    $element[0].scrollIntoView();
                }, 0, !1);
            };
        } ];
    }
    function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
        function getRenderer(attrs, scope) {
            function animEnabled(element) {
                return 1 === ngMajorVer && ngMinorVer >= 4 ? !!$animate.enabled(element) : 1 === ngMajorVer && ngMinorVer >= 2 ? !!$animate.enabled() : !!$animator;
            }
            var statics = {
                enter: function(element, target, cb) {
                    target.after(element);
                    cb();
                },
                leave: function(element, cb) {
                    element.remove();
                    cb();
                }
            };
            if (attrs.noanimation) return statics;
            if ($animate) return {
                enter: function(element, target, cb) {
                    animEnabled(element) ? angular.version.minor > 2 ? $animate.enter(element, null, target).then(cb) : $animate.enter(element, null, target, cb) : statics.enter(element, target, cb);
                },
                leave: function(element, cb) {
                    animEnabled(element) ? angular.version.minor > 2 ? $animate.leave(element).then(cb) : $animate.leave(element, cb) : statics.leave(element, cb);
                }
            };
            if ($animator) {
                var animate = $animator && $animator(scope, attrs);
                return {
                    enter: function(element, target, cb) {
                        animate.enter(element, null, target);
                        cb();
                    },
                    leave: function(element, cb) {
                        animate.leave(element);
                        cb();
                    }
                };
            }
            return statics;
        }
        var service = function() {
            return $injector.has ? function(service) {
                return $injector.has(service) ? $injector.get(service) : null;
            } : function(service) {
                try {
                    return $injector.get(service);
                } catch (e) {
                    return null;
                }
            };
        }(), $animator = service("$animator"), $animate = service("$animate");
        return {
            restrict: "ECA",
            terminal: !0,
            priority: 400,
            transclude: "element",
            compile: function(tElement, tAttrs, $transclude) {
                return function(scope, $element, attrs) {
                    function cleanupLastView() {
                        function cleanOld() {
                            _previousEl && _previousEl.remove();
                            _currentScope && _currentScope.$destroy();
                        }
                        var _previousEl = previousEl, _currentScope = currentScope;
                        _currentScope && (_currentScope._willBeDestroyed = !0);
                        if (currentEl) {
                            renderer.leave(currentEl, function() {
                                cleanOld();
                                previousEl = null;
                            });
                            previousEl = currentEl;
                        } else {
                            cleanOld();
                            previousEl = null;
                        }
                        currentEl = null;
                        currentScope = null;
                    }
                    function updateView(firstTime) {
                        var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
                        if ((firstTime || previousLocals !== latestLocals) && !scope._willBeDestroyed) {
                            newScope = scope.$new();
                            latestLocals = $state.$current.locals[name];
                            newScope.$emit("$viewContentLoading", name);
                            var clone = $transclude(newScope, function(clone) {
                                renderer.enter(clone, $element, function() {
                                    currentScope && currentScope.$emit("$viewContentAnimationEnded");
                                    (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) && $uiViewScroll(clone);
                                });
                                cleanupLastView();
                            });
                            currentEl = clone;
                            currentScope = newScope;
                            currentScope.$emit("$viewContentLoaded", name);
                            currentScope.$eval(onloadExp);
                        }
                    }
                    var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || "", autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
                    scope.$on("$stateChangeSuccess", function() {
                        updateView(!1);
                    });
                    updateView(!0);
                };
            }
        };
    }
    function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
        return {
            restrict: "ECA",
            priority: -400,
            compile: function(tElement) {
                var initial = tElement.html();
                return function(scope, $element, attrs) {
                    var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
                    if (locals) {
                        $element.data("$uiView", {
                            name: name,
                            state: locals.$$state
                        });
                        $element.html(locals.$template ? locals.$template : initial);
                        var link = $compile($element.contents());
                        if (locals.$$controller) {
                            locals.$scope = scope;
                            locals.$element = $element;
                            var controller = $controller(locals.$$controller, locals);
                            locals.$$controllerAs && (scope[locals.$$controllerAs] = controller);
                            $element.data("$ngControllerController", controller);
                            $element.children().data("$ngControllerController", controller);
                        }
                        link(scope);
                    }
                };
            }
        };
    }
    function getUiViewName(scope, attrs, element, $interpolate) {
        var name = $interpolate(attrs.uiView || attrs.name || "")(scope), inherited = element.inheritedData("$uiView");
        return name.indexOf("@") >= 0 ? name : name + "@" + (inherited ? inherited.state.name : "");
    }
    function parseStateRef(ref, current) {
        var parsed, preparsed = ref.match(/^\s*({[^}]*})\s*$/);
        preparsed && (ref = current + "(" + preparsed[1] + ")");
        parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
        if (!parsed || 4 !== parsed.length) throw new Error("Invalid state ref '" + ref + "'");
        return {
            state: parsed[1],
            paramExpr: parsed[3] || null
        };
    }
    function stateContext(el) {
        var stateData = el.parent().inheritedData("$uiView");
        if (stateData && stateData.state && stateData.state.name) return stateData.state;
    }
    function getTypeInfo(el) {
        var isSvg = "[object SVGAnimatedString]" === Object.prototype.toString.call(el.prop("href")), isForm = "FORM" === el[0].nodeName;
        return {
            attr: isForm ? "action" : isSvg ? "xlink:href" : "href",
            isAnchor: "A" === el.prop("tagName").toUpperCase(),
            clickable: !isForm
        };
    }
    function clickHook(el, $state, $timeout, type, current) {
        return function(e) {
            var button = e.which || e.button, target = current();
            if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr("target"))) {
                var transition = $timeout(function() {
                    $state.go(target.state, target.params, target.options);
                });
                e.preventDefault();
                var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
                e.preventDefault = function() {
                    ignorePreventDefaultCount-- <= 0 && $timeout.cancel(transition);
                };
            }
        };
    }
    function defaultOpts(el, $state) {
        return {
            relative: stateContext(el) || $state.$current,
            inherit: !0
        };
    }
    function $StateRefDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var ref = parseStateRef(attrs.uiSref, $state.current.name), def = {
                    state: ref.state,
                    href: null,
                    params: null
                }, type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0];
                def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
                var update = function(val) {
                    val && (def.params = angular.copy(val));
                    def.href = $state.href(ref.state, def.params, def.options);
                    active && active.$$addStateInfo(ref.state, def.params);
                    null !== def.href && attrs.$set(type.attr, def.href);
                };
                if (ref.paramExpr) {
                    scope.$watch(ref.paramExpr, function(val) {
                        val !== def.params && update(val);
                    }, !0);
                    def.params = angular.copy(scope.$eval(ref.paramExpr));
                }
                update();
                type.clickable && element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    function $StateRefDynamicDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                function runStateRefLink(group) {
                    def.state = group[0];
                    def.params = group[1];
                    def.options = group[2];
                    def.href = $state.href(def.state, def.params, def.options);
                    active && active.$$addStateInfo(def.state, def.params);
                    def.href && attrs.$set(type.attr, def.href);
                }
                var type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0], group = [ attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null ], watch = "[" + group.map(function(val) {
                    return val || "null";
                }).join(", ") + "]", def = {
                    state: null,
                    params: null,
                    options: null,
                    href: null
                };
                scope.$watch(watch, runStateRefLink, !0);
                runStateRefLink(scope.$eval(watch));
                type.clickable && element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    function $StateRefActiveDirective($state, $stateParams, $interpolate) {
        return {
            restrict: "A",
            controller: [ "$scope", "$element", "$attrs", "$timeout", function($scope, $element, $attrs, $timeout) {
                function addState(stateName, stateParams, activeClass) {
                    var state = $state.get(stateName, stateContext($element)), stateHash = createStateHash(stateName, stateParams);
                    states.push({
                        state: state || {
                            name: stateName
                        },
                        params: stateParams,
                        hash: stateHash
                    });
                    activeClasses[stateHash] = activeClass;
                }
                function createStateHash(state, params) {
                    if (!isString(state)) throw new Error("state should be a string");
                    if (isObject(params)) return state + toJson(params);
                    params = $scope.$eval(params);
                    return isObject(params) ? state + toJson(params) : state;
                }
                function update() {
                    for (var i = 0; i < states.length; i++) {
                        anyMatch(states[i].state, states[i].params) ? addClass($element, activeClasses[states[i].hash]) : removeClass($element, activeClasses[states[i].hash]);
                        exactMatch(states[i].state, states[i].params) ? addClass($element, activeEqClass) : removeClass($element, activeEqClass);
                    }
                }
                function addClass(el, className) {
                    $timeout(function() {
                        el.addClass(className);
                    });
                }
                function removeClass(el, className) {
                    el.removeClass(className);
                }
                function anyMatch(state, params) {
                    return $state.includes(state.name, params);
                }
                function exactMatch(state, params) {
                    return $state.is(state.name, params);
                }
                var activeEqClass, uiSrefActive, states = [], activeClasses = {};
                activeEqClass = $interpolate($attrs.uiSrefActiveEq || "", !1)($scope);
                try {
                    uiSrefActive = $scope.$eval($attrs.uiSrefActive);
                } catch (e) {}
                uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || "", !1)($scope);
                isObject(uiSrefActive) && forEach(uiSrefActive, function(stateOrName, activeClass) {
                    if (isString(stateOrName)) {
                        var ref = parseStateRef(stateOrName, $state.current.name);
                        addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
                    }
                });
                this.$$addStateInfo = function(newState, newParams) {
                    if (!(isObject(uiSrefActive) && states.length > 0)) {
                        addState(newState, newParams, uiSrefActive);
                        update();
                    }
                };
                $scope.$on("$stateChangeSuccess", update);
                update();
            } ]
        };
    }
    function $IsStateFilter($state) {
        var isFilter = function(state, params) {
            return $state.is(state, params);
        };
        isFilter.$stateful = !0;
        return isFilter;
    }
    function $IncludedByStateFilter($state) {
        var includesFilter = function(state, params, options) {
            return $state.includes(state, params, options);
        };
        includesFilter.$stateful = !0;
        return includesFilter;
    }
    var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, toJson = angular.toJson;
    angular.module("ui.router.util", [ "ng" ]);
    angular.module("ui.router.router", [ "ui.router.util" ]);
    angular.module("ui.router.state", [ "ui.router.router", "ui.router.util" ]);
    angular.module("ui.router", [ "ui.router.state" ]);
    angular.module("ui.router.compat", [ "ui.router" ]);
    $Resolve.$inject = [ "$q", "$injector" ];
    angular.module("ui.router.util").service("$resolve", $Resolve);
    $TemplateFactory.$inject = [ "$http", "$templateCache", "$injector" ];
    angular.module("ui.router.util").service("$templateFactory", $TemplateFactory);
    var $$UMFP;
    UrlMatcher.prototype.concat = function(pattern, config) {
        var defaultConfig = {
            caseInsensitive: $$UMFP.caseInsensitive(),
            strict: $$UMFP.strictMode(),
            squash: $$UMFP.defaultSquashPolicy()
        };
        return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
    };
    UrlMatcher.prototype.toString = function() {
        return this.source;
    };
    UrlMatcher.prototype.exec = function(path, searchParams) {
        var m = this.regexp.exec(path);
        if (!m) return null;
        searchParams = searchParams || {};
        var i, j, paramName, paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {};
        if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
        var param, paramVal;
        for (i = 0; i < nPath; i++) {
            paramName = paramNames[i];
            param = this.params[paramName];
            paramVal = m[i + 1];
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            paramVal && !0 === param.array && (paramVal = function(string) {
                function reverseString(str) {
                    return str.split("").reverse().join("");
                }
                function unquoteDashes(str) {
                    return str.replace(/\\-/g, "-");
                }
                return map(map(reverseString(string).split(/-(?!\\)/), reverseString), unquoteDashes).reverse();
            }(paramVal));
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        for (;i < nTotal; i++) {
            paramName = paramNames[i];
            values[paramName] = this.params[paramName].value(searchParams[paramName]);
            param = this.params[paramName];
            paramVal = searchParams[paramName];
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        return values;
    };
    UrlMatcher.prototype.parameters = function(param) {
        return isDefined(param) ? this.params[param] || null : this.$$paramNames;
    };
    UrlMatcher.prototype.validates = function(params) {
        return this.params.$$validates(params);
    };
    UrlMatcher.prototype.format = function(values) {
        function encodeDashes(str) {
            return encodeURIComponent(str).replace(/-/g, function(c) {
                return "%5C%" + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        values = values || {};
        var segments = this.segments, params = this.parameters(), paramset = this.params;
        if (!this.validates(values)) return null;
        var i, search = !1, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
        for (i = 0; i < nTotal; i++) {
            var isPathParam = i < nPath, name = params[i], param = paramset[name], value = param.value(values[name]), isDefaultValue = param.isOptional && param.type.equals(param.value(), value), squash = !!isDefaultValue && param.squash, encoded = param.type.encode(value);
            if (isPathParam) {
                var nextSegment = segments[i + 1], isFinalPathParam = i + 1 === nPath;
                if (!1 === squash) {
                    null != encoded && (isArray(encoded) ? result += map(encoded, encodeDashes).join("-") : result += encodeURIComponent(encoded));
                    result += nextSegment;
                } else if (!0 === squash) {
                    var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    result += nextSegment.match(capture)[1];
                } else isString(squash) && (result += squash + nextSegment);
                isFinalPathParam && !0 === param.squash && "/" === result.slice(-1) && (result = result.slice(0, -1));
            } else {
                if (null == encoded || isDefaultValue && !1 !== squash) continue;
                isArray(encoded) || (encoded = [ encoded ]);
                if (0 === encoded.length) continue;
                encoded = map(encoded, encodeURIComponent).join("&" + name + "=");
                result += (search ? "&" : "?") + name + "=" + encoded;
                search = !0;
            }
        }
        return result;
    };
    Type.prototype.is = function(val, key) {
        return !0;
    };
    Type.prototype.encode = function(val, key) {
        return val;
    };
    Type.prototype.decode = function(val, key) {
        return val;
    };
    Type.prototype.equals = function(a, b) {
        return a == b;
    };
    Type.prototype.$subPattern = function() {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };
    Type.prototype.pattern = /.*/;
    Type.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    };
    Type.prototype.$normalize = function(val) {
        return this.is(val) ? val : this.decode(val);
    };
    Type.prototype.$asArray = function(mode, isSearch) {
        function ArrayType(type, mode) {
            function bindTo(type, callbackName) {
                return function() {
                    return type[callbackName].apply(type, arguments);
                };
            }
            function arrayWrap(val) {
                return isArray(val) ? val : isDefined(val) ? [ val ] : [];
            }
            function arrayUnwrap(val) {
                switch (val.length) {
                  case 0:
                    return undefined;

                  case 1:
                    return "auto" === mode ? val[0] : val;

                  default:
                    return val;
                }
            }
            function falsey(val) {
                return !val;
            }
            function arrayHandler(callback, allTruthyMode) {
                return function(val) {
                    if (isArray(val) && 0 === val.length) return val;
                    val = arrayWrap(val);
                    var result = map(val, callback);
                    return !0 === allTruthyMode ? 0 === filter(result, falsey).length : arrayUnwrap(result);
                };
            }
            this.encode = arrayHandler(bindTo(type, "encode"));
            this.decode = arrayHandler(bindTo(type, "decode"));
            this.is = arrayHandler(bindTo(type, "is"), !0);
            this.equals = function(callback) {
                return function(val1, val2) {
                    var left = arrayWrap(val1), right = arrayWrap(val2);
                    if (left.length !== right.length) return !1;
                    for (var i = 0; i < left.length; i++) if (!callback(left[i], right[i])) return !1;
                    return !0;
                };
            }(bindTo(type, "equals"));
            this.pattern = type.pattern;
            this.$normalize = arrayHandler(bindTo(type, "$normalize"));
            this.name = type.name;
            this.$arrayMode = mode;
        }
        if (!mode) return this;
        if ("auto" === mode && !isSearch) throw new Error("'auto' array mode is for query parameters only");
        return new ArrayType(this, mode);
    };
    angular.module("ui.router.util").provider("$urlMatcherFactory", $UrlMatcherFactory);
    angular.module("ui.router.util").run([ "$urlMatcherFactory", function($urlMatcherFactory) {} ]);
    $UrlRouterProvider.$inject = [ "$locationProvider", "$urlMatcherFactoryProvider" ];
    angular.module("ui.router.router").provider("$urlRouter", $UrlRouterProvider);
    $StateProvider.$inject = [ "$urlRouterProvider", "$urlMatcherFactoryProvider" ];
    angular.module("ui.router.state").factory("$stateParams", function() {
        return {};
    }).provider("$state", $StateProvider);
    $ViewProvider.$inject = [];
    angular.module("ui.router.state").provider("$view", $ViewProvider);
    angular.module("ui.router.state").provider("$uiViewScroll", $ViewScrollProvider);
    var ngMajorVer = angular.version.major, ngMinorVer = angular.version.minor;
    $ViewDirective.$inject = [ "$state", "$injector", "$uiViewScroll", "$interpolate" ];
    $ViewDirectiveFill.$inject = [ "$compile", "$controller", "$state", "$interpolate" ];
    angular.module("ui.router.state").directive("uiView", $ViewDirective);
    angular.module("ui.router.state").directive("uiView", $ViewDirectiveFill);
    $StateRefDirective.$inject = [ "$state", "$timeout" ];
    $StateRefDynamicDirective.$inject = [ "$state", "$timeout" ];
    $StateRefActiveDirective.$inject = [ "$state", "$stateParams", "$interpolate" ];
    angular.module("ui.router.state").directive("uiSref", $StateRefDirective).directive("uiSrefActive", $StateRefActiveDirective).directive("uiSrefActiveEq", $StateRefActiveDirective).directive("uiState", $StateRefDynamicDirective);
    $IsStateFilter.$inject = [ "$state" ];
    $IncludedByStateFilter.$inject = [ "$state" ];
    angular.module("ui.router.state").filter("isState", $IsStateFilter).filter("includedByState", $IncludedByStateFilter);
}(window, window.angular);

!function() {
    "use strict";
    angular.module("app", [ "app.common", "app.public" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app", {
            abstract: !0,
            url: "",
            views: null
        });
    }
    angular.module("app").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    function internal($locationProvider, $urlRouterProvider) {
        $locationProvider.html5Mode(!0);
        $urlRouterProvider.rule(function($injector, $location) {
            var path = $location.path();
            if ("/" !== path[path.length - 1]) return path + "/";
        });
    }
    angular.module("app").config(internal);
    internal.$inject = [ "$locationProvider", "$urlRouterProvider" ];
}();

!function() {
    "use strict";
    function internal($state, runFactory) {
        runFactory.init();
        $state.go("app.public.index");
    }
    angular.module("app").run(internal);
    internal.$inject = [ "$state", "runFactory" ];
}();

!function() {
    "use strict";
    angular.module("app").factory("runFactory", [ "$rootScope", "$state", "$stateParams", function($rootScope, $state, $stateParams) {
        var factory = {};
        factory.init = function() {
            $rootScope.$state = $state;
            $rootScope.$stateParams = $stateParams;
        };
        return factory;
    } ]);
}();

!function() {
    "use strict";
    angular.module("app.common", [ "ngAnimate", "ngAria", "ngMaterial", "ngMessages", "ngResource", "ui.router", "ui-rangeSlider" ]);
}();

!function() {
    "use strict";
    function escKey($document) {
        return function(scope, element, attrs) {
            $document.bind("keydown keypress", function(event) {
                if (27 === event.which) {
                    scope.$apply(function() {
                        scope.$eval(attrs.esckey);
                    });
                    event.preventdefault();
                }
            });
        };
    }
    angular.module("app.common").directive("escKey", escKey);
    escKey.$inject = [ "$document" ];
}();

!function() {
    "use strict";
    angular.module("app.public", [ "app.public.about", "app.public.answer", "app.public.borrowing", "app.public.contact", "app.public.designer", "app.public.engagement", "app.public.error", "app.public.exchange", "app.public.index", "app.public.product", "app.public.panel", "app.public.privacy", "app.public.questions", "app.public.repair", "app.public.service", "app.public.studio", "app.public.terms", "app.public.wedding" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public", {
            abstract: !0,
            url: "/",
            views: {
                "panel@": {
                    templateUrl: "public/html/public/panel/public.panel.html",
                    controller: "PanelController",
                    controllerAs: "vm"
                },
                "header@": {
                    templateUrl: "public/html/public/header/public.header.html",
                    controller: "HeaderController",
                    controllerAs: "vm"
                },
                "footer@": {
                    templateUrl: "public/html/public/footer/public.footer.html",
                    controller: "FooterController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public").controller("FooterController", function() {
        this.name = "";
    });
}();

!function() {
    "use strict";
    angular.module("app.public").controller("HeaderController", [ "$rootScope", function($rootScope) {
        var vm = this;
        vm.name = "";
        vm.open = function() {
            $rootScope.$emit("open", {});
        };
    } ]);
}();

!function() {
    "use strict";
    angular.module("app.public.panel", []);
}();

!function() {
    "use strict";
    angular.module("app.public.panel").controller("PanelController", [ "$mdSidenav", "$rootScope", "$state", function($mdSidenav, $rootScope, $state) {
        function clear() {
            for (var key in vm.state) vm.state[key] = !1;
        }
        var vm = this;
        vm.state = {
            contact: !1,
            custom: !1,
            designer: !1,
            engagement: !1,
            index: !1,
            product: !1,
            repair: !1,
            service: !1,
            studio: !1,
            wedding: !1
        };
        vm.activate = function(state) {
            clear();
            vm.state[state] = !0;
        };
        vm.close = function() {
            vm.backdrop = !1;
            $mdSidenav("panel").close().then(function() {});
        };
        $rootScope.$on("open", function() {
            vm.backdrop = !0;
            var state = $state.current.name.split(".");
            vm.activate(state[2]);
            $mdSidenav("panel").open().then(function() {});
        });
    } ]);
}();

!function() {
    "use strict";
    angular.module("app.public.index", []);
}();

!function() {
    "use strict";
    function Internal() {
        var vm = this;
        vm.backdrop = !1;
        vm.close = function() {
            vm.backdrop = !1;
        };
    }
    angular.module("app.public.index").controller("IndexController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.index", {
            url: "",
            views: {
                "modal@": {
                    templateUrl: "public/html/public/modal/public.modal.html",
                    controller: "IndexController",
                    controllerAs: "vm"
                },
                "page@": {
                    templateUrl: "public/html/public/index/public.index.html",
                    controller: "IndexController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.index").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.designer", [ "app.public.designer.list", "app.public.designer.view" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.designer", {
            abstract: !0,
            url: "designers/",
            views: null
        });
    }
    angular.module("app.public.designer").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.designer.list", []);
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/designer-list/:_id", {
            _id: "@_id"
        }, {
            get: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.public.designer.list").factory("designersList", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function Internal(designersResolve) {
        var vm = this;
        vm.designers = designersResolve;
        console.log("designers", vm.designers);
    }
    angular.module("app.public.designer.list").controller("DesignerListController", Internal);
    Internal.$inject = [ "designersResolve" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.designer.list", {
            url: "",
            views: {
                "page@": {
                    templateUrl: "public/html/public/designer/list/public.designer.list.html",
                    controller: "DesignerListController",
                    controllerAs: "vm"
                }
            },
            resolve: {
                designersResolve: [ "designersList", function(designersList) {
                    return designersList.get().$promise;
                } ]
            }
        });
    }
    angular.module("app.public.designer.list").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.designer.view", []);
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/designer-view/:_id", {
            _id: "@_id"
        }, {
            view: {
                method: "GET",
                isArray: !1
            }
        });
    }
    angular.module("app.public.designer.view").factory("designerView", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.designer.view").controller("DesignerViewController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.designer.view", {
            url: "view/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/designer/view/public.designer.view.html",
                    controller: "DesignerViewController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.designer.view").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about", [ "app.public.about.environment", "app.public.about.press", "app.public.about.story" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about", {
            abstract: !0,
            url: "about/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/about/public.about.html"
                }
            }
        });
    }
    angular.module("app.public.about").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about.environment", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.about.environment").controller("AboutEnvironmentController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about.environment", {
            url: "environment/",
            views: {
                "content@app.public.about": {
                    templateUrl: "public/html/public/about/environment/public.about.environment.html",
                    controller: "AboutEnvironmentController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.about.environment").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about.press", [ "app.public.about.press.list", "app.public.about.press.view" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about.press", {
            abstract: !0,
            url: "press/",
            views: null
        });
    }
    angular.module("app.public.about.press").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about.press.list", []);
}();

!function() {
    "use strict";
    function Internal(articlesResolve) {
        var vm = this;
        vm.articlesResolve = articlesResolve;
        console.log("articles:", vm.articlesResolve);
    }
    angular.module("app.public.about.press.list").controller("AboutPressListController", Internal);
    Internal.$inject = [ "articlesResolve" ];
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/article-list/:_id", {
            _id: "@_id"
        }, {
            get: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.public.about.press.list").factory("articlesList", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about.press.list", {
            url: "",
            views: {
                "content@app.public.about": {
                    templateUrl: "public/html/public/about/press/list/public.about.press.list.html",
                    controller: "AboutPressListController",
                    controllerAs: "vm"
                }
            },
            resolve: {
                articlesResolve: [ "articlesList", function(articlesList) {
                    return articlesList.get().$promise;
                } ]
            }
        });
    }
    angular.module("app.public.about.press.list").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about.press.view", []);
}();

!function() {
    "use strict";
    function Internal(articleResolve) {
        var vm = this;
        vm.article = articleResolve;
        console.log("article:", vm.article);
    }
    angular.module("app.public.about.press.view").controller("AboutPressViewController", Internal);
    Internal.$inject = [ "articleResolve" ];
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/article-view/:clean", {
            clean: "@clean"
        }, {
            get: {
                method: "GET",
                isArray: !1
            }
        });
    }
    angular.module("app.public.about.press.view").factory("articleView", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about.press.view", {
            url: ":clean/",
            resolve: {
                articleResolve: [ "$stateParams", "articleView", function($stateParams, articleView) {
                    return articleView.get({
                        clean: $stateParams.clean
                    }).$promise;
                } ]
            },
            views: {
                "content@app.public.about": {
                    templateUrl: "public/html/public/about/press/view/public.about.press.view.html",
                    controller: "AboutPressViewController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.about.press.view").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.about.story", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.about.story").controller("AboutStoryController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.about.story", {
            url: "our-story/",
            views: {
                "content@app.public.about": {
                    templateUrl: "public/html/public/about/story/public.about.story.html",
                    controller: "AboutStoryController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.about.story").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.answer", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.answer").controller("AnswerController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.answer", {
            url: "answers/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/answer/public.answer.html",
                    controller: "AnswerController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.answer").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.borrowing", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.borrowing").controller("BorrowingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.borrowing", {
            url: "jewellery-borrowing/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/borrowing/public.borrowing.html",
                    controller: "BorrowingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.borrowing").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.contact", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.contact").controller("ContactController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.contact", {
            url: "contact",
            views: {
                "page@": {
                    templateUrl: "public/html/public/contact/public.contact.html",
                    controller: "ContactController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.contact").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.engagement", [ "app.public.engagement.custom", "app.public.engagement.list" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.engagement", {
            url: "engagement/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/engagement/public.engagement.html"
                }
            }
        });
    }
    angular.module("app.public.engagement").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.engagement.custom", []);
}();

!function() {
    "use strict";
    function Internal() {
        this.products = [];
    }
    angular.module("app.public.engagement.custom").controller("EngagementCustomController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.engagement.custom", {
            url: "custom-order/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/engagement/custom/public.engagement.custom.html",
                    controller: "EngagementCustomController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.engagement.custom").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.engagement.list", []);
}();

!function() {
    "use strict";
    function Internal($scope) {
        var vm = this;
        vm.compact = !1;
        vm.toggle = function() {
            vm.compact = !vm.compact;
        };
        vm.sliderRanges = {
            price: {
                min: 0,
                max: 1e4
            }
        };
        vm.sliderSettings = {
            price: {
                min: 0,
                max: 1e4,
                step: 100
            }
        };
        vm.search = {
            category: [ {
                title: "Bracelet",
                types: [ "Bangles", "Cuff" ]
            }, {
                title: "Necklace",
                types: [ "Pendant", "Choker", "Lariat" ]
            }, {
                title: "Ring",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Earring",
                types: [ "Studs", "Drops", "Hoops" ]
            }, {
                title: "Broache",
                types: []
            }, {
                title: "Cufflink",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Hair Piece",
                types: []
            } ],
            material: [ "Sterling Silver", "Yellow Gold Plated", "Yellow Gold", "Rose Gold", "White Gold", "Fabric", "Rubber", "Brass", "Plexi", "Leather", "Wood", "Fiber", "Plastic", "Alternative", "Glass" ]
        };
    }
    angular.module("app.public.engagement.list").controller("EngagementListController", Internal);
    Internal.$inject = [ "$scope" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.engagement.list", {
            url: "rings/",
            views: {
                "content@app.public.engagement": {
                    templateUrl: "public/html/public/engagement/list/public.engagement.list.html",
                    controller: "EngagementListController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.engagement.list").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.error", []);
}();

!function() {
    "use strict";
    function Error($scope) {}
    angular.module("app.public.error").controller("Error", Error);
    Error.$inject = [ "$scope" ];
}();

!function() {
    "use strict";
    function routes($stateProvider) {
        $stateProvider.state("app.public.error", {
            url: "404/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/error/public.error.html",
                    controller: "Error"
                }
            }
        });
    }
    angular.module("app.public.error").config(routes);
    routes.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.exchange", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.exchange").controller("ExchangeController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.exchange", {
            url: "exchange-policy/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/exchange/public.exchange.html",
                    controller: "ExchangeController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.exchange").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.privacy", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.privacy").controller("PrivacyController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.privacy", {
            url: "privacy",
            views: {
                "page@": {
                    templateUrl: "public/html/public/privacy/public.privacy.html",
                    controller: "PrivacyController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.privacy").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product", [ "app.public.product.care", "app.public.product.certificate", "app.public.product.custom", "app.public.product.list" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product", {
            abstract: !0,
            url: "jewellery/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/product/public.product.html"
                }
            }
        });
    }
    angular.module("app.public.product").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product.certificate", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.product.certificate").controller("ProductCertificateController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product.certificate", {
            url: "gift-certificates/",
            views: {
                "content@app.public.product": {
                    templateUrl: "public/html/public/product/certificate/public.product.certificate.html",
                    controller: "ProductCertificateController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.product.certificate").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product.care", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.product.care").controller("ProductCareController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product.care", {
            url: "jewellery-care/",
            views: {
                "content@app.public.product": {
                    templateUrl: "public/html/public/product/care/public.product.care.html",
                    controller: "ProductCareController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.product.care").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product.custom", []);
}();

!function() {
    "use strict";
    function Internal() {
        this.products = [];
    }
    angular.module("app.public.product.custom").controller("ProductCustomController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product.custom", {
            url: "custom-order/",
            views: {
                "content@app.public.product": {
                    templateUrl: "public/html/public/product/custom/public.product.custom.html",
                    controller: "ProductCustomController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.product.custom").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product.list", [ "app.public.product.list.view" ]);
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/product-list/:_id", {
            _id: "@_id"
        }, {
            query: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.public.product.list").factory("productsList", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function Internal($scope, productsResolve) {
        var vm = this;
        vm.compact = !1;
        vm.products = productsResolve;
        vm.toggle = function() {
            vm.compact = !vm.compact;
        };
        vm.sliderRanges = {
            price: {
                min: 0,
                max: 1e4
            }
        };
        vm.sliderSettings = {
            price: {
                min: 0,
                max: 1e4,
                step: 100
            }
        };
        $scope.$watch(function() {
            vm.filteredproducts = vm.products.slice(0, vm.products.length);
        });
        vm.search = {
            category: [ {
                title: "Bracelet",
                types: [ "Bangles", "Cuff" ]
            }, {
                title: "Necklace",
                types: [ "Pendant", "Choker", "Lariat" ]
            }, {
                title: "Ring",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Earring",
                types: [ "Studs", "Drops", "Hoops" ]
            }, {
                title: "Broache",
                types: []
            }, {
                title: "Cufflink",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Hair Piece",
                types: []
            } ],
            material: [ "Sterling Silver", "Yellow Gold Plated", "Yellow Gold", "Rose Gold", "White Gold", "Fabric", "Rubber", "Brass", "Plexi", "Leather", "Wood", "Fiber", "Plastic", "Alternative", "Glass" ]
        };
    }
    angular.module("app.public.product").controller("ProductListController", Internal);
    Internal.$inject = [ "$scope", "productsResolve" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product.list", {
            url: "",
            views: {
                "content@app.public.product": {
                    templateUrl: "public/html/public/product/list/public.product.list.html",
                    controller: "ProductListController",
                    controllerAs: "vm"
                }
            },
            resolve: {
                productsResolve: [ "productsList", function(productsList) {
                    return productsList.query().$promise;
                } ]
            }
        });
    }
    angular.module("app.public.product.list").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.product.list.view", []);
}();

!function() {
    "use strict";
    function internal($resource) {
        return $resource("/api/product-view/:_id", {
            _id: "@_id"
        }, {
            query: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.public.product.list.view").factory("productView", internal);
    internal.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.product.list.view").controller("ProductViewController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.product.view", {
            url: "view/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/product/list/view/public.product.list.view.html",
                    controller: "ProductViewController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.product.list.view").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.questions", [ "app.public.questions.view" ]);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.questions").controller("QuestionsController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.questions", {
            url: "questions/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/questions/public.questions.html",
                    controller: "QuestionsController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.questions").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.questions.view", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.questions.view").controller("QuestionsViewController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.questions.view", {
            url: "view",
            views: {
                "page@": {
                    templateUrl: "public/html/public/questions/view/public.questions.view.html",
                    controller: "QuestionsViewController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.questions.view").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair", [ "app.public.repair.cleaning", "app.public.repair.checking", "app.public.repair.refinishing", "app.public.repair.repolishing", "app.public.repair.sizing", "app.public.repair.soldering" ]);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair").controller("RepairController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair", {
            abstract: !0,
            url: "repairs/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/repair/public.repair.html",
                    controller: "RepairController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.checking", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.checking").controller("RepairCheckingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.checking", {
            url: "checking/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/checking/public.repair.checking.html",
                    controller: "RepairCheckingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.checking").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.cleaning", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.cleaning").controller("RepairCleaningController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.cleaning", {
            url: "cleaning/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/cleaning/public.repair.cleaning.html",
                    controller: "RepairCleaningController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.cleaning").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.gluing", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.gluing").controller("RepairGluingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.gluing", {
            url: "gluing/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/gluing/public.repair.gluing.html",
                    controller: "RepairGluingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.gluing").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.refinishing", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.refinishing").controller("RepairRefinishingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.refinishing", {
            url: "refinishing/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/refinishing/public.repair.refinishing.html",
                    controller: "RepairRefinishingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.refinishing").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.repolishing", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.repolishing").controller("RepairRepolishingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.repolishing", {
            url: "repolishing/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/repolishing/public.repair.repolishing.html",
                    controller: "RepairRepolishingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.repolishing").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.sizing", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.sizing").controller("RepairSizingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.sizing", {
            url: "ring-sizing/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/sizing/public.repair.sizing.html",
                    controller: "RepairSizingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.sizing").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.repair.soldering", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.repair.soldering").controller("RepairSolderingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.repair.soldering", {
            url: "soldering/",
            views: {
                "content@app.public.repair": {
                    templateUrl: "public/html/public/repair/soldering/public.repair.soldering.html",
                    controller: "RepairSolderingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.repair.soldering").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service", [ "app.public.service.alteration", "app.public.service.antique", "app.public.service.appraisal", "app.public.service.costume", "app.public.service.custom", "app.public.service.engraving" ]);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service").controller("ServiceController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service", {
            abstract: !0,
            url: "services/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/service/public.service.html",
                    controller: "ServiceController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.alteration", []);
}();

!function() {
    "use strict";
    function Internal($state) {
    }
    angular.module("app.public.service.alteration").controller("ServiceAlterationController", Internal);
    Internal.$inject = [ "$state" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.alteration", {
            url: "alterations/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/alteration/public.service.alteration.html",
                    controller: "ServiceAlterationController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.alteration").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.antique", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service.antique").controller("ServiceAntiqueController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.antique", {
            url: "antique/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/antique/public.service.antique.html",
                    controller: "ServiceAntiqueController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.antique").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.appraisal", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service.appraisal").controller("ServiceAppraisalController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.appraisal", {
            url: "appraisals/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/appraisal/public.service.appraisal.html",
                    controller: "ServiceAppraisalController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.appraisal").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.costume", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service.costume").controller("ServiceCostumeController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.costume", {
            url: "costumes/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/costume/public.service.costume.html",
                    controller: "ServiceCostumeController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.costume").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.custom", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service.custom").controller("ServiceCustomController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.custom", {
            url: "custom/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/custom/public.service.custom.html",
                    controller: "ServiceCustomController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.custom").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.service.engraving", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.service.engraving").controller("ServiceEngravingController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.service.engraving", {
            url: "engravings/",
            views: {
                "content@app.public.service": {
                    templateUrl: "public/html/public/service/engraving/public.service.engraving.html",
                    controller: "ServiceEngravingController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.service.engraving").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio", [ "app.public.studio.equipment", "app.public.studio.facility", "app.public.studio.join", "app.public.studio.sell" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio", {
            abstract: !0,
            url: "studio/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/studio/public.studio.html"
                }
            }
        });
    }
    angular.module("app.public.studio").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio.sell", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.studio.sell").controller("StudioSellController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio.sell", {
            url: "sell-your-work/",
            views: {
                "content@app.public.studio": {
                    templateUrl: "public/html/public/studio/sell/public.studio.sell.html",
                    controller: "StudioSellController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.studio.sell").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio.award", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.studio.award").controller("StudioAwardController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio.award", {
            url: "entrepreneur-award/",
            views: {
                "content@app.public.studio": {
                    templateUrl: "public/html/public/studio/award/public.studio.award.html",
                    controller: "StudioAwardController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.studio.award").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio.join", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.studio.join").controller("StudioJoinController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio.join", {
            url: "join-our-studio/",
            views: {
                "content@app.public.studio": {
                    templateUrl: "public/html/public/studio/join/public.studio.join.html",
                    controller: "StudioJoinController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.studio.join").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio.equipment", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.studio.equipment").controller("StudioEquipmentController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio.equipment", {
            url: "equipment/",
            views: {
                "content@app.public.studio": {
                    templateUrl: "public/html/public/studio/equipment/public.studio.equipment.html",
                    controller: "StudioEquipmentController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.studio.equipment").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.studio.facility", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.studio.facility").controller("StudioFacilityController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.studio.facility", {
            url: "facilities/",
            views: {
                "content@app.public.studio": {
                    templateUrl: "public/html/public/studio/facility/public.studio.facility.html",
                    controller: "StudioFacilityController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.studio.facility").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.terms", []);
}();

!function() {
    "use strict";
    function Internal() {
    }
    angular.module("app.public.terms").controller("TermsController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.terms", {
            url: "terms",
            views: {
                "page@": {
                    templateUrl: "public/html/public/terms/public.terms.html",
                    controller: "TermsController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.terms").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.wedding", [ "app.public.wedding.custom", "app.public.wedding.list" ]);
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.wedding", {
            url: "wedding/",
            views: {
                "page@": {
                    templateUrl: "public/html/public/wedding/public.wedding.html"
                }
            }
        });
    }
    angular.module("app.public.wedding").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.wedding.custom", []);
}();

!function() {
    "use strict";
    function Internal() {
        this.products = [];
    }
    angular.module("app.public.wedding.custom").controller("WeddingCustomController", Internal);
    Internal.$inject = [];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.wedding.custom", {
            url: "custom-order/",
            views: {
                "content@app.public.wedding": {
                    templateUrl: "public/html/public/wedding/custom/public.wedding.custom.html",
                    controller: "WeddingCustomController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.wedding.custom").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.public.wedding.list", []);
}();

!function() {
    "use strict";
    function Internal($scope) {
        var vm = this;
        vm.compact = !1;
        vm.toggle = function() {
            vm.compact = !vm.compact;
        };
        vm.sliderRanges = {
            price: {
                min: 0,
                max: 1e4
            }
        };
        vm.sliderSettings = {
            price: {
                min: 0,
                max: 1e4,
                step: 100
            }
        };
        vm.search = {
            category: [ {
                title: "Bracelet",
                types: [ "Bangles", "Cuff" ]
            }, {
                title: "Necklace",
                types: [ "Pendant", "Choker", "Lariat" ]
            }, {
                title: "Ring",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Earring",
                types: [ "Studs", "Drops", "Hoops" ]
            }, {
                title: "Broache",
                types: []
            }, {
                title: "Cufflink",
                types: [ "Sterling Silver", "Costume" ]
            }, {
                title: "Hair Piece",
                types: []
            } ],
            material: [ "Sterling Silver", "Yellow Gold Plated", "Yellow Gold", "Rose Gold", "White Gold", "Fabric", "Rubber", "Brass", "Plexi", "Leather", "Wood", "Fiber", "Plastic", "Alternative", "Glass" ]
        };
    }
    angular.module("app.public.wedding.list").controller("WeddingListController", Internal);
    Internal.$inject = [ "$scope" ];
}();

!function() {
    "use strict";
    function internal($stateProvider) {
        $stateProvider.state("app.public.wedding.list", {
            url: "rings/",
            views: {
                "content@app.public.wedding": {
                    templateUrl: "public/html/public/wedding/list/public.wedding.list.html",
                    controller: "WeddingListController",
                    controllerAs: "vm"
                }
            }
        });
    }
    angular.module("app.public.wedding.list").config(internal);
    internal.$inject = [ "$stateProvider" ];
}();